########################################################################################################################
#                                                                                                                      #
#                                      The Tari Network Configuration File                                             #
#                                                                                                                      #
########################################################################################################################

# This file carries all the configuration options for running Tari-related nodes and infrastructure in one single
# file. As you'll notice, almost all configuraton options are commented out. This is because they are either not
# needed, are for advanced users that know what they want to tweak, or are already set at their default values.  If
# things are working fine, then there's no need to change anything here.
#
# Each major section is clearly marked so that you can quickly find the section you're looking for. This first
# section holds configuration options that are common to all sections.

# A note about Logging - The logger is initialised before the configuration file is loaded. For this reason, logging
# is not configured here, but in `~/.tari/log4rs.yml` (*nix / OsX) or `%USERPROFILE%\.tari\log4rs.yml` (Windows) by
# default, or the location specified in the TARI_LOGFILE environment variable.

[common]
# Select the network to connect to. Valid options are:
#   mainnet - the "real" Tari network (default)
#   igor - the Second Tari test net
network = "igor"

# Tari is a 100% peer-to-peer network, so there are no servers to hold messages for you while you're offline.
# Instead, we rely on our peers to hold messages for us while we're offline. This settings sets maximum size of the
# message cache that for holding our peers' messages, in MB.
#message_cache_size = 10

# When storing messages for peers, hold onto them for at most this long before discarding them. The default is 1440
# minutes = or 24 hrs.
#message_cache_ttl = 1440

# If peer nodes spam you with messages, or are otherwise badly behaved, they will be added to your denylist and banned
# You can set a time limit to release that ban (in minutes), or otherwise ban them for life (-1). The default is to
# ban them for 10 days.
#denylist_ban_period = 1440

# The number of liveness sessions to allow. Liveness sessions can be established by liveness monitors over TCP by
# sending a 0x50 (P) as the first byte. Any messages sent must be followed by newline message no longer than
# 50 characters. That message will be echoed back.
#liveness_max_sessions = 0
#liveness_allowlist_cidrs = ["127.0.0.1/32"]

# The buffer size constants for the publish/subscribe connector channel, connecting comms messages to the domain layer:
# - Buffer size for the base node (min value = 30, default value = 1500).
#buffer_size_base_node = 1500
# - Buffer size for the console wallet (min value = 300, default value = 50000).
#buffer_size_console_wallet = 50000
# The rate limit constants for the publish/subscribe connector channel, i.e. maximum amount of inbound messages to
# accept - any rate attemting to exceed this limit will be throttled.
# - Rate limit for the base node (min value = 5, default value = 1000).
#buffer_rate_limit_base_node = 1000
# - Rate limit for the console wallet (min value = 5, default value = 1000).
buffer_rate_limit_console_wallet = 1000
# The message deduplication persistent cache size - messages with these hashes in the cache will only be processed once.
# The cache will also be trimmed down to size periodically (min value = 0, default value = 2500).
dedup_cache_capacity = 25000

# The timeout (s) for requesting blocks from a peer during blockchain sync (min value = 10 s, default value = 150 s).
#fetch_blocks_timeout = 150

# The timeout (s) for requesting UTXOs from a base node (min value = 10 s, default value = 600 s).
#fetch_utxos_timeout = 600

# The timeout (s) for requesting other base node services (min value = 10 s, default value = 180 s).
#service_request_timeout = 180

# The maximum simultaneous comms RPC sessions allowed (default value = 1000). Setting this to -1 will allow unlimited
# sessions.
rpc_max_simultaneous_sessions = 10000

# Auto Update
#
# This interval in seconds to check for software updates. Setting this to 0 disables checking.
# auto_update.check_interval = 300
# Customize the hosts that are used to check for updates. These hosts must contain update information in DNS TXT records.
# auto_update.dns_hosts = ["updates.tari.com"]
# Customize the location of the update SHA hashes and maintainer-signed signature.
# auto_update.hashes_url = "https://.../hashes.txt"
# auto_update.hashes_sig_url = "https://.../hashes.txt.sig"

########################################################################################################################
#                                                                                                                      #
#                                          Wallet Configuration Options                                                #
#                                                                                                                      #
########################################################################################################################

# If you are not running a wallet from this configuration, you can simply leave everything in this section commented out

[wallet]
# Override common.network for wallet
# network = "igor"

# The relative folder to store your local key data and transaction history. DO NOT EVER DELETE THIS FILE unless you
#  a) have backed up your seed phrase and
#  b) know what you are doing!
wallet_db_file = "wallet/wallet.dat"
console_wallet_db_file = "wallet/console-wallet.dat"

# Console wallet password
# Should you wish to start your console wallet without typing in your password, the following options are available:
# 1. Start the console wallet with the --password=secret argument, or
# 2. Set the environment variable TARI_WALLET_PASSWORD=secret before starting the console wallet, or
# 3. Set the "password" key in this [wallet] section of the config
# password = "secret"

# WalletNotify
# Allows you to execute a script or program when these transaction events are received by the console wallet:
# - transaction received
# - transaction sent
# - transaction cancelled
# - transaction mined but unconfirmed
# - transaction mined and confirmed
# An example script is available here: applications/tari_console_wallet/src/notifier/notify_example.sh
# notify = "/path/to/script"

# This is the timeout period that will be used to monitor TXO queries to the base node (default = 60). Larger values
# are needed for wallets with many (>1000) TXOs to be validated.
base_node_query_timeout = 180
# The amount of seconds added to the current time (Utc) which will then be used to check if the message has
# expired or not when processing the message (default = 10800).
#saf_expiry_duration = 10800
# This is the number of block confirmations required for a transaction to be considered completely mined and
# confirmed. (default = 3)
#transaction_num_confirmations_required = 3
# This is the timeout period that will be used for base node broadcast monitoring tasks (default = 60)
transaction_broadcast_monitoring_timeout = 180
# This is the timeout period that will be used for chain monitoring tasks (default = 60)
#transaction_chain_monitoring_timeout = 60
# This is the timeout period that will be used for sending transactions directly (default = 20)
transaction_direct_send_timeout = 180
# This is the timeout period that will be used for sending transactions via broadcast mode (default = 60)
transaction_broadcast_send_timeout = 180
# This is the size of the event channel used to communicate transaction status events to the wallet's UI. A busy console
# wallet doing thousands of bulk payments or used for stress testing needs a fairly big size (>10000) (default = 1000).
transaction_event_channel_size = 25000
# This is the size of the event channel used to communicate base node events to the wallet. A busy console
# wallet doing thousands of bulk payments or used for stress testing needs a fairly big size (>3000) (default = 250).
base_node_event_channel_size = 3500
# This is the size of the event channel used to communicate output manager events to the wallet. A busy console
# wallet doing thousands of bulk payments or used for stress testing needs a fairly big size (>3000) (default = 250).
output_manager_event_channel_size = 3500
# This is the size of the event channel used to communicate base node update events to the wallet. A busy console
# wallet doing thousands of bulk payments or used for stress testing needs a fairly big size (>300) (default = 50).
base_node_update_publisher_channel_size = 500
# If a large amount of tiny valued uT UTXOs are used as inputs to a transaction, the fee may be larger than
# the transaction amount. Set this value to `false` to allow spending of "dust" UTXOs for small valued
# transactions (default = true).
#prevent_fee_gt_amount = false
# This option specifies the transaction routing mechanism as being directly between wallets, making
# use of store and forward or using any combination of these.
# (options: "DirectOnly", "StoreAndForwardOnly", DirectAndStoreAndForward". default: "DirectAndStoreAndForward").
#transaction_routing_mechanism = "DirectAndStoreAndForward"

# UTXO scanning service interval (default = 12 hours, i.e. 60 * 60 * 12 seconds)
scan_for_utxo_interval = 180

# When running the console wallet in command mode, use these values to determine what "stage" and timeout to wait
# for sent transactions.
# The stages are:
# - "DirectSendOrSaf" - The transaction was initiated and was accepted via Direct Send or Store And Forward.
# - "Negotiated" - The recipient replied and the transaction was negotiated.
# - "Broadcast" - The transaction was broadcast to the base node mempool.
# - "MinedUnconfirmed" - The transaction was successfully detected as mined but unconfirmed on the blockchain.
# - "Mined" - The transaction was successfully detected as mined and confirmed on the blockchain.

# The default values are: "Broadcast", 300
#command_send_wait_stage = "Broadcast"
#command_send_wait_timeout = 300

# The base nodes that the wallet should use for service requests and tracking chain state.
# base_node_service_peers = ["public_key::net_address", ...]
# base_node_service_peers = ["e856839057aac496b9e25f10821116d02b58f20129e9b9ba681b830568e47c4d::/onion3/exe2zgehnw3tvrbef3ep6taiacr6sdyeb54be2s25fpru357r4skhtad:18141"]

# Configuration for the wallet's base node service
# The refresh interval, defaults to 10 seconds
base_node_service_refresh_interval = 30
# The maximum age of service requests in seconds, requests older than this are discarded
base_node_service_request_max_age = 180

#[base_node.transport.tor]
#control_address = "/ip4/127.0.0.1/tcp/9051"
#control_auth_type = "none" # or "password"
# Required for control_auth_type = "password"
#control_auth_password = "super-secure-password"

# Wallet configuration options for testnet
[wallet.igor]
# -------------- Transport configuration --------------
# Use TCP to connect to the Tari network. This transport can only communicate with TCP/IP addresses, so peers with
# e.g. tor onion addresses will not be contactable.
#transport = "tcp"
# The address and port to listen for peer connections over TCP.
#tcp_listener_address = "/ip4/0.0.0.0/tcp/18188"
# Configures a tor proxy used to connect to onion addresses. All other traffic uses direct TCP connections.
# This setting is optional however, if it is not specified, this node will not be able to connect to nodes that
# only advertise an onion address.
#tcp_tor_socks_address = "/ip4/127.0.0.1/tcp/36050"
#tcp_tor_socks_auth = "none"

# Configures the node to run over a tor hidden service using the Tor proxy. This transport recognises ip/tcp,
# onion v2, onion v3 and dns addresses.
transport = "tor"
# Address of the tor control server
tor_control_address = "/ip4/127.0.0.1/tcp/9051"
# Authentication to use for the tor control server
tor_control_auth = "none" # or "password=xxxxxx"
# The onion port to use.
#tor_onion_port = 18141
# The address to which traffic on the node's onion address will be forwarded
# tor_forward_address = "/ip4/127.0.0.1/tcp/0"
# Instead of attemping to get the SOCKS5 address from the tor control port, use this one. The default is to
# use the first address returned by the tor control port (GETINFO /net/listeners/socks).
#tor_socks_address_override=

# Use a SOCKS5 proxy transport. This transport recognises any addresses supported by the proxy.
#transport = "socks5"
# The address of the SOCKS5 proxy
#socks5_proxy_address = "/ip4/127.0.0.1/tcp/9050"
# The address to which traffic will be forwarded
#socks5_listener_address = "/ip4/127.0.0.1/tcp/18188"
#socks5_auth = "none" # or "username_password=username:xxxxxxx"

# Optionally bind an additional TCP socket for inbound Tari P2P protocol commms.
# Use cases include:
# - allowing wallets to locally connect to their base node, rather than through tor, when used in conjunction with `tor_proxy_bypass_addresses`
# - multiple P2P addresses, one public over DNS and one private over TOR
# - a "bridge" between TOR and TCP-only nodes
# auxilary_tcp_listener_address = "/ip4/127.0.0.1/tcp/9998"

# When these addresses are encountered when dialing another peer, the tor proxy is bypassed and the connection is made
# direcly over TCP. /ip4, /ip6, /dns, /dns4 and /dns6 are supported.
# tor_proxy_bypass_addresses = ["/dns4/my-foo-base-node/tcp/9998"]
# When using the tor transport and set to true, outbound TCP connections bypass the tor proxy. Defaults to false for better privacy
# tor_proxy_bypass_for_outbound_tcp = false;

########################################################################################################################
#                                                                                                                      #
#                                          Base Node Configuration Options                                             #
#                                                                                                                      #
########################################################################################################################

# If you are not running a Tari Base node, you can simply leave everything in this section commented out. Base nodes
# help maintain the security of the Tari token and are the surest way to preserve your privacy and be 100% sure that
# no-one is cheating you out of your money.

[base_node]
# Override common.network for base node
# network = "igor"

# Configuration options for testnet
[base_node.igor]
# The type of database backend to use. Currently supported options are "memory" and "lmdb". LMDB is recommnded for
# almost all use cases.
db_type = "lmdb"

# db config defaults
# db_init_size_mb = 1000
# db_grow_size_mb = 500
# db_resize_threshold_mb = 100

# The maximum number of orphans that can be stored in the Orphan block pool. Default value is "720".
# orphan_storage_capacity = 720
# The size that the orphan pool will be allowed to grow before it is cleaned out, with threshold being tested every
# time before fetch and add blocks. Default value is "0", which indicates the orphan pool will not be cleaned out.
#orphan_db_clean_out_threshold = 0
# The pruning horizon that indicates how many full blocks without pruning must be kept by the base node. Default value
# is "0", which indicates an archival node without any pruning.
#pruning_horizon = 0

# The amount of messages that will be permitted in the flood ban timespan of 100s (Default igor = 1000,
# default mainnet = 10000)
flood_ban_max_msg_count = 10000

# The relative path to store persistent data
data_dir = "igor"

# When first logging onto the Tari network, you need to find a few peers to bootstrap the process. In the absence of
# any servers, this is a little more challenging than usual. Our best strategy is just to try and connect to the peers
# you knew about last time you ran the software. But what about when you run the software for the first time? That's
# where this allowlist comes in. It's a list of known Tari nodes that are likely to be around for a long time and that
# new nodes can use to introduce themselves to the network.
# peer_seeds = ["public_key1::address1", "public_key2::address2",... ]
peer_seeds = [
    "8e7eb81e512f3d6347bf9b1ca9cd67d2c8e29f2836fc5bd608206505cc72af34::/onion3/l4wouomx42nezhzexjdzfh7pcou5l7df24ggmwgekuih7tkv2rsaokqd:18141",
    "00b35047a341401bcd336b2a3d564280a72f6dc72ec4c739d30c502acce4e803::/onion3/ojhxd7z6ga7qrvjlr3px66u7eiwasmffnuklscbh5o7g6wrbysj45vid:18141",
    "40a9d8573745072534bce7d0ecafe882b1c79570375a69841c08a98dee9ecb5f::/onion3/io37fylc2pupg4cte4siqlsmuszkeythgjsxs2i3prm6jyz2dtophaad:18141",
    "126c7ee64f71aca36398b977dd31fbbe9f9dad615df96473fb655bef5709c540::/onion3/6ilmgndocop7ybgmcvivbdsetzr5ggj4hhsivievoa2dx2b43wqlrlid:18141",
]

# This allowlist provides a method to force syncing from any known nodes you may choose, for example if you have a
# couple of nodes that you always want to have in sync.
# force_sync_peers = ["public_key1::address1", "public_key2::address2",... ]
force_sync_peers = [
    #my known peer 1
    #"public_key1::address1",
    #my known peer 2
    #"public_key1::address1",
]

# DNS seeds
# The DNS records in these hostnames should provide TXT records as per https://github.com/tari-project/tari/pull/2319
# Enter a domain name for the TXT records: seeds.tari.com
dns_seeds =["seeds.igor.tari.com"]
# The name server used to resolve DNS seeds  (Default: "1.1.1.1:53")
# dns_seeds_name_server = "1.1.1.1:53"
# Set to true to only accept DNS records that pass DNSSEC validation (Default: true)
dns_seeds_use_dnssec = false

# Determines the method of syncing blocks when the node is lagging. If you are not struggling with syncing, then
# it is recommended to leave this setting as it. Available values are ViaBestChainMetadata and ViaRandomPeer.
#block_sync_strategy="ViaBestChainMetadata"

# Configure the maximum number of threads available for base node operation. These threads are spawned lazily, so a higher
# number is recommended.
# max_threads = 512

# The number of threads to spawn and keep active at all times. The default is the number of cores available on this node.
# core_threads = <number of cores>

# The node's publicly-accessible hostname. This is the host name that is advertised on the network so that
# peers can find you.
# _NOTE_: If using the `tor` transport type, public_address will be ignored and an onion address will be
# automatically configured
#public_address = "/ip4/172.2.3.4/tcp/18189"

# do we allow test addresses to be accpted like 127.0.0.1
allow_test_addresses = false

# Enable the gRPC server for the base node. Set this to true if you want to enable third-party wallet software
grpc_enabled = true
# The socket to expose for the gRPC base node server. This value is ignored if grpc_enabled is false.
# Valid values here are IPv4 and IPv6 TCP sockets, local unix sockets (e.g. "ipc://base-node-gprc.sock.100")
grpc_base_node_address = "127.0.0.1:18142"
# The socket to expose for the gRPC wallet server. This value is ignored if grpc_enabled is false.
# Valid values here are IPv4 and IPv6 TCP sockets, local unix sockets (e.g. "ipc://base-node-gprc.sock.100")
grpc_console_wallet_address = "127.0.0.1:18143"

# A path to the file that stores your node identity and secret key
base_node_identity_file = "config/base_node_id.json"

# A path to the file that stores your console wallet's node identity and secret key
console_wallet_identity_file = "config/console_wallet_id.json"

# -------------- Transport configuration --------------
# Use TCP to connect to the Tari network. This transport can only communicate with TCP/IP addresses, so peers with
# e.g. tor onion addresses will not be contactable.
#transport = "tcp"
# The address and port to listen for peer connections over TCP.
#tcp_listener_address = "/ip4/0.0.0.0/tcp/18189"
# Configures a tor proxy used to connect to onion addresses. All other traffic uses direct TCP connections.
# This setting is optional however, if it is not specified, this node will not be able to connect to nodes that
# only advertise an onion address.
#tcp_tor_socks_address = "/ip4/127.0.0.1/tcp/36050"
#tcp_tor_socks_auth = "none"

# Configures the node to run over a tor hidden service using the Tor proxy. This transport recognises ip/tcp,
# onion v2, onion v3 and dns addresses.
transport = "tor"
# Address of the tor control server
tor_control_address = "/ip4/127.0.0.1/tcp/9051"
# Authentication to use for the tor control server
tor_control_auth = "none" # or "password=xxxxxx"
# The onion port to use.
#tor_onion_port = 18141
# The address to which traffic on the node's onion address will be forwarded
# tor_forward_address = "/ip4/127.0.0.1/tcp/0"
# Instead of attemping to get the SOCKS5 address from the tor control port, use this one. The default is to
# use the first address returned by the tor control port (GETINFO /net/listeners/socks).
#tor_socks_address_override=

# Use a SOCKS5 proxy transport. This transport recognises any addresses supported by the proxy.
#transport = "socks5"
# The address of the SOCKS5 proxy
#socks5_proxy_address = "/ip4/127.0.0.1/tcp/9050"
# The address to which traffic will be forwarded
#socks5_listener_address = "/ip4/127.0.0.1/tcp/18189"
#socks5_auth = "none" # or "username_password=username:xxxxxxx"

# A path to the file that stores the tor hidden service private key, if using the tor transport.
base_node_tor_identity_file = "config/base_node_tor.json"

# A path to the file that stores the console wallet's tor hidden service private key, if using the tor transport.
console_wallet_tor_identity_file = "config/console_wallet_tor.json"

# Optionally bind an additional TCP socket for inbound Tari P2P protocol commms.
# Use cases include:
# - allowing wallets to locally connect to their base node, rather than through tor, when used in conjunction with `tor_proxy_bypass_addresses`
# - multiple P2P addresses, one public over DNS and one private over TOR
# - a "bridge" between TOR and TCP-only nodes
# auxilary_tcp_listener_address = "/ip4/127.0.0.1/tcp/9998"

# When these addresses are encountered when dialing another peer, the tor proxy is bypassed and the connection is made
# direcly over TCP. /ip4, /ip6, /dns, /dns4 and /dns6 are supported.
# tor_proxy_bypass_addresses = ["/dns4/my-foo-base-node/tcp/9998"]
# When using the tor transport and set to true, outbound TCP connections bypass the tor proxy. Defaults to false for better privacy
# tor_proxy_bypass_for_outbound_tcp = false;

########################################################################################################################
#                                                                                                                      #
#                                             Mempool Configuration Options                                            #
#                                                                                                                      #
########################################################################################################################
[mempool.igor]

# The maximum number of transactions that can be stored in the Unconfirmed Transaction pool. This is the main waiting
# area in the mempool and almost all transactions will end up in this pool before being mined. It's for this reason
# that this parameter will have the greatest impact on actual memory usage by your mempool. If you are not mining,
# you can reduce this parameter to reduce memory consumption by your node, at the expense of network bandwith. For
# reference, a single block can hold about 4,000 transactions
# Default = 40,000 transactions
# unconfirmed_pool_storage_capacity = 40000

# The maximum number of transactions that can be stored in the Orphan Transaction pool. This pool keep transactions
# that are 'orphans', i.e. transactions with inputs that don't exist in the UTXO set. If you're not mining, and
# memory usage is a concern, this can safely be set to zero. Even so, orphan transactions do not appear that often
# (it's usually a short chain of spends that are broadcast in quick succession). The other potential source of orphan
# transactions are from DOS attacks and setting the `tx_ttl` parameter to a low value is an effective countermeasure
# in this case. Default: 250 transactions
# orphan_pool_storage_capacity = 250

# The maximum amount of time an orphan transaction will be permitted to stay in the mempool before being rejected.
# This should be set to a fairly long enough to allow the parent transaction to arrive; but low enough also to thwart
# DOS attacks. Default: 300 seconds
#orphan_tx_ttl = 300

# The maximum number of transactions that can be stored in the Pending Transaction pool. This pool holds transactions
# that are valid, but cannot be included in a block yet becuase there is a consensus rule holding it back, usually a
# time lock. Once the conditions holding the transaction in the pending pool are resolved, the transaction will move
# into the unconfirmed pool.  Default: 5,000 transactions
# pending_pool_storage_capacity = 5000

# The ReorgPool consists of all transactions that have recently been added to blocks.
# When a potential blockchain reorganization occurs the transactions can be recovered from the ReorgPool and can be
# added back into the UnconfirmedPool. Transactions in the ReOrg pool have a limited Time-to-live and will be removed
# from the pool when the Time-to-live thresholds is reached. Also, when the capacity of the pool has been reached, the
# oldest transactions will be removed to make space for incoming transactions. The pool capacity and TTL parameters
# have the same meaning as those for the pending pool, but applied to the reorg pool; obviously.
# Defaults: 10,000 transactions and 300 seconds
#reorg_pool_storage_capacity = 10_000
#reorg_tx_ttl = 300

# The maximum number of transactions that can be skipped when compiling a set of highest priority transactions,
# skipping over large transactions are performed in an attempt to fit more transactions into the remaining space.
# This parameter only affects mining nodes. You can ignore it if you are only running a base node. Even so, changing
# this parameter should not affect profitabilty in any meaningful way, since the transaction weights are selected to
# closely mirror how much block space they take up
#weight_tx_skip_count = 20

########################################################################################################################
#                                                                                                                      #
#                                         Validator Node Configuration Options                                         #
#                                                                                                                      #
########################################################################################################################

# If you are not , you can simply leave everything in this section commented out. Base nodes
# help maintain the security of the Tari token and are the surest way to preserve your privacy and be 100% sure that
# no-one is cheating you out of your money.

[validator_node]

# Enable the gRPC server for the base node. Set this to true if you want to enable third-party wallet software
#grpc_enabled = false

# The socket to expose for the gRPC base node server. This value is ignored if grpc_enabled is false.
# Valid values here are IPv4 and IPv6 TCP sockets, local unix sockets (e.g. "ipc://base-node-gprc.sock.100")
#grpc_address = "127.0.0.1:18042"

########################################################################################################################
#                                                                                                                      #
#                                             Merge Mining Configuration Options                                      #
#                                                                                                                      #
########################################################################################################################

[merge_mining_proxy.igor]

# URL to monerod
monerod_url = "http://monero-stagenet.exan.tech:38081"  # stagenet
#monerod_url = "http://18.133.59.45:28081"               # testnet
#monerod_url = "http://18.132.124.81:18081"              # mainnet
#monerod_url = "http://monero.exan.tech:18081"           # mainnet alternative

# Address of the tari_merge_mining_proxy application
proxy_host_address = "127.0.0.1:7878"

# In sole merged mining, the block solution is usually submitted to the Monero blockchain
# (monerod) as well as to the Tari blockchain, then this setting should be "true". With pool
# merged mining, there is no sense in submitting the solution to the Monero blockchain as the
# pool does that, then this setting should be "false". (default = true).
proxy_submit_to_origin = true

# If authentication is being used for curl
monerod_use_auth = false

# Username for curl
monerod_username = ""

# Password for curl
monerod_password = ""

# The merge mining proxy can either wait for the base node to achieve initial sync at startup before it enables mining,
# or not. If merge mining starts before the base node has achieved initial sync, those Tari mined blocks will not be
# accepted. (Default value = true; will wait for base node initial sync).
#wait_for_initial_sync_at_startup = true

[stratum_transcoder]

# Address of the tari_stratum_transcoder application
transcoder_host_address = "127.0.0.1:7879"

[mining_node]
# Number of mining threads
# Default: number of logical CPU cores
#num_mining_threads=8

# GRPC address of base node
# Default: value from `base_node.grpc_base_node_address`
#base_node_grpc_address = "127.0.0.1:18142"

# GRPC address of console wallet
# Default: value from `base_node.grpc_console_wallet_address`
#wallet_grpc_address = "127.0.0.1:18143"

# Start mining only when base node is bootstrapped
# and current block height is on the tip of network
# Default: true
#mine_on_tip_only=true

# Will check tip with node every N seconds and restart mining
# if height already taken and option `mine_on_tip_only` is set
# to true
# Default: 30 seconds
#validate_tip_timeout_sec=30

# Stratum Mode configuration
# mining_pool_address = "miningcore.igor.tari.com:3052"
# mining_wallet_address = "YOUR_WALLET_PUBLIC_KEY"
# mining_worker_name = "worker1"
