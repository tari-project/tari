########################################################################################################################
#                                                                                                                      #
#                                      The Tari Network Configuration File                                             #
#                                                                                                                      #
########################################################################################################################

# This file carries all the configuration options for running Tari-related nodes and infrastructure in one single
# file. As you'll notice, almost all configuraton options are commented out. This is because they are either not
# needed, are for advanced users that know what they want to tweak, or are already set at their default values.  If
# things are working fine, then there's no need to change anything here.
#
# Each major section is clearly marked so that you can quickly find the section you're looking for. This first
# section holds configuration options that are common to all sections.

# A note about Logging - The logger is initialised before the configuration file is loaded. For this reason, logging
# is not configured here, but in `~/.tari/log4rs.yml` (*nix / OsX) or `%USERPROFILE%\.tari\log4rs.yml` (Windows) by
# default, or the location specified in the TARI_LOGFILE environment variable.

[common]
# Tari is a 100% peer-to-peer network, so there are no servers to hold messages for you while you're offline.
# Instead, we rely on our peers to hold messages for us while we're offline. This settings sets maximum size of the
# message cache that for holding our peers' messages, in MB.
#message_cache_size = 10

# When storing messages for peers, hold onto them for at most this long before discarding them. The default is 1440
# minutes = or 24 hrs.
#message_cache_ttl = 1440

# The peer database list is stored in a database file at this location
#peer_database = "~/.tari/peers" # or "%USERPROFILE%\\.tari\peers"

# If peer nodes spam you with messages, or are otherwise badly behaved, they will be added to your denylist and banned
# You can set a time limit to release that ban (in minutes), or otherwise ban them for life (-1). The default is to
# ban them for 10 days.
#denylist_ban_period = 1440

# The number of liveness sessions to allow. Liveness sessions can be established by liveness monitors over TCP by
# sending a 0x50 (P) as the first byte. Any messages sent must be followed by newline message no longer than
# 50 characters. That message will be echoed back.
#liveness_max_sessions = 0
#liveness_allowlist_cidrs = ["127.0.0.1/32"]

# The buffer size constants for the publish/subscribe connector channel, connecting comms messages to the domain layer:
# - Buffer size for the base node (min value = 30, default value = 100).
#buffer_size_base_node = 100
# - Buffer size for the base node wallet (min value = 300, default value = 1000).
#buffer_size_base_node_wallet = 1000
# The rate limit constants for the publish/subscribe connector channel, i.e. maximum amount of inbound messages to
# accept - any rate attemting to exceed this limit will be throttled.
# - Rate limit for the base node (min value = 5, default value = 20).
#buffer_rate_limit_base_node = 20
# - Rate limit for the base node wallet (min value = 5, default value = 20).
#buffer_rate_limit_base_node_wallet = 20

########################################################################################################################
#                                                                                                                      #
#                                          Wallet Configuration Options                                                #
#                                                                                                                      #
########################################################################################################################

# If you are not running a wallet from this configuration, you can simply leave everything in this section commented out

[wallet]

# Enable the gRPC server for the wallet library. Set this to true if you want to enable third-party wallet software
#grpc_enabled = true

# The socket to expose for the gRPC wallet server. This value is ignored if grpc_enabled is false.
# Valid values here are IPv4 and IPv6 TCP sockets, local unix sockets (e.g. "ipc://base-node-gprc.sock.100")
#grpc_address = "tcp://127.0.0.1:80400"

# The relative folder to store your local key data and transaction history. DO NOT EVER DELETE THIS FILE unless you
#  a) have backed up your seed phrase and
#  b) know what you are doing!
wallet_file = "wallet\\wallet.dat"

# This is the timeout period that will be used for base node monitoring tasks (default = 30)
#transaction_base_node_monitoring_timeout = 30
# This is the timeout period that will be used for sending transactions directly (default = 20)
#transaction_direct_send_timeout = 20
# This is the timeout period that will be used for sending transactions via broadcast mode (default = 30)
#transaction_broadcast_send_timeout = 30

#[base_node.transport.tor]
#control_address = "/ip4/127.0.0.1/tcp/9051"
#control_auth_type = "none" # or "password"
# Required for control_auth_type = "password"
#control_auth_password = "super-secure-password"

########################################################################################################################
#                                                                                                                      #
#                                          Base Node Configuration Options                                             #
#                                                                                                                      #
########################################################################################################################

# If you are not running a Tari Base node, you can simply leave everything in this section commented out. Base nodes
# help maintain the security of the Tari token and are the surest way to preserve your privacy and be 100% sure that
# no-one is cheating you out of your money.

[base_node]

# Select the network to connect to. Valid options are:
#   mainnet - the "real" Tari network (default)
#   rincewind - the Tari test net
network = "rincewind"


# Configuration options for testnet
[base_node.rincewind]
# The type of database backend to use. Currently supported options are "memory" and "lmdb". LMDB is recommnded for
# almost all use cases.
db_type = "lmdb"

# The maximum number of orphans that can be stored in the Orphan block pool. Default value is "720".
#orphan_storage_capacity = 720
# The pruning horizon that indicates how many full blocks without pruning must be kept by the base node. Default value
# is "0", which indicates an archival node without any pruning.
#pruning_horizon = 0

# Enable if this node must be a mining node
#enable_mining = true
#num_mining_threads = 1

# The relative path to store persistent data
data_dir="rincewind"

# When first logging onto the Tari network, you need to find a few peers to bootstrap the process. In the absence of
# any servers, this is a little more challenging than usual. Our best strategy is just to try and connect to the peers
# you knew about last time you ran the software. But what about when you run the software for the first time? That's
# where this allowlist comes in. It's a list of known Tari nodes that are likely to be around for a long time and that
# new nodes can use to introduce themselves to the network.
# peer_seeds = ["public_key1::address1", "public_key2::address2",... ]
peer_seeds = [
    #Test-03
    "5edb022af1c21d644dfceeea2fcc7d3fac7a57ab44cf775b9a6f692cb75ed767::/onion3/vjkj44zpriqzrlve2qbiasrluaaxagrb6iuavzaascbujri6gw3rcmyd:18141",

    #Test-04
    "d44d23b005dcd364776e4cad69ac800b8ab6d6bf12097a5edb8720ce584ed45a::/onion3/3gficjdxzduuxtbyzt3auwwzjv7xlljnonzer5t2aglczrjb54wxadyd:18141",

    #faucet
    "2e93c460df49d8cfbbf7a06dd9004c25a84f92584f7d0ac5e30bd8e0beee9a43::/onion3/nuuq3e2olck22rudimovhmrdwkmjncxvwdgbvfxhz6myzcnx2j4rssyd:18141",

    #t-tbn-nvir
    "06e98e9c5eb52bd504836edec1878eccf12eb9f26a5fe5ec0e279423156e657a::/onion3/bsmuof2cn4y2ysz253gzsvg3s72fcgh4f3qcm3hdlxdtcwe6al2dicyd:18141",

    #t-tbn-ncal
    "3a5081a0c9ff72b2d5cf52f8d78cc5a206d643259cdeb7d934512f519e090e6c::/onion3/gfynjxfm7rcxcekhu6jwuhvyyfdjvmruvvehurmlte565v74oinv2lad:18141",

    #t-tbn-oregon
    "e6f3c83dc592af45ede5424974f52c776e9e6859e530066e57c1b0dd59d9b61c::/onion3/ixihtmcbvr2q53bj23bsla5hi7ek37odnsxzkapr7znyfneqxzhq7zad:18141",

    #t-tbn-london
    "ce2254825d0e0294d31a86c6aac18f83c9a7b3d01d9cdb6866b4b2af8fd3fd17::/onion3/gm7kxmr4cyjg5fhcw4onav2ofa3flscrocfxiiohdcys3kshdhcjeuyd:18141",

    #t-tbn-stockholm
    "461d4d7be657521969896f90e3f611f0c4e902ca33d3b808c03357ad86fd7801::/onion3/4me2aw6auq2ucql34uuvsegtjxmvsmcyk55qprtrpqxvu3whxajvb5ad:18141",

    #t-tbn-seoul
    "d440b328e69b20dd8ee6c4a61aeb18888939f0f67cf96668840b7f72055d834c::/onion3/j5x7xkcxnrich5lcwibwszd5kylclbf6a5unert5sy6ykio2kphnopad:18141",

    #t-tbn-sydney
    "b81b4071f72418cc410166d9baf0c6ef7a8c309e64671fafbbed88f7e1ee7709::/onion3/lwwcv4nq7epgem5vdcawom4mquqsw2odbwfcjzv3j6sksx4gr24e52ad:18141"
]

# Determines the method of syncing blocks when the node is lagging. If you are not struggling with syncing, then
# it is recommended to leave this setting as it. Available values are ViaBestChainMetadata and ViaRandomPeer.
#block_sync_strategy="ViaBestChainMetadata"

# Configure the number of threads to spawn for long-running tasks, like block and transaction validation. A good choice
# for this value is somewhere between n/2 and n - 1, where n is the number of cores on your machine.
blocking_threads = 4

# Configure the number of threads for the overall node work-stealing scheduler. A good value here is between 3 and
# n - blocking_threads, where n is the number of cores on your machine, and blocking_thread is set above.
 core_threads = 4

# The node's publicly-accessible hostname. This is the host name that is advertised on the network so that
# peers can find you.
# _NOTE_: If using the `tor` transport type, public_address will be ignored and an onion address will be
# automatically configured
#public_address = "/ip4/172.2.3.4/tcp/18189"

# Enable the gRPC server for the base node. Set this to true if you want to enable third-party wallet software
#grpc_enabled = false

# The socket to expose for the gRPC base node server. This value is ignored if grpc_enabled is false.
# Valid values here are IPv4 and IPv6 TCP sockets, local unix sockets (e.g. "ipc://base-node-gprc.sock.100")
#grpc_address = "tcp://127.0.0.1:18141"

# A path to the file that stores your node identity and secret key
identity_file = ".\\config\\node_id.json"

# A path to the file that stores your wallet's node identity and secret key
wallet_identity_file = ".\\config\\wallet-identity.json"

# -------------- Transport configuration --------------
# Use TCP to connect to the Tari network. This transport can only communicate with TCP/IP addresses, so peers with
# e.g. tor onion addresses will not be contactable.
#transport = "tcp"
# The address and port to listen for peer connections over TCP.
#tcp_listener_address = "/ip4/0.0.0.0/tcp/18189"
# Configures a tor proxy used to connect to onion addresses. All other traffic uses direct TCP connections.
# This setting is optional however, if it is not specified, this node will not be able to connect to nodes that
# only advertise an onion address.
#tcp_tor_socks_address = "/ip4/127.0.0.1/tcp/36050"
#tcp_tor_socks_auth = "none"

# Configures the node to run over a tor hidden service using the Tor proxy. This transport recognises ip/tcp,
# onion v2, onion v3 and dns addresses.
transport = "tor"
# Address of the tor control server
tor_control_address = "/ip4/127.0.0.1/tcp/9051"
# Authentication to use for the tor control server
tor_control_auth = "none" # or "password=xxxxxx"
# The onion port to use.
tor_onion_port = 18150
# The address to which traffic on the node's onion address will be forwarded
#tor_forward_address = "/ip4/127.0.0.1/tcp/18150"
# Instead of attemping to get the SOCKS5 address from the tor control port, use this one. The default is to
# use the first address returned by the tor control port (GETINFO /net/listeners/socks).
#tor_socks_address_override=

# Use a SOCKS5 proxy transport. This transport recognises any addresses supported by the proxy.
#transport = "socks5"
# The address of the SOCKS5 proxy
#socks5_proxy_address = "/ip4/127.0.0.1/tcp/9050"
# The address to which traffic will be forwarded
#socks5_listener_address = "/ip4/127.0.0.1/tcp/18189"
#socks5_auth = "none" # or "username_password=username:xxxxxxx"

# A path to the file that stores the tor hidden service private key, if using the tor transport.
tor_identity_file = ".\\config\\tor.json"

# A path to the file that stores the wallet's tor hidden service private key, if using the tor transport.
wallet_tor_identity_file = ".\\config\\wallet-tor.json"

[base_node.mainnet]
# The type of database backend to use. Currently supported options are "memory" and "lmdb". LMDB is recommnded for
# almost all use cases.
#db_type = "lmdb"

# The maximum number of orphans that can be stored in the Orphan block pool. Default value is "720".
#orphan_storage_capacity = 720
# The pruning horizon that indicates how many full blocks without pruning must be kept by the base node. Default value
# is "0", which indicates an archival node without any pruning.
#pruning_horizon = 0

# Enable if this node must be a mining node
#enable_mining = true
#num_mining_threads = 1

# The relative path to store persistent data
#data_dir = "mainnet"

# When first logging onto the Tari network, you need to find a few peers to bootstrap the process. In the absence of
# any servers, this is a little more challenging than usual. Our best strategy is just to try and connect to the peers
# you knew about last time you ran the software. But what about when you run the software for the first time? That's
# where this allowlist comes in. It's a list of known Tari nodes that are likely to be around for a long time and that
# new nodes can use to introduce themselves to the network.
# peer_seeds = ["public_key1::address1", "public_key2::address2",... ]
peer_seeds = []

# Configure the number of threads to spawn for long-running tasks, like block and transaction validation. A good choice
# for this value is somewhere between n/2 and n - 1, where n is the number of cores on your machine.
#blocking_threads = 4

# Configure the number of threads for the overall node work-stealing scheduler. A good value here is between 3 and
# n - blocking_threads, where n is the number of cores on your machine, and blocking_thread is set above.
 #core_threads = 6

# Enable the gRPC server for the base node. Set this to true if you want to enable third-party wallet software
#grpc_enabled = false

# The socket to expose for the gRPC base node server. This value is ignored if grpc_enabled is false.
# Valid values here are IPv4 and IPv6 TCP sockets, local unix sockets (e.g. "ipc://base-node-gprc.sock.100")
#grpc_address = "tcp://127.0.0.1:18041"

# A path to the file that stores your node identity and secret key
#identity_file = "./node_id.json" # or ".\\node_id.json"

# A path to the file that stores your wallet's node identity and secret key
#wallet_identity_file = "./wallet-identity.json" # or ".\\config\\wallet-identity.json"

# -------------- Transport configuration --------------
# Use TCP to connect to the Tari network. This transport can only communicate with TCP/IP addresses, so peers with
# e.g. tor onion addresses will not be contactable.
#transport = "tcp"
# The address and port to listen for peer connections over TCP.
#tcp_listener_address = "/ip4/0.0.0.0/tcp/18189"
# Address of the SOCK5 service to use to resolve tor addresses
# tcp_tor_socks_address # disabled by default
# tcp_tor_socks_auth = "none"

# Configures the node to run over a tor hidden service using the Tor proxy. This transport recognises ip/tcp,
# onion v2, onion v3 and dns addresses.
#transport = "tor"
# Address of the tor control server
#tor_control_address = "/ip4/127.0.0.1/tcp/9051"
# Authentication to use for the tor control server
#tor_control_auth = "none" # or "password=xxxxxx"
# The onion port to use.
#tor_onion_port = 18141
# The address to which traffic on the node's onion address will be forwarded
#tor_forward_address = "/ip4/127.0.0.1/tcp/18141"
# Instead of attemping to get the SOCKS5 address from the tor control port, use this one. The default is to
# use the first address returned by the tor control port (GETINFO /net/listeners/socks).
#tor_socks_address_override=

# Use a SOCKS5 proxy transport. This transport recognises any addresses supported by the proxy.
#transport = "socks5"
# The address of the SOCKS5 proxy
#socks5_proxy_address = "/ip4/127.0.0.1/tcp/9050"
# The address to which traffic will be forwarded
#socks5_listener_address = "/ip4/127.0.0.1/tcp/18189"
#socks5_auth = "none" # or "username_password=username:xxxxxxx"

# A path to the file that stores the tor hidden service private key, if using the tor transport.
#tor_identity_file = "./tor.json" # or ".\\tor.json"

# A path to the file that stores the wallet's tor hidden service private key, if using the tor transport.
#wallet_tor_identity_file = "./wallet-tor.json" # or ".\\wallet-tor.json"

########################################################################################################################
#                                                                                                                      #
#                                             Mempool Configuration Options                                            #
#                                                                                                                      #
########################################################################################################################
[mempool.testnet]

# The maximum period the mempool will wait for responses to requests made to base nodes [default: 60 seconds].
# request_timeout = 60

# The maximum number of transactions that can be stored in the Unconfirmed Transaction pool. This is the main waiting
# area in the mempool and almost all transactions will end up in this pool before being mined. It's for this reason
# that this parameter will have the greatest impact on actual memory usage by your mempool. If you are not mining,
# you can reduce this parameter to reduce memory consumption by your node, at the expense of network bandwith. For
# reference, a single block can hold about 4,000 transactions
# Default = 40,000 transactions
# unconfirmed_pool_storage_capacity = 40000

# The maximum number of transactions that can be stored in the Orphan Transaction pool. This pool keep transactions
# that are 'orphans', i.e. transactions with inputs that don't exist in the UTXO set. If you're not mining, and
# memory usage is a concern, this can safely be set to zero. Even so, orphan transactions do not appear that often
# (it's usually a short chain of spends that are broadcast in quick succession). The other potential source of orphan
# transactions are from DOS attacks and setting the `tx_ttl` parameter to a low value is an effective countermeasure
# in this case. Default: 250 transactions
# orphan_pool_storage_capacity = 250

# The maximum amount of time an orphan transaction will be permitted to stay in the mempool before being rejected.
# This should be set to a fairly long enough to allow the parent transaction to arrive; but low enough also to thwart
# DOS attacks. Default: 300 seconds
#orphan_tx_ttl = 300

# The maximum number of transactions that can be stored in the Pending Transaction pool. This pool holds transactions
# that are valid, but cannot be included in a block yet becuase there is a consensus rule holding it back, usually a
# time lock. Once the conditions holding the transaction in the pending pool are resolved, the transaction will move
# into the unconfirmed pool.  Default: 5,000 transactions
# pending_pool_storage_capacity = 5000

# The ReorgPool consists of all transactions that have recently been added to blocks.
# When a potential blockchain reorganization occurs the transactions can be recovered from the ReorgPool and can be
# added back into the UnconfirmedPool. Transactions in the ReOrg pool have a limited Time-to-live and will be removed
# from the pool when the Time-to-live thresholds is reached. Also, when the capacity of the pool has been reached, the
# oldest transactions will be removed to make space for incoming transactions. The pool capacity and TTL parameters
# have the same meaning as those for the pending pool, but applied to the reorg pool; obviously.
# Defaults: 10,000 transactions and 300 seconds
#reorg_pool_storage_capacity = 10_000
#reorg_tx_ttl = 300

# The maximum number of transactions that can be skipped when compiling a set of highest priority transactions,
# skipping over large transactions are performed in an attempt to fit more transactions into the remaining space.
# This parameter only affects mining nodes. You can ignore it if you are only running a base node. Even so, changing
# this parameter should not affect profitabilty in any meaningful way, since the transaction weights are selected to
# closely mirror how much block space they take up
#weight_tx_skip_count = 20

[mempool.mainnet]

# The maximum period the mempool will wait for responses to requests made to base nodes [default: 60 seconds].
# request_timeout = 60

# The maximum number of transactions that can be stored in the Unconfirmed Transaction pool. This is the main waiting
# area in the mempool and almost all transactions will end up in this pool before being mined. It's for this reason
# that this parameter will have the greatest impact on actual memory usage by your mempool. If you are not mining,
# you can reduce this parameter to reduce memory consumption by your node, at the expense of network bandwith. For
# reference, a single block can hold about 4,000 transactions
# Default = 40,000 transactions
# unconfirmed_pool_storage_capacity = 40000

# The maximum number of transactions that can be stored in the Orphan Transaction pool. This pool keep transactions
# that are 'orphans', i.e. transactions with inputs that don't exist in the UTXO set. If you're not mining, and
# memory usage is a concern, this can safely be set to zero. Even so, orphan transactions do not appear that often
# (it's usually a short chain of spends that are broadcast in quick succession). The other potential source of orphan
# transactions are from DOS attacks and setting the `tx_ttl` parameter to a low value is an effective countermeasure
# in this case. Default: 250 transactions
# orphan_pool_storage_capacity = 250

# The maximum amount of time an orphan transaction will be permitted to stay in the mempool before being rejected.
# This should be set to a fairly long enough to allow the parent transaction to arrive; but low enough also to thwart
# DOS attacks. Default: 300 seconds
#orphan_tx_ttl = 300

# The maximum number of transactions that can be stored in the Pending Transaction pool. This pool holds transactions
# that are valid, but cannot be included in a block yet becuase there is a consensus rule holding it back, usually a
# time lock. Once the conditions holding the transaction in the pending pool are resolved, the transaction will move
# into the unconfirmed pool.  Default: 5,000 transactions
# pending_pool_storage_capacity = 5000

# The ReorgPool consists of all transactions that have recently been added to blocks.
# When a potential blockchain reorganization occurs the transactions can be recovered from the ReorgPool and can be
# added back into the UnconfirmedPool. Transactions in the ReOrg pool have a limited Time-to-live and will be removed
# from the pool when the Time-to-live thresholds is reached. Also, when the capacity of the pool has been reached, the
# oldest transactions will be removed to make space for incoming transactions. The pool capacity and TTL parameters
# have the same meaning as those for the pending pool, but applied to the reorg pool; obviously.
# Defaults: 10,000 transactions and 300 seconds
#reorg_pool_storage_capacity = 10_000
#reorg_tx_ttl = 300

# The maximum number of transactions that can be skipped when compiling a set of highest priority transactions,
# skipping over large transactions are performed in an attempt to fit more transactions into the remaining space.
# This parameter only affects mining nodes. You can ignore it if you are only running a base node. Even so, changing
# this parameter should not affect profitabilty in any meaningful way, since the transaction weights are selected to
# closely mirror how much block space they take up
#weight_tx_skip_count = 20

########################################################################################################################
#                                                                                                                      #
#                                         Validator Node Configuration Options                                         #
#                                                                                                                      #
########################################################################################################################

# If you are not , you can simply leave everything in this section commented out. Base nodes
# help maintain the security of the Tari token and are the surest way to preserve your privacy and be 100% sure that
# no-one is cheating you out of your money.

[validator_node]

# Enable the gRPC server for the base node. Set this to true if you want to enable third-party wallet software
#grpc_enabled = false

# The socket to expose for the gRPC base node server. This value is ignored if grpc_enabled is false.
# Valid values here are IPv4 and IPv6 TCP sockets, local unix sockets (e.g. "ipc://base-node-gprc.sock.100")
#grpc_address = "tcp://127.0.0.1:18042"
