########################################################################################################################
#                                                                                                                      #
#                                          Base Node Configuration Options                                             #
#                                                                                                                      #
########################################################################################################################

# If you are not running a Tari Base node, you can simply leave everything in this section commented out. Base nodes
# help maintain the security of the Tari token and are the surest way to preserve your privacy and be 100% sure that
# no-one is cheating you out of your money.

[base_node]
# Selected network
network = "dibbler"
# The socket to expose for the gRPC base node server
grpc_address = "/ip4/127.0.0.1/tcp/18142"

# Spin up and use a built-in Tor instance. This only works on macos/linux and you must comment out tor_control_address below.
# This requires that the base node was built with the optional "libtor" feature flag.
#use_libtor = true

[dibbler.base_node]
# A path to the file that stores your node identity and secret key
identity_file = "config/base_node_id_dibbler.json"

[base_node.p2p]
# The node's publicly-accessible hostname. This is the host name that is advertised on the network so that
# peers can find you.
# _NOTE_: If using the `tor` transport type, public_address will be ignored and an onion address will be
# automatically configured
public_address = "/ip4/172.2.3.4/tcp/18189"

# Optionally bind an additional TCP socket for inbound Tari P2P protocol commms.
# Use cases include:
# - allowing wallets to locally connect to their base node, rather than through tor, when used in conjunction with `tor_proxy_bypass_addresses`
# - multiple P2P addresses, one public over DNS and one private over TOR
# - a "bridge" between TOR and TCP-only nodes
auxiliary_tcp_listener_address = "/ip4/127.0.0.1/tcp/9998"

[base_node.p2p.transport]
# -------------- Transport configuration --------------
# Use TCP to connect to the Tari network. This transport can only communicate with TCP/IP addresses, so peers with
# e.g. tor onion addresses will not be contactable.
#transport = "tcp"
# The address and port to listen for peer connections over TCP.
tcp.listener_address = "/ip4/0.0.0.0/tcp/18189"
# Configures a tor proxy used to connect to onion addresses. All other traffic uses direct TCP connections.
# This setting is optional however, if it is not specified, this node will not be able to connect to nodes that
# only advertise an onion address.
tcp.tor_socks_address = "/ip4/127.0.0.1/tcp/36050"
tcp.tor_socks_auth = "none"

# # Configures the node to run over a tor hidden service using the Tor proxy. This transport recognises ip/tcp,
# # onion v2, onion v3 and dns addresses.
#type = "tor"
# Address of the tor control server
tor.control_address = "/ip4/127.0.0.1/tcp/9051"
# Authentication to use for the tor control server
tor.control_auth = "none" # or "password=xxxxxx"
# The onion port to use.
tor.onion_port = 18141
# When these peer addresses are encountered when dialing another peer, the tor proxy is bypassed and the connection is made
# directly over TCP. /ip4, /ip6, /dns, /dns4 and /dns6 are supported.
tor.proxy_bypass_addresses = []
#tor.proxy_bypass_addresses = ["/dns4/my-foo-base-node/tcp/9998"]
# When using the tor transport and set to true, outbound TCP connections bypass the tor proxy. Defaults to false for better privacy
tor.proxy_bypass_for_outbound_tcp = false

# Use a SOCKS5 proxy transport. This transport recognises any addresses supported by the proxy.
#type = "socks5"
# The address of the SOCKS5 proxy
# Traffic will be forwarded to tcp.listener_address
socks.proxy_address = "/ip4/127.0.0.1/tcp/9050"
socks.auth = "none" # or "username_password=username:xxxxxxx"

[base_node.p2p.dht]
auto_join = true
database_url = "base_node_dht.db"
# do we allow test addresses to be accepted like 127.0.0.1
allow_test_addresses = false

[base_node.p2p.dht.saf_config]

[base_node.lmdb]
#init_size_bytes = 1000000
#grow_size_bytes = 1600000
#resize_threshold_bytes = 1600000

[base_node.storage]
# Set to true to record all reorgs. Recorded reorgs can be viewed using the list-reorgs command.
track_reorgs = true
