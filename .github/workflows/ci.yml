---
name: CI

'on':
  workflow_dispatch:
  push:
    branches:
      - development
      - main
      - ci-*
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

env:
  toolchain: nightly-2022-05-01
  CARGO_HTTP_MULTIPLEXING: false
  CARGO_TERM_COLOR: always
  PROTOC: protoc
  TERM: unkown

jobs:
  clippy:
    name: clippy
    #runs-on: [ self-hosted, ubuntu18.04-high-cpu ]
    runs-on: [ ubuntu-20.04 ]
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.toolchain }}
          components: clippy, rustfmt
          override: true
      - name: ubuntu dependencies
        run: |
          sudo apt-get update
          sudo bash scripts/install_ubuntu_dependencies.sh
      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Install cargo-lints
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-lints
      - name: Clippy check (with lints)
        uses: actions-rs/cargo@v1
        with:
          command: lints
          args: clippy --all-targets --all-features
  build:
    name: check nightly
    runs-on: [ self-hosted, ubuntu18.04-high-cpu ]
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.toolchain }}
          profile: minimal
          override: true
      - name: ubuntu dependencies
        run: |
          sudo apt-get update
          sudo bash scripts/install_ubuntu_dependencies.sh
      - name: cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --release --all-targets
      - name: cargo check ffi separately
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --release --package tari_wallet_ffi
  build-stable:
    name: check stable
    runs-on: [ self-hosted, ubuntu18.04-high-cpu ]
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: ubuntu dependencies
        run: |
          sudo apt-get update
          sudo bash scripts/install_ubuntu_dependencies.sh
      - name: rustup show
        run: |
          rustup show
      - name: cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --release --all-targets --locked
      - name: cargo check ffi separately
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --release --package tari_wallet_ffi
  licenses:
    name: file licenses
    runs-on: [ ubuntu-20.04 ]
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: install ripgrep
        run: |
          wget https://github.com/BurntSushi/ripgrep/releases/download/13.0.0/ripgrep_13.0.0_amd64.deb
          sudo dpkg -i ripgrep_13.0.0_amd64.deb
          rg --version || exit 1
      - name: run the license check
        run: ./scripts/file_license_check.sh
  test:
    name: test
    runs-on: [ self-hosted, ubuntu18.04-high-cpu ]
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.toolchain }}
      - name: ubuntu dependencies
        run: |
          sudo apt-get update
          sudo bash scripts/install_ubuntu_dependencies.sh
      - name: test key manager wasm
        run: |
          npm install -g wasm-pack
          cd base_layer/key_manager
          rustup target add wasm32-unknown-unknown
          make test
      - name: cargo test compile
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-run --locked --all-features --release
      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -v --all-features --release

  # Allows other workflows to know the PR number
  artifacts:
    name: pr_2_artifact
    runs-on: [ ubuntu-20.04 ]
    steps:
      - name: Save the PR number in an artifact
        shell: bash
        env:
          PR_NUM: ${{ github.event.number }}
        run: echo $PR_NUM > pr_num.txt

      - name: Upload the PR number
        uses: actions/upload-artifact@v3
        with:
          name: pr_num
          path: ./pr_num.txt
