name: Build Matrix of Binaries

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  schedule:
    - cron: '05 00 * * *'

env:
  TBN_FILENAME: 'tari_base_node'

jobs:
  builds:
    name: Build and deploy tari_base_node
    strategy:
      fail-fast: false
      matrix:
#        os: [ubuntu-latest, macos-latest, windows-latest, seelf-hosted]
        os: [ubuntu-18.04, macos-10.15, windows-2019]
        features: ["avx2", "safe"]
#        target_cpu: ["x86-64", "ivybridge", "skylake"]
        target_cpu: ["x86-64", "ivybridge"]
#        target_release: ["release", "debug"]
        exclude:
          - target_cpu: "x86-64"
            features: "avx2"
#          - target_cpu: "ivybridge"
#            features: "avx2"

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Declare Global Variables 4 GHA ${{ github.event_name }}
      id: vars
      shell: bash
      run: |
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

    - name: Default Destination Folder
      uses: allenevans/set-env@v1.0.0
      with:
        overwrite: true
        S3DESTOVERRIDE: ''
    - name: Scheduled Destination Folder Override
      if: ${{ github.event_name == 'schedule' && github.event.schedule == '05 00 * * *' }}
      uses: allenevans/set-env@v1.0.0
      with:
        overwrite: true
        S3DESTOVERRIDE: 'daily/'

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
#        toolchain: stable
        toolchain: nightly-2020-06-10
        components: rustfmt
#        target: ${{ matrix.target }}
        override: true

    - name: Install Ubuntu dependencies
      if: startsWith(matrix.os,'ubuntu')
      run: |
        sudo apt-get update && \
        sudo apt-get -y install \
          openssl \
          libssl-dev \
          pkg-config \
          libsqlite3-dev \
          git \
          cmake \
          zip \
          libc++-dev \
          libc++abi-dev \
          libprotobuf-dev \
          protobuf-compiler
    - name: Install macOS dependencies
      if: startsWith(matrix.os,'macos')
      run: brew install cmake zip
    - name: Install Windows dependencies
      if: startsWith(matrix.os,'windows')
      run: |
        vcpkg.exe install sqlite3:x64-windows zlib:x64-windows
        choco upgrade llvm zip psutils -y

    - name: Set environment variables - Nix
      if: "!startsWith(matrix.os,'Windows')"
      uses: allenevans/set-env@v1.0.0
      with:
        overwrite: true
        CC: gcc
        TBN_EXT: ''
        TBN_DIST: '/dist'
        S3DESTDIR: 'linux'
        SHARUN: 'shasum --algorithm 256'
#        SHARUN: 'shasum --portable --algorithm 256'
    - name: Set environment variables - macOS
      if: startsWith(matrix.os,'macos')
      uses: allenevans/set-env@v1.0.0
      with:
        overwrite: true
        S3DESTDIR: 'osx'
    - name: Set environment variables - Windows
      if: startsWith(matrix.os,'Windows')
      uses: allenevans/set-env@v1.0.0
      with:
        overwrite: true
        SQLITE3_LIB_DIR: 'C:\vcpkg\installed\x64-windows\lib'
        TBN_EXT: '.exe'
        TBN_DIST: '\dist'
        S3DESTDIR: 'windows'
        SHARUN: 'pwsh C:\ProgramData\chocolatey\lib\psutils\tools\psutils-master\shasum.ps1 --algorithm 256'
#        SHARUN: 'pwsh C:\ProgramData\chocolatey\lib\psutils\tools\psutils-master\shasum.ps1 --portable --algorithm 256'
#        RUSTFLAGS: '-Ctarget-feature=+crt-static'
#        CC: gcc

    - name: Build binaries
#      continue-on-error: true  # WARNING: only for this example, remove it!
      env:
        RUSTFLAGS: '-C target_cpu=${{ matrix.target_cpu }}'
        ROARING_ARCH: '${{ matrix.target_cpu }}'
      shell: bash
      run: |
        cd applications/tari_base_node
        cargo build --release --bin tari_base_node --features ${{ matrix.features}}

    - name: Prep binaries for dist
      shell: bash
      run: |
        mkdir -p "$GITHUB_WORKSPACE${{ env.TBN_DIST }}/"
        cd "$GITHUB_WORKSPACE${{ env.TBN_DIST }}/"
        VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/[\"]/, "", $2); printf("%s",$2) }' "$GITHUB_WORKSPACE/applications/tari_base_node/Cargo.toml")
        echo ::set-env name=VERSION::${VERSION}
        BINFILE="${TBN_FILENAME}-${VERSION}-${{ steps.vars.outputs.sha_short }}-${{ matrix.os }}-${{ matrix.target_cpu }}-${{ matrix.features }}${TBN_EXT}"
        echo ::set-env name=BINFILE::${BINFILE}
        echo "Copying file ${BINFILE} too $(pwd)"
        cp -v "$GITHUB_WORKSPACE/target/release/${TBN_FILENAME}${TBN_EXT}" "./${BINFILE}"
        echo "Archive ${BINFILE} too ${BINFILE}.zip"
        zip -j "${BINFILE}.zip" "${BINFILE}"
        echo "Compute shasum"
        ${SHARUN} "${BINFILE}.zip" >> "${BINFILE}.zip.sha256"
        cat "${BINFILE}.zip.sha256"
        echo "Verifications is "
        ${SHARUN} --check "${BINFILE}.zip.sha256"
        rm -f "${BINFILE}"

    - name: Upload binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.TBN_FILENAME }}-${{ env.VERSION  }}-${{ steps.vars.outputs.sha_short }}-${{ matrix.os }}-${{ matrix.target_cpu }}-${{ matrix.features }}
        path: '${{ github.workspace }}${{ env.TBN_DIST }}/${{ env.BINFILE }}.zip*'

    - name: Sync dist to S3 - Bash
      continue-on-error: true  # WARNING: only for this example, remove it!
      shell: bash
      run: |
        echo "Starting upload ... ${{ env.SOURCE }}"
        aws s3 ${{ env.S3CMD }} --region ${{ secrets.AWS_REGION }} \
          "${{ env.SOURCE }}" \
          s3://${{ secrets.AWS_S3_BUCKET }}/${{ env.DEST_DIR }} \
          ${{ env.S3OPTIONS }}
        echo "Done - $?"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SOURCE: '${{ github.workspace }}${{ env.TBN_DIST }}'
        DEST_DIR: '${{ env.S3DESTOVERRIDE }}${{ env.S3DESTDIR }}/'
        S3CMD: 'cp'
        S3OPTIONS: '--recursive'
        # S3OPTIONS: '--recursive --exclude "*" --include "*.zip*"'
        # S3OPTIONS: '--acl public-read'
