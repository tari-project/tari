---
name: Build libwallet - workflow_call/on-demand

'on':
  workflow_call:
    inputs:
      build_android:
        type: string
        default: 'true'
      build_ios:
        type: string
        default: 'true'
      toolchain:
        type: string
        description: 'Rust toolchain'
        default: 'stable'

env:
  CARGO_UNSTABLE_SPARSE_REGISTRY: true
  TARI_NETWORK_CHANGELOG: "development"

jobs:
  android_build:
    name: Build Android
    if: ${{ inputs.build_android == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        build: [
          x86_64-linux-android,
          aarch64-linux-android,
        ]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Declare TestNet for tags
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        shell: bash
        run: |
          source buildtools/multinet_envs.sh ${{github.ref_name}}
          echo ${TARI_NETWORK}
          echo ${TARI_NETWORK_CHANGELOG}
          echo "TARI_NETWORK=${TARI_NETWORK}" >> $GITHUB_ENV
          echo "TARI_NETWORK_CHANGELOG=${TARI_NETWORK_CHANGELOG}" >> $GITHUB_ENV

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          components: rustfmt, clippy
          toolchain: ${{ inputs.toolchain }}
          targets: ${{ matrix.build }}

      # Don't use caches for binary builds. Start from a clean slate.

      - name: Build libwallet libraries
        env:
          CFLAGS: "-DMDB_USE_ROBUST=0"
        shell: bash
        run: |
          cargo install cross
          cross build --lib --release \
            --package minotari_wallet_ffi \
            --target=${{ matrix.build }}

      - name: Prepare libwallet libraries
        shell: bash
        run: |
          target_temp=${{ matrix.build }}
          # Strip '-linux-android'
          target_platform=$(echo "${target_temp/-linux-android*/}")
          echo "target_platform=${target_platform}" >> $GITHUB_ENV
          mkdir -p "${{ runner.temp }}/libwallet-android-${target_platform}"
          cd "${{ runner.temp }}/libwallet-android-${target_platform}"
          cp -v "$GITHUB_WORKSPACE/target/${{ matrix.build }}/release/libminotari_wallet_ffi.a" "libminotari_wallet_ffi.android_${target_platform}.a"
          cp -v "$GITHUB_WORKSPACE/base_layer/wallet_ffi/wallet.h" libminotari_wallet_ffi.h
          if [ -f "$GITHUB_WORKSPACE/changelog-${{ env.TARI_NETWORK_CHANGELOG }}.md" ]; then
            cp -v "$GITHUB_WORKSPACE/changelog-${{ env.TARI_NETWORK_CHANGELOG }}.md" .
            TARI_NETWORK_CHANGELOG_FILE=libwallet-android-${target_platform}/changelog-${{ env.TARI_NETWORK_CHANGELOG }}.md
            echo ${TARI_NETWORK_CHANGELOG_FILE}
          fi
          cd ..
          shasum -a 256 \
            "libwallet-android-${target_platform}/libminotari_wallet_ffi.android_${target_platform}.a" \
            "libwallet-android-${target_platform}/libminotari_wallet_ffi.h" "${TARI_NETWORK_CHANGELOG_FILE}" \
              > "libwallet-android-${target_platform}/libminotari_wallet_ffi.android_${target_platform}.sha256"
          ls -alht "${{ runner.temp }}/libwallet-android-${target_platform}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: libwallet-android-${{ env.target_platform }}
          path: ${{ runner.temp }}/libwallet-android-${{ env.target_platform }}

  ios_build:
    name: Build iOS
    if: ${{ inputs.build_ios == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        build: [
          x86_64-apple-ios,
          aarch64-apple-ios,
          aarch64-apple-ios-sim,
        ]

    runs-on: macos-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Declare TestNet for tags
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        shell: bash
        run: |
          source buildtools/multinet_envs.sh ${{github.ref_name}}
          echo ${TARI_NETWORK}
          echo ${TARI_NETWORK_CHANGELOG}
          echo "TARI_NETWORK=${TARI_NETWORK}" >> $GITHUB_ENV
          echo "TARI_NETWORK_CHANGELOG=${TARI_NETWORK_CHANGELOG}" >> $GITHUB_ENV

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          components: rustfmt, clippy
          toolchain: ${{ inputs.toolchain }}
          targets: ${{ matrix.build }}

      - name: Install macOS dependencies
        run: brew install cmake coreutils

      # Don't use caches for binary builds. Start from a clean slate.

      - name: Build libwallet libraries
        shell: bash
        run: |
          rustup target add ${{ matrix.build }}
          cargo build --lib --release \
            --package minotari_wallet_ffi \
            --target=${{ matrix.build }}

      - name: Prepare libwallet libraries
        shell: bash
        run: |
          target_temp=${{ matrix.build }}
          # Strip '-apple-ios'
          target_platform=$(echo "${target_temp/-apple-ios/}")
          echo "target_platform=${target_platform}" >> $GITHUB_ENV
          mkdir -p "${{ runner.temp }}/libwallet-ios-${target_platform}"
          cd "${{ runner.temp }}/libwallet-ios-${target_platform}"
          cp -v "$GITHUB_WORKSPACE/target/${{ matrix.build }}/release/libminotari_wallet_ffi.a" "libminotari_wallet_ffi.ios_${target_platform}.a"
          cp -v "$GITHUB_WORKSPACE/base_layer/wallet_ffi/wallet.h" libminotari_wallet_ffi.h
          if [ -f "$GITHUB_WORKSPACE/changelog-${{ env.TARI_NETWORK_CHANGELOG }}.md" ]; then
            cp -v "$GITHUB_WORKSPACE/changelog-${{ env.TARI_NETWORK_CHANGELOG }}.md" .
            TARI_NETWORK_CHANGELOG_FILE=libwallet-ios-${target_platform}/changelog-${{ env.TARI_NETWORK_CHANGELOG }}.md
            echo ${TARI_NETWORK_CHANGELOG_FILE}
          fi

          cd ..
          shasum -a 256 \
            "libwallet-ios-${target_platform}/libminotari_wallet_ffi.ios_${target_platform}.a" \
            "libwallet-ios-${target_platform}/libminotari_wallet_ffi.h" "${TARI_NETWORK_CHANGELOG_FILE}" \
              > "libwallet-ios-${target_platform}/libminotari_wallet_ffi.ios_${target_platform}.sha256"
          ls -alht "${{ runner.temp }}/libwallet-ios-${target_platform}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: libwallet-ios-${{ env.target_platform }}
          path: ${{ runner.temp }}/libwallet-ios-${{ env.target_platform }}

  ios_assemble_universal:
    name: Assemble iOS universal
    if: ${{ inputs.build_ios == 'true' }}
    needs: ios_build

    strategy:
      fail-fast: false

    runs-on: macos-latest

    steps:
      - name: Install macOS dependencies
        run: brew install coreutils

      - name: Download iOS libwallets
        uses: actions/download-artifact@v3
        with:
          path: libwallets

      - name: Verify checksums
        shell: bash
        working-directory: libwallets
        run: |
          ls -alhtR
          find . -name "*.sha256" -type f -print | xargs cat >> libwallets.txt.sha256-verify
          cat libwallets.txt.sha256-verify
          sha256sum -c libwallets.txt.sha256-verify

      - name: Assemble iOS universal libwallet
        shell: bash
        working-directory: libwallets
        run: |
          ls -alhtR
          mkdir libwallet-ios-universal
          cp -v "libwallet-ios-x86_64/libminotari_wallet_ffi.h" \
            libwallet-ios-universal/
          echo "Check for changelog"
          if [ -f libwallet-ios-x86_64/changelog-*.md ]; then
            echo "Changelog found"
            envChangelogFull=$(ls libwallet-ios-x86_64/changelog-*.md)
            echo ${envChangelogFull}
            # Strip suffix
            #envChangelog=${envChangelogFull::-3}
            envChangelog=${envChangelogFull:0:${#envChangelogFull}-3}
            echo ${envChangelog}
            # Strip prefix
            TARI_NETWORK_CHANGELOG=${envChangelog##*/changelog-}
            echo ${TARI_NETWORK_CHANGELOG}
            cp -v "libwallet-ios-x86_64/changelog-${TARI_NETWORK_CHANGELOG}.md" libwallet-ios-universal/
            TARI_NETWORK_CHANGELOG_FILE=libwallet-ios-universal/changelog-${TARI_NETWORK_CHANGELOG}.md
            echo ${TARI_NETWORK_CHANGELOG_FILE}
          else
            echo "No changelog found"
          fi
          lipo -create \
            "libwallet-ios-x86_64/libminotari_wallet_ffi.ios_x86_64.a" \
            "libwallet-ios-aarch64/libminotari_wallet_ffi.ios_aarch64.a" \
              -output "libwallet-ios-universal/libminotari_wallet_ffi.ios_universal.a"
          shasum -a 256 \
            "libwallet-ios-universal/libminotari_wallet_ffi.ios_universal.a" \
            "libwallet-ios-universal/libminotari_wallet_ffi.h" "${TARI_NETWORK_CHANGELOG_FILE}" \
              > "libwallet-ios-universal/libminotari_wallet_ffi.ios_universal.sha256"
          ls -alhtR

      - name: Upload iOS universal libwallet artifacts
        uses: actions/upload-artifact@v3
        with:
          name: libwallet-ios-universal
          path: libwallets/libwallet-ios-universal

      - name: Assemble iOS libwallet xcframework
        shell: bash
        working-directory: libwallets
        run: |
          ls -alhtR
          mkdir libwallet-ios-universal-sim
          lipo -create \
            "libwallet-ios-x86_64/libminotari_wallet_ffi.ios_x86_64.a" \
            "libwallet-ios-aarch64-sim/libminotari_wallet_ffi.ios_aarch64-sim.a" \
              -output "libwallet-ios-universal-sim/libminotari_wallet_ffi.ios_universal-sim.a"
          mkdir libwallet-ios-xcframework
          echo "Check for changelog"
          if [ -f libwallet-ios-x86_64/changelog-*.md ]; then
            echo "Changelog found"
            envChangelogFull=$(ls libwallet-ios-x86_64/changelog-*.md)
            echo ${envChangelogFull}
            # Strip suffix
            #envChangelog=${envChangelogFull::-3}
            envChangelog=${envChangelogFull:0:${#envChangelogFull}-3}
            echo ${envChangelog}
            # Strip prefix
            TARI_NETWORK_CHANGELOG=${envChangelog##*/changelog-}
            echo ${TARI_NETWORK_CHANGELOG}
            cp -v "libwallet-ios-x86_64/changelog-${TARI_NETWORK_CHANGELOG}.md" libwallet-ios-xcframework/
            TARI_NETWORK_CHANGELOG_FILE=libwallet-ios-xcframework/changelog-${TARI_NETWORK_CHANGELOG}.md
            echo ${TARI_NETWORK_CHANGELOG_FILE}
          else
            echo "No changelog found"
          fi
          xcodebuild -create-xcframework \
            -library "libwallet-ios-universal-sim/libminotari_wallet_ffi.ios_universal-sim.a" \
              -headers "libwallet-ios-x86_64/libminotari_wallet_ffi.h" \
            -library "libwallet-ios-aarch64/libminotari_wallet_ffi.ios_aarch64.a" \
              -headers "libwallet-ios-aarch64/libminotari_wallet_ffi.h" \
            -output libwallet-ios-xcframework/libtminoari_wallet_ffi_ios.xcframework
          shasum -a 256 \
            "libwallet-ios-xcframework/libminotari_wallet_ffi_ios.xcframework/Info.plist" \
            "libwallet-ios-xcframework/libminotari_wallet_ffi_ios.xcframework/ios-arm64/Headers" \
            "libwallet-ios-xcframework/libminotari_wallet_ffi_ios.xcframework/ios-arm64/libminotari_wallet_ffi.ios_aarch64.a" \
            "libwallet-ios-xcframework/libminotari_wallet_ffi_ios.xcframework/ios-arm64_x86_64-simulator/Headers" \
            "libwallet-ios-xcframework/libminotari_wallet_ffi_ios.xcframework/ios-arm64_x86_64-simulator/libminotari_wallet_ffi.ios_universal-sim.a" \
            "${TARI_NETWORK_CHANGELOG_FILE}" \
              > "libwallet-ios-xcframework/libminotari_wallet_ffi.ios_xcframework.sha256"
          ls -alhtR

      - name: Upload iOS xcframework libwallet artifacts
        uses: actions/upload-artifact@v3
        with:
          name: libwallet-ios-xcframework
          path: libwallets/libwallet-ios-xcframework
