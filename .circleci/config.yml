version: 2.1

defaults:
  rust_image: &rust_image quay.io/tarilabs/rust_tari-build-with-deps:nightly-2021-05-06

commands:
  test:
    description: Run the tests
    parameters:
      release:
        description: Set this to true to compile in release mode.
        type: boolean
        default: false
    steps:
      - run:
          name: Calculate dependencies
          command: |
            rustc --version >rust-version
            test -e Cargo.lock || cargo generate-lockfile
      - run:
          name: Install cargo2junit
          command: cargo install cargo2junit
      - restore_cache:
          keys:
            - v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-<<parameters.release>>-{{checksum "Cargo.lock"}}
      - run:
          name: Run tests
          command: mkdir -p testresults && cargo test --workspace --all-features -v --jobs=3 <<#parameters.release>>--release<</parameters.release>> -- -Z unstable-options --format json --report-time | cargo2junit > testresults/results.xml
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-<<parameters.release>>-{{checksum "Cargo.lock"}}
      - store_test_results:
          path: testresults
      - store_artifacts:
          path: testresults
  build:
    description: Build
    parameters:
      release:
        description: Set this to true to compile in release mode.
        type: boolean
        default: false
    steps:
      - run:
          name: Calculate dependencies
          command: |
            rustc --version >rust-version
            test -e Cargo.lock || cargo generate-lockfile
      - restore_cache:
          keys:
            - v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-<<parameters.release>>-{{checksum "Cargo.lock"}}
      - run:
          name: Build
          command: cargo build -v --all --all-features --jobs=3 <<#parameters.release>>--release<</parameters.release>>
      - run:
          name: Build Wallet
          command: cargo build -p tari_wallet <<#parameters.release>>--release<</parameters.release>>
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-<<parameters.release>>-{{checksum "Cargo.lock"}}
  clippy:
    description: cargo clippy
    steps:
      - run:
          name: Calculate dependencies
          command: |
            rustc --version >rust-version
            test -e Cargo.lock || cargo generate-lockfile
      - restore_cache:
          keys:
            - v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-{{checksum "Cargo.lock"}}
      - run:
          name: Cargo fmt
          command: |
            TOOLCHAIN=$(cat rust-toolchain)
            rustup component add --toolchain $TOOLCHAIN rustfmt
            cargo fmt --all -- --check
      - run:
          name: Run clippy (main source)
          command: |
            TOOLCHAIN=$(cat rust-toolchain)
            rustup component add --toolchain $TOOLCHAIN clippy
            cargo clippy -- -D warnings -W clippy::cognitive_complexity
      - run:
          name: Run clippy (all targets)
          command: cargo clippy --all-targets -- -D warnings
      - save_cache:
          paths:
            - /usr/local/cargo/registry
            - target
          key: v6-cargo-cache-{{arch}}-{{checksum "rust-version"}}-{{checksum "Cargo.lock"}}
  cucumber-js:
    description: Run cucumber scenarios
    steps:
      - run:
          name: npm ci
          command: cd integration_tests && npm ci
      - run:
          name: Check formatting
          command: cd integration_tests && npm run check-fmt
      - run:
          name: Check eslint
          command: cd integration_tests && npm run lint
      - run:
          name: Pre-build base node
          command: cargo build --release --bin tari_base_node
      - run:
          name: Pre-build wallet
          command: cargo build --release --bin tari_console_wallet
      - run:
          name: Pre-build mmproxy
          command: cargo build --release --bin tari_merge_mining_proxy
      - run:
          name: Run cucumber scenarios
          command: cd integration_tests && mkdir -p cucumber_output && node_modules/.bin/cucumber-js --tags "not @long-running and not @broken and not @flaky" --format json:cucumber_output/tests.cucumber
      - run:
          name: Generate report
          command: cd integration_tests && node ./generate_report.js
          when: always
      - run:
          name: Run flaky/broken cucumber scenarios (Always pass)
          command: cd integration_tests && node_modules/.bin/cucumber-js --tags "not @long-running and (@broken or @flaky)" --format json:cucumber_output/broken-tests.cucumber || true
      - store_test_results:
          path: integration_tests/cucumber_output
      - store_artifacts:
          path: integration_tests/cucumber_output
      - store_artifacts:
          path: integration_tests/temp/reports

jobs:
  test-docs:
    docker:
      - image: *rust_image
    steps:
      - checkout
      - run:
          name: RFC documentation
          command: |
            cargo install mdbook --version ^0.4
            cd RFC && mdbook test && mdbook build

      - persist_to_workspace:
          root: .
          paths: book

  test-tari-release:
    docker:
      - image: *rust_image
    resource_class: medium
    steps:
      - checkout
      - test:
          release: true

  run-integration-tests:
    docker:
      - image: *rust_image
    resource_class: medium
    steps:
      - checkout
      - cucumber-js

  build-tari-release:
    docker:
      - image: *rust_image
    resource_class: medium
    steps:
      - checkout
      - build:
          release: true

  clippy:
    docker:
      - image: *rust_image
    resource_class: medium
    steps:
      - checkout
      - clippy

  deploy-docs:
    docker:
      - image: quay.io/tarilabs/git-ssh-client:0.2-alpine
    steps:
      - checkout
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - "a6:a6:e2:be:a3:94:3e:4c:9d:51:25:f6:98:f9:0c:a4"
      - run:
          name: Deploy docs to gh-pages branch
          command: |
            DEST_BRANCH=gh-pages
            DEST_PATH=book/

            if [[ ! -d $DEST_PATH ]]; then
              echo "$DEST_PATH directory not found!"
              exit 1
            fi

            TMP_DIR=$(mktemp -d /tmp/ghpages_XXXXXX)

            echo "Copying book files to temporary location $TMP_DIR"
            cp -R $DEST_PATH/* $DEST_PATH/.nojekyll $TMP_DIR

            REMOTE=$(git remote get-url origin)

            cd $TMP_DIR

            git config --global user.email "ci-build@tari.com"
            git config --global user.name "ci-build"

            git init
            git checkout -b $DEST_BRANCH
            git remote add origin $REMOTE
            git add --all .
            git commit -m "[skip ci] Update RFC docs"
            git push origin $DEST_BRANCH --force

            echo "Published."

workflows:
  version: 2
  workflow:
    jobs:
      - run-integration-tests:
          filters:
            branches:
              ignore: gh-pages
      # - test-docs:
      #     filters:
      #       branches:
      #         ignore: gh-pages
      # - deploy-docs:
      #     requires:
      #       - test-docs
      #     filters:
      #       branches:
      #         only: development
      # - build-tari-release:
      #     filters:
      #       branches:
      #         ignore: gh-pages
      # - test-tari-release:
      #     filters:
      #       branches:
      #         ignore: gh-pages
      # - clippy:
      #     filters:
      #       branches:
      #         ignore: gh-pages
