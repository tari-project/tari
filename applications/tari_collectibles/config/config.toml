########################################################################################################################
#                                                                                                                      #
#                                          Common Configuration Options                                                #
#                                                                                                                      #
########################################################################################################################

[common]
#override_from="esmeralda"
#base_path="<HOME>/.tari"
#data_dir="data"

[auto_update]
override_from="esmeralda"
# This interval in seconds to check for software updates. Setting this to 0 disables checking.
check_interval = 300

[esmeralda.auto_update]
# Customize the hosts that are used to check for updates. These hosts must contain update information in DNS TXT records.
update_uris = ["updates.esmeralda.taripulse.com"]
# Customize the location of the update SHA hashes and maintainer-signed signature.
# "auto_update.hashes_url" = "https://<address>/hashes.txt"
# "auto_update.hashes_sig_url" = "https://<address>/hashes.txt.sig"
########################################################################################################################
#                                                                                                                      #
#                                          Base Node Configuration Options                                             #
#                                                                                                                      #
########################################################################################################################

# If you are not running a Tari Base node, you can simply leave everything in this section commented out. Base nodes
# help maintain the security of the Tari token and are the surest way to preserve your privacy and be 100% sure that
# no-one is cheating you out of your money.

[base_node]
# The socket to expose for the gRPC base node server
grpc_address = "/ip4/127.0.0.1/tcp/18142"

[base_node.p2p]

[base_node.p2p.transport]
# # Configures the node to run over a tor hidden service using the Tor proxy. This transport recognises ip/tcp,
# # onion v2, onion v3 and dns addresses.
type = "tor"
# Address of the tor control server
tor_control_address = "/ip4/127.0.0.1/tcp/9051"
# The address to which traffic on the node's onion address will be forwarded
tor_forward_address = "/ip4/127.0.0.1/tcp/0"
# Authentication to use for the tor control server
tor_control_auth = "none" # or "password=xxxxxx"
# The onion port to use.
tor_onion_port = 18141
# When these peer addresses are encountered when dialing another peer, the tor proxy is bypassed and the connection is made
# directly over TCP. /ip4, /ip6, /dns, /dns4 and /dns6 are supported.
tor_proxy_bypass_addresses = []
# When using the tor transport and set to true, outbound TCP connections bypass the tor proxy. Defaults to false for better privacy
tor_proxy_bypass_for_outbound_tcp = false

# The type of database backend to use. Currently supported options are "memory" and "lmdb". LMDB is recommnded for
# almost all use cases.
# db_type = "lmdb"

[base_node.lmdb]
db_init_size_mb = 1000
db_grow_size_mb = 500
db_resize_threshold_mb = 100

[base_node.storage]
# Set to true to record all reorgs. Recorded reorgs can be viewed using the list-reorgs command.
track_reorgs = true

# Configuration options for testnet esmeralda
[esmeralda.base_node]


# db config defaults

# The amount of messages that will be permitted in the flood ban timespan of 100s (Default esmeralda = 100000,
# default mainnet = 100000)
flood_ban_max_msg_count = 100_000

# The relative path to store persistent data
data_dir = "esmeralda"

# This allowlist provides a method to force syncing from any known nodes you may choose, for example if you have a
# couple of nodes that you always want to have in sync.
# force_sync_peers = ["public_key1::address1", "public_key2::address2",... ]
force_sync_peers = [
    #my known peer 1
    #"public_key1::address1",
    #my known peer 2
    #"public_key1::address1",
]

#rpc_max_simultaneous_sessions = 100

[base_node.p2p.dht]
auto_join=true
database_url="base_node_dht.db"
# do we allow test addresses to be accepted like 127.0.0.1
allow_test_addresses = false


[base_node.p2p.dht.saf]


# Determines the method of syncing blocks when the node is lagging. If you are not struggling with syncing, then
# it is recommended to leave this setting as it. Available values are ViaBestChainMetadata and ViaRandomPeer.
#block_sync_strategy="ViaBestChainMetadata"

# Configure the maximum number of threads available for base node operation. These threads are spawned lazily, so a higher
# number is recommended.
# max_threads = 512

# The number of threads to spawn and keep active at all times. The default is the number of cores available on this node.
# core_threads = <number of cores>

# The node's publicly-accessible hostname. This is the host name that is advertised on the network so that
# peers can find you.
# _NOTE_: If using the `tor` transport type, public_address will be ignored and an onion address will be
# automatically configured
#public_address = "/ip4/172.2.3.4/tcp/18189"




# A path to the file that stores your node identity and secret key
base_node_identity_file = "config/base_node_id.json"

# -------------- Transport configuration --------------
# Use TCP to connect to the Tari network. This transport can only communicate with TCP/IP addresses, so peers with
# e.g. tor onion addresses will not be contactable.
#transport = "tcp"
# The address and port to listen for peer connections over TCP.
#tcp_listener_address = "/ip4/0.0.0.0/tcp/18189"
# Configures a tor proxy used to connect to onion addresses. All other traffic uses direct TCP connections.
# This setting is optional however, if it is not specified, this node will not be able to connect to nodes that
# only advertise an onion address.
#tcp_tor_socks_address = "/ip4/127.0.0.1/tcp/36050"
#tcp_tor_socks_auth = "none"

# Configures the node to run over a tor hidden service using the Tor proxy. This transport recognises ip/tcp,
# onion v2, onion v3 and dns addresses.
transport = "tor"

# Spin up and use a built-in Tor instance. This only works on macos/linux and you must comment out tor_control_address below.
# This requires that the base node was built with the optional "libtor" feature flag.
#use_libtor = true

# Address of the tor control server
tor_control_address = "/ip4/127.0.0.1/tcp/9051"

# Authentication to use for the tor control server
#tor_control_auth = "none" # or "password=xxxxxx"
# The onion port to use.
#tor_onion_port = 18141
# The address to which traffic on the node's onion address will be forwarded
# tor_forward_address = "/ip4/127.0.0.1/tcp/0"
# Instead of attemping to get the SOCKS5 address from the tor control port, use this one. The default is to
# use the first address returned by the tor control port (GETINFO /net/listeners/socks).
#tor_socks_address_override=

# Use a SOCKS5 proxy transport. This transport recognises any addresses supported by the proxy.
#transport = "socks5"
# The address of the SOCKS5 proxy
# socks5_proxy_address = "/ip4/127.0.0.1/tcp/9050"
# The address to which traffic will be forwarded
#socks5_listener_address = "/ip4/127.0.0.1/tcp/18189"
#socks5_auth = "none" # or "username_password=username:xxxxxxx"

# A path to the file that stores the tor hidden service private key, if using the tor transport.
base_node_tor_identity_file = "config/base_node_tor.json"

# Optionally bind an additional TCP socket for inbound Tari P2P protocol commms.
# Use cases include:
# - allowing wallets to locally connect to their base node, rather than through tor, when used in conjunction with `tor_proxy_bypass_addresses`
# - multiple P2P addresses, one public over DNS and one private over TOR
# - a "bridge" between TOR and TCP-only nodes
# auxilary_tcp_listener_address = "/ip4/127.0.0.1/tcp/9998"

# When these peer addresses are encountered when dialing another peer, the tor proxy is bypassed and the connection is made
# directly over TCP. /ip4, /ip6, /dns, /dns4 and /dns6 are supported.
# tor_proxy_bypass_addresses = ["/dns4/my-foo-base-node/tcp/9998"]
# When using the tor transport and set to true, outbound TCP connections bypass the tor proxy. Defaults to false for better privacy
# tor_proxy_bypass_for_outbound_tcp = false

# Configuration options for testnet Igor
[base_node.igor]
# The type of database backend to use. Currently supported options are "memory" and "lmdb". LMDB is recommnded for
# almost all use cases.
db_type = "lmdb"

# db config defaults
# db_init_size_mb = 1000
# db_grow_size_mb = 500
# db_resize_threshold_mb = 100

# The maximum number of orphans that can be stored in the Orphan block pool. Default value is "720".
#orphan_storage_capacity = 720
# The size that the orphan pool will be allowed to grow before it is cleaned out, with threshold being tested every
# time before fetch and add blocks. Default value is "0", which indicates the orphan pool will not be cleaned out.
#orphan_db_clean_out_threshold = 0
# The pruning horizon that indicates how many full blocks without pruning must be kept by the base node. Default value
# is "0", which indicates an archival node without any pruning.
#pruning_horizon = 0

# The amount of messages that will be permitted in the flood ban timespan of 100s (Default igor = 100000,
# default mainnet = 100000)
flood_ban_max_msg_count = 100_000

# The relative path to store persistent data
data_dir = "igor"

# This allowlist provides a method to force syncing from any known nodes you may choose, for example if you have a
# couple of nodes that you always want to have in sync.
# force_sync_peers = ["public_key1::address1", "public_key2::address2",... ]
force_sync_peers = [
    #my known peer 1
    #"public_key1::address1",
    #my known peer 2
    #"public_key1::address1",
]

# Determines the method of syncing blocks when the node is lagging. If you are not struggling with syncing, then
# it is recommended to leave this setting as it. Available values are ViaBestChainMetadata and ViaRandomPeer.
#block_sync_strategy="ViaBestChainMetadata"

# Configure the maximum number of threads available for base node operation. These threads are spawned lazily, so a higher
# number is recommended.
# max_threads = 512

# The number of threads to spawn and keep active at all times. The default is the number of cores available on this node.
# core_threads = <number of cores>

# The node's publicly-accessible hostname. This is the host name that is advertised on the network so that
# peers can find you.
# _NOTE_: If using the `tor` transport type, public_address will be ignored and an onion address will be
# automatically configured
#public_address = "/ip4/172.2.3.4/tcp/18189"

# do we allow test addresses to be accpted like 127.0.0.1
allow_test_addresses = false

# Enable the gRPC server for the base node. Set this to true if you want to enable third-party wallet software
grpc_enabled = true
# The socket to expose for the gRPC base node server. This value is ignored if grpc_enabled is false.
# Valid values here are IPv4 and IPv6 TCP sockets, local unix sockets (e.g. "ipc://base-node-gprc.sock.100")
grpc_base_node_address = "127.0.0.1:18142"

# A path to the file that stores your node identity and secret key
base_node_identity_file = "config/base_node_id.json"

# A path to the file that stores your console wallet's node identity and secret key
console_wallet_identity_file = "config/console_wallet_id.json"

# -------------- Transport configuration --------------
# Use TCP to connect to the Tari network. This transport can only communicate with TCP/IP addresses, so peers with
# e.g. tor onion addresses will not be contactable.
#transport = "tcp"
# The address and port to listen for peer connections over TCP.
#tcp_listener_address = "/ip4/0.0.0.0/tcp/18189"
# Configures a tor proxy used to connect to onion addresses. All other traffic uses direct TCP connections.
# This setting is optional however, if it is not specified, this node will not be able to connect to nodes that
# only advertise an onion address.
#tcp_tor_socks_address = "/ip4/127.0.0.1/tcp/36050"
#tcp_tor_socks_auth = "none"

# Configures the node to run over a tor hidden service using the Tor proxy. This transport recognises ip/tcp,
# onion v2, onion v3 and dns addresses.
transport = "tor"

# Spin up and use a built-in Tor instance. This only works on macos/linux and you must comment out tor_control_address below.
# This requires that the base node was built with the optional "libtor" feature flag.
#use_libtor = true

# Address of the tor control server
tor_control_address = "/ip4/127.0.0.1/tcp/9051"
# Authentication to use for the tor control server
#tor_control_auth = "none" # or "password=xxxxxx"
# The onion port to use.
#tor_onion_port = 18141
# The address to which traffic on the node's onion address will be forwarded
# tor_forward_address = "/ip4/127.0.0.1/tcp/0"
# Instead of attemping to get the SOCKS5 address from the tor control port, use this one. The default is to
# use the first address returned by the tor control port (GETINFO /net/listeners/socks).
#tor_socks_address_override=

# Use a SOCKS5 proxy transport. This transport recognises any addresses supported by the proxy.
#transport = "socks5"
# The address of the SOCKS5 proxy
#socks5_proxy_address = "/ip4/127.0.0.1/tcp/9050"
# The address to which traffic will be forwarded
#socks5_listener_address = "/ip4/127.0.0.1/tcp/18189"
#socks5_auth = "none" # or "username_password=username:xxxxxxx"

# A path to the file that stores the tor hidden service private key, if using the tor transport.
base_node_tor_identity_file = "config/base_node_tor.json"

# Optionally bind an additional TCP socket for inbound Tari P2P protocol commms.
# Use cases include:
# - allowing wallets to locally connect to their base node, rather than through tor, when used in conjunction with `tor_proxy_bypass_addresses`
# - multiple P2P addresses, one public over DNS and one private over TOR
# - a "bridge" between TOR and TCP-only nodes
# auxilary_tcp_listener_address = "/ip4/127.0.0.1/tcp/9998"

# When these peer addresses are encountered when dialing another peer, the tor proxy is bypassed and the connection is made
# directly over TCP. /ip4, /ip6, /dns, /dns4 and /dns6 are supported.
# tor_proxy_bypass_addresses = ["/dns4/my-foo-base-node/tcp/9998"]
# When using the tor transport and set to true, outbound TCP connections bypass the tor proxy. Defaults to false for better privacy
# tor_proxy_bypass_for_outbound_tcp = false

[metrics]
# server_bind_address = ...
# push_endpoint = http://localhost:9091/metrics/job/base-node
########################################################################################################################
#                                                                                                                      #
#                                          Wallet Configuration Options                                                #
#                                                                                                                      #
########################################################################################################################

[wallet]
# Override common.network for wallet
# network = "esmeralda"

# The relative folder to store your local key data and transaction history. DO NOT EVER DELETE THIS FILE unless you
#  a) have backed up your seed phrase and
#  b) know what you are doing!
wallet_db_file = "wallet/wallet.dat"
console_wallet_db_file = "wallet/console-wallet.dat"

# Enable the gRPC server for the base node. Set this to true if you want to enable third-party wallet software
grpc_enabled = true
# The socket to expose for the gRPC wallet server. This value is ignored if grpc_enabled is false.
grpc_address = "/ip4/127.0.0.1/tcp/18143"

# Console wallet password
# Should you wish to start your console wallet without typing in your password, the following options are available:
# 1. Start the console wallet with the --password=secret argument, or
# 2. Set the environment variable TARI_WALLET_PASSWORD=secret before starting the console wallet, or
# 3. Set the "password" key in this [wallet] section of the config
# password = "secret"

# WalletNotify
# Allows you to execute a script or program when these transaction events are received by the console wallet:
# - transaction received
# - transaction sent
# - transaction cancelled
# - transaction mined but unconfirmed
# - transaction mined and confirmed
# An example script is available here: applications/tari_console_wallet/src/notifier/notify_example.sh
# notify = "/path/to/script"

# This is the timeout period that will be used to monitor TXO queries to the base node (default = 60). Larger values
# are needed for wallets with many (>1000) TXOs to be validated.
base_node_query_timeout = 180
# The amount of seconds added to the current time (Utc) which will then be used to check if the message has
# expired or not when processing the message (default = 10800).
#saf_expiry_duration = 10800
# This is the number of block confirmations required for a transaction to be considered completely mined and
# confirmed. (default = 3)
#transaction_num_confirmations_required = 3
# This is the timeout period that will be used for base node broadcast monitoring tasks (default = 60)
transaction_broadcast_monitoring_timeout = 180
# This is the timeout period that will be used for chain monitoring tasks (default = 60)
#transaction_chain_monitoring_timeout = 60
# This is the timeout period that will be used for sending transactions directly (default = 20)
transaction_direct_send_timeout = 180
# This is the timeout period that will be used for sending transactions via broadcast mode (default = 60)
transaction_broadcast_send_timeout = 180
# This is the size of the event channel used to communicate transaction status events to the wallet's UI. A busy console
# wallet doing thousands of bulk payments or used for stress testing needs a fairly big size (>10000) (default = 1000).
transaction_event_channel_size = 25000
# This is the size of the event channel used to communicate base node events to the wallet. A busy console
# wallet doing thousands of bulk payments or used for stress testing needs a fairly big size (>3000) (default = 250).
base_node_event_channel_size = 3500
# This is the size of the event channel used to communicate output manager events to the wallet. A busy console
# wallet doing thousands of bulk payments or used for stress testing needs a fairly big size (>3000) (default = 250).
output_manager_event_channel_size = 3500
# This is the size of the event channel used to communicate base node update events to the wallet. A busy console
# wallet doing thousands of bulk payments or used for stress testing needs a fairly big size (>300) (default = 50).
base_node_update_publisher_channel_size = 500
# If a large amount of tiny valued uT UTXOs are used as inputs to a transaction, the fee may be larger than
# the transaction amount. Set this value to `false` to allow spending of "dust" UTXOs for small valued
# transactions (default = true).
#prevent_fee_gt_amount = false
# This option specifies the transaction routing mechanism as being directly between wallets, making
# use of store and forward or using any combination of these.
# (options: "DirectOnly", "StoreAndForwardOnly", DirectAndStoreAndForward". default: "DirectAndStoreAndForward").
#transaction_routing_mechanism = "DirectAndStoreAndForward"

# When running the console wallet in command mode, use these values to determine what "stage" and timeout to wait
# for sent transactions.
# The stages are:
# - "DirectSendOrSaf" - The transaction was initiated and was accepted via Direct Send or Store And Forward.
# - "Negotiated" - The recipient replied and the transaction was negotiated.
# - "Broadcast" - The transaction was broadcast to the base node mempool.
# - "MinedUnconfirmed" - The transaction was successfully detected as mined but unconfirmed on the blockchain.
# - "Mined" - The transaction was successfully detected as mined and confirmed on the blockchain.

# The default values are: "Broadcast", 300
#command_send_wait_stage = "Broadcast"
#command_send_wait_timeout = 300

# The base nodes that the wallet should use for service requests and tracking chain state.
# base_node_service_peers = ["public_key::net_address", ...]
# base_node_service_peers = ["e856839057aac496b9e25f10821116d02b58f20129e9b9ba681b830568e47c4d::/onion3/exe2zgehnw3tvrbef3ep6taiacr6sdyeb54be2s25fpru357r4skhtad:18141"]

# Configuration for the wallet's base node service
# The refresh interval, defaults to 10 seconds
base_node_service_refresh_interval = 30
# The maximum age of service requests in seconds, requests older than this are discarded
base_node_service_request_max_age = 180

#[base_node.transport.tor]
#control_address = "/ip4/127.0.0.1/tcp/9051"
#control_auth_type = "none" # or "password"
# Required for control_auth_type = "password"
#control_auth_password = "super-secure-password"

# Wallet configuration options for esmeralda
[wallet.esmeralda]
# -------------- Transport configuration --------------
# Use TCP to connect to the Tari network. This transport can only communicate with TCP/IP addresses, so peers with
# e.g. tor onion addresses will not be contactable.
#transport = "tcp"
# The address and port to listen for peer connections over TCP.
#tcp_listener_address = "/ip4/0.0.0.0/tcp/18188"
# Configures a tor proxy used to connect to onion addresses. All other traffic uses direct TCP connections.
# This setting is optional however, if it is not specified, this node will not be able to connect to nodes that
# only advertise an onion address.
#tcp_tor_socks_address = "/ip4/127.0.0.1/tcp/36050"
#tcp_tor_socks_auth = "none"

# Configures the node to run over a tor hidden service using the Tor proxy. This transport recognises ip/tcp,
# onion v2, onion v3 and dns addresses.
transport = "tor"

# Spin up and use a built-in Tor instance. This only works on macos/linux and you must comment out tor_control_address below.
# This requires that the wallet was built with the optional "libtor" feature flag.
#use_libtor = true

# Address of the tor control server
tor_control_address = "/ip4/127.0.0.1/tcp/9051"
# Authentication to use for the tor control server
#tor_control_auth = "none" # or "password=xxxxxx"
# The onion port to use.
#tor_onion_port = 18141
# The address to which traffic on the node's onion address will be forwarded
# tor_forward_address = "/ip4/127.0.0.1/tcp/0"
# Instead of attemping to get the SOCKS5 address from the tor control port, use this one. The default is to
# use the first address returned by the tor control port (GETINFO /net/listeners/socks).
#tor_socks_address_override=

# Use a SOCKS5 proxy transport. This transport recognises any addresses supported by the proxy.
#transport = "socks5"
# The address of the SOCKS5 proxy
#socks5_proxy_address = "/ip4/127.0.0.1/tcp/9050"
# The address to which traffic will be forwarded
#socks5_listener_address = "/ip4/127.0.0.1/tcp/18188"
#socks5_auth = "none" # or "username_password=username:xxxxxxx"

# Optionally bind an additional TCP socket for inbound Tari P2P protocol commms.
# Use cases include:
# - allowing wallets to locally connect to their base node, rather than through tor, when used in conjunction with `tor_proxy_bypass_addresses`
# - multiple P2P addresses, one public over DNS and one private over TOR
# - a "bridge" between TOR and TCP-only nodes
# auxilary_tcp_listener_address = "/ip4/127.0.0.1/tcp/9998"

# When these peer addresses are encountered when dialing another peer, the tor proxy is bypassed and the connection is made
# directly over TCP. /ip4, /ip6, /dns, /dns4 and /dns6 are supported.
# tor_proxy_bypass_addresses = ["/dns4/my-foo-base-node/tcp/9998"]
# When using the tor transport and set to true, outbound TCP connections bypass the tor proxy. Defaults to false for better privacy
# tor_proxy_bypass_for_outbound_tcp = false

# Wallet configuration options for igor
[wallet.igor]
# -------------- Transport configuration --------------
# Use TCP to connect to the Tari network. This transport can only communicate with TCP/IP addresses, so peers with
# e.g. tor onion addresses will not be contactable.
#transport = "tcp"
# The address and port to listen for peer connections over TCP.
#tcp_listener_address = "/ip4/0.0.0.0/tcp/18188"
# Configures a tor proxy used to connect to onion addresses. All other traffic uses direct TCP connections.
# This setting is optional however, if it is not specified, this node will not be able to connect to nodes that
# only advertise an onion address.
#tcp_tor_socks_address = "/ip4/127.0.0.1/tcp/36050"
#tcp_tor_socks_auth = "none"

# Configures the node to run over a tor hidden service using the Tor proxy. This transport recognises ip/tcp,
# onion v2, onion v3 and dns addresses.
transport = "tor"

# Spin up and use a built-in Tor instance. This only works on macos/linux and you must comment out tor_control_address below.
# This requires that the wallet was built with the optional "libtor" feature flag.
#use_libtor = true

# Address of the tor control server
tor_control_address = "/ip4/127.0.0.1/tcp/9051"
# Authentication to use for the tor control server
#tor_control_auth = "none" # or "password=xxxxxx"
# The onion port to use.
#tor_onion_port = 18141
# The address to which traffic on the node's onion address will be forwarded
# tor_forward_address = "/ip4/127.0.0.1/tcp/0"
# Instead of attemping to get the SOCKS5 address from the tor control port, use this one. The default is to
# use the first address returned by the tor control port (GETINFO /net/listeners/socks).
#tor_socks_address_override=

# Use a SOCKS5 proxy transport. This transport recognises any addresses supported by the proxy.
#transport = "socks5"
# The address of the SOCKS5 proxy
#socks5_proxy_address = "/ip4/127.0.0.1/tcp/9050"
# The address to which traffic will be forwarded
#socks5_listener_address = "/ip4/127.0.0.1/tcp/18188"
#socks5_auth = "none" # or "username_password=username:xxxxxxx"

# Optionally bind an additional TCP socket for inbound Tari P2P protocol commms.
# Use cases include:
# - allowing wallets to locally connect to their base node, rather than through tor, when used in conjunction with `tor_proxy_bypass_addresses`
# - multiple P2P addresses, one public over DNS and one private over TOR
# - a "bridge" between TOR and TCP-only nodes
# auxilary_tcp_listener_address = "/ip4/127.0.0.1/tcp/9998"

# When these peer addresses are encountered when dialing another peer, the tor proxy is bypassed and the connection is made
# directly over TCP. /ip4, /ip6, /dns, /dns4 and /dns6 are supported.
# tor_proxy_bypass_addresses = ["/dns4/my-foo-base-node/tcp/9998"]
# When using the tor transport and set to true, outbound TCP connections bypass the tor proxy. Defaults to false for better privacy
# tor_proxy_bypass_for_outbound_tcp = false;

########################################################################################################################
#                                                                                                                      #
#                                                Miner Configuration Options                                           #
#                                                                                                                      #
########################################################################################################################

[miner]
# Number of mining threads
# Default: number of logical CPU cores
#num_mining_threads=8

# GRPC address of base node
# Default: value from `base_node.grpc_base_node_address`
#base_node_grpc_address = "127.0.0.1:18142"

# GRPC address of console wallet
# Default: value from `wallet.grpc_address`
#wallet_grpc_address = "127.0.0.1:18143"

# Start mining only when base node is bootstrapped
# and current block height is on the tip of network
# Default: true
#mine_on_tip_only=true

# Will check tip with node every N seconds and restart mining
# if height already taken and option `mine_on_tip_only` is set
# to true
# Default: 30 seconds
#validate_tip_timeout_sec=30

# Stratum Mode configuration
# mining_pool_address = "miningcore.tari.com:3052"
# mining_wallet_address = "YOUR_WALLET_PUBLIC_KEY"
# mining_worker_name = "worker1"

########################################################################################################################
#                                                                                                                      #
#                                             Merge Mining Configuration Options                                      #
#                                                                                                                      #
########################################################################################################################

[merge_mining_proxy]
#override_from = "esmeralda"
monerod_url = [ # stagenet
"http://stagenet.xmr-tw.org:38081",
"http://stagenet.community.xmr.to:38081",
"http://monero-stagenet.exan.tech:38081",
"http://xmr-lux.boldsuck.org:38081",
"http://singapore.node.xmr.pm:38081",
]
grpc_base_node_address = "/ip4/127.0.0.1/tcp/18142"
grpc_console_wallet_address = "/ip4/127.0.0.1/tcp/18143"

# Address of the tari_merge_mining_proxy application
proxy_host_address = "/ip4/127.0.0.1/tcp/18081"

# In sole merged mining, the block solution is usually submitted to the Monero blockchain
# (monerod) as well as to the Tari blockchain, then this setting should be "true". With pool
# merged mining, there is no sense in submitting the solution to the Monero blockchain as the
# pool does that, then this setting should be "false". (default = true).
proxy_submit_to_origin = true

# The merge mining proxy can either wait for the base node to achieve initial sync at startup before it enables mining,
# or not. If merge mining starts before the base node has achieved initial sync, those Tari mined blocks will not be
# accepted. (Default value = true; will wait for base node initial sync).
#wait_for_initial_sync_at_startup = true

# Monero auth params
monerod_username = ""
monerod_password = ""
monerod_use_auth = false

#[merge_mining_proxy.esmeralda]
# Put any network specific settings here



########################################################################################################################
#                                                                                                                      #
#                                             Stratum Transcoder Configuration Options                                 #
#                                                                                                                      #
########################################################################################################################

[stratum_transcoder]

# Address of the tari_stratum_transcoder application
transcoder_host_address = "127.0.0.1:7879"


########################################################################################################################
#                                                                                                                      #
#                                         Validator Node Configuration Options                                         #
#                                                                                                                      #
########################################################################################################################

[validator_node]

committee = ["2ea0df3059caf4411624d6bf5b9c02238d607d2798c586b3e6c2a054da3f205a"] # cannot be of zero size
phase_timeout = 30
template_id = "EditableMetadata"

# If set to false, there will be no scanning at all.
scan_for_assets = true
# How often do we want to scan the base layer for changes.
new_asset_scanning_interval = 10
# If set then only the specific assets will be checked.
# assets_allow_list = ["<pubkey>"]

########################################################################################################################
#                                                                                                                      #
#                                          Collectibles Configuration Options                                          #
#                                                                                                                      #
########################################################################################################################

[collectibles]
# GRPC address of validator node
#validator_node_grpc_address = 127.0.0.1:18144

# GRPC address of base node
#base_node_grpc_address = 127.0.0.1:18142

# GRPC address of wallet
#wallet_grpc_address = 127.0.0.1:18143
