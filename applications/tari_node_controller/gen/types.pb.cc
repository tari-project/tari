// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AggregateBody_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Block_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlockHeader_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewBlockHeaderTemplate_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputFeatures_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProofOfWork_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signature_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionInput_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionKernel_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionOutput_types_2eproto;
namespace tari {
namespace rpc {
class BlockHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockHeader> _instance;
} _BlockHeader_default_instance_;
class ProofOfWorkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProofOfWork> _instance;
} _ProofOfWork_default_instance_;
class PowAlgoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowAlgo> _instance;
} _PowAlgo_default_instance_;
class BlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Block> _instance;
} _Block_default_instance_;
class HistoricalBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HistoricalBlock> _instance;
} _HistoricalBlock_default_instance_;
class NewBlockHeaderTemplateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewBlockHeaderTemplate> _instance;
} _NewBlockHeaderTemplate_default_instance_;
class NewBlockTemplateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewBlockTemplate> _instance;
} _NewBlockTemplate_default_instance_;
class TransactionKernelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionKernel> _instance;
} _TransactionKernel_default_instance_;
class TransactionInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionInput> _instance;
} _TransactionInput_default_instance_;
class TransactionOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionOutput> _instance;
} _TransactionOutput_default_instance_;
class OutputFeaturesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputFeatures> _instance;
} _OutputFeatures_default_instance_;
class AggregateBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AggregateBody> _instance;
} _AggregateBody_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class SignatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Signature> _instance;
} _Signature_default_instance_;
class ConsensusConstantsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConsensusConstants> _instance;
} _ConsensusConstants_default_instance_;
}  // namespace rpc
}  // namespace tari
static void InitDefaultsscc_info_AggregateBody_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_AggregateBody_default_instance_;
    new (ptr) ::tari::rpc::AggregateBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::AggregateBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AggregateBody_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AggregateBody_types_2eproto}, {
      &scc_info_TransactionInput_types_2eproto.base,
      &scc_info_TransactionOutput_types_2eproto.base,
      &scc_info_TransactionKernel_types_2eproto.base,}};

static void InitDefaultsscc_info_Block_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_Block_default_instance_;
    new (ptr) ::tari::rpc::Block();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::Block::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Block_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Block_types_2eproto}, {
      &scc_info_BlockHeader_types_2eproto.base,
      &scc_info_AggregateBody_types_2eproto.base,}};

static void InitDefaultsscc_info_BlockHeader_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_BlockHeader_default_instance_;
    new (ptr) ::tari::rpc::BlockHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::BlockHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlockHeader_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlockHeader_types_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ProofOfWork_types_2eproto.base,}};

static void InitDefaultsscc_info_ConsensusConstants_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_ConsensusConstants_default_instance_;
    new (ptr) ::tari::rpc::ConsensusConstants();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::ConsensusConstants::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConsensusConstants_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConsensusConstants_types_2eproto}, {}};

static void InitDefaultsscc_info_HistoricalBlock_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_HistoricalBlock_default_instance_;
    new (ptr) ::tari::rpc::HistoricalBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::HistoricalBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistoricalBlock_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HistoricalBlock_types_2eproto}, {
      &scc_info_Block_types_2eproto.base,}};

static void InitDefaultsscc_info_NewBlockHeaderTemplate_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_NewBlockHeaderTemplate_default_instance_;
    new (ptr) ::tari::rpc::NewBlockHeaderTemplate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::NewBlockHeaderTemplate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewBlockHeaderTemplate_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NewBlockHeaderTemplate_types_2eproto}, {
      &scc_info_ProofOfWork_types_2eproto.base,}};

static void InitDefaultsscc_info_NewBlockTemplate_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_NewBlockTemplate_default_instance_;
    new (ptr) ::tari::rpc::NewBlockTemplate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::NewBlockTemplate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NewBlockTemplate_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NewBlockTemplate_types_2eproto}, {
      &scc_info_NewBlockHeaderTemplate_types_2eproto.base,
      &scc_info_AggregateBody_types_2eproto.base,}};

static void InitDefaultsscc_info_OutputFeatures_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_OutputFeatures_default_instance_;
    new (ptr) ::tari::rpc::OutputFeatures();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::OutputFeatures::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputFeatures_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OutputFeatures_types_2eproto}, {}};

static void InitDefaultsscc_info_PowAlgo_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_PowAlgo_default_instance_;
    new (ptr) ::tari::rpc::PowAlgo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::PowAlgo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowAlgo_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PowAlgo_types_2eproto}, {}};

static void InitDefaultsscc_info_ProofOfWork_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_ProofOfWork_default_instance_;
    new (ptr) ::tari::rpc::ProofOfWork();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::ProofOfWork::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProofOfWork_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProofOfWork_types_2eproto}, {}};

static void InitDefaultsscc_info_Signature_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_Signature_default_instance_;
    new (ptr) ::tari::rpc::Signature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::Signature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signature_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Signature_types_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_Transaction_default_instance_;
    new (ptr) ::tari::rpc::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::Transaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Transaction_types_2eproto}, {
      &scc_info_AggregateBody_types_2eproto.base,}};

static void InitDefaultsscc_info_TransactionInput_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_TransactionInput_default_instance_;
    new (ptr) ::tari::rpc::TransactionInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::TransactionInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionInput_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransactionInput_types_2eproto}, {
      &scc_info_OutputFeatures_types_2eproto.base,}};

static void InitDefaultsscc_info_TransactionKernel_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_TransactionKernel_default_instance_;
    new (ptr) ::tari::rpc::TransactionKernel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::TransactionKernel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionKernel_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransactionKernel_types_2eproto}, {
      &scc_info_Signature_types_2eproto.base,}};

static void InitDefaultsscc_info_TransactionOutput_types_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_TransactionOutput_default_instance_;
    new (ptr) ::tari::rpc::TransactionOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::TransactionOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionOutput_types_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransactionOutput_types_2eproto}, {
      &scc_info_OutputFeatures_types_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_types_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_types_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_types_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_types_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockHeader, hash_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockHeader, version_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockHeader, height_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockHeader, prev_hash_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockHeader, timestamp_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockHeader, output_mr_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockHeader, range_proof_mr_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockHeader, kernel_mr_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockHeader, total_kernel_offset_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockHeader, nonce_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockHeader, pow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ProofOfWork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ProofOfWork, pow_algo_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ProofOfWork, accumulated_monero_difficulty_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ProofOfWork, accumulated_blake_difficulty_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ProofOfWork, pow_data_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ProofOfWork, target_difficulty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::PowAlgo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::PowAlgo, pow_algo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::Block, header_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::Block, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::HistoricalBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::HistoricalBlock, confirmations_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::HistoricalBlock, spent_commitments_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::HistoricalBlock, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NewBlockHeaderTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NewBlockHeaderTemplate, version_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NewBlockHeaderTemplate, height_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NewBlockHeaderTemplate, prev_hash_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NewBlockHeaderTemplate, total_kernel_offset_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NewBlockHeaderTemplate, pow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NewBlockTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NewBlockTemplate, header_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NewBlockTemplate, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, features_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, fee_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, lock_height_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, meta_info_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, linked_kernel_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, excess_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionKernel, excess_sig_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, features_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionInput, commitment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, features_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, commitment_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TransactionOutput, range_proof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, flags_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::OutputFeatures, maturity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::AggregateBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::AggregateBody, inputs_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::AggregateBody, outputs_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::AggregateBody, kernels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::Transaction, offset_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::Transaction, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::Signature, public_nonce_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::Signature, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, coinbase_lock_height_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, blockchain_version_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, future_time_limit_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, difficulty_block_window_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, difficulty_max_block_interval_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, max_block_transaction_weight_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, pow_algo_count_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, median_timestamp_count_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, emission_initial_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, emission_decay_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, emission_tail_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, min_blake_pow_difficulty_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, block_weight_inputs_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, block_weight_outputs_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ConsensusConstants, block_weight_kernels_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tari::rpc::BlockHeader)},
  { 16, -1, sizeof(::tari::rpc::ProofOfWork)},
  { 26, -1, sizeof(::tari::rpc::PowAlgo)},
  { 32, -1, sizeof(::tari::rpc::Block)},
  { 39, -1, sizeof(::tari::rpc::HistoricalBlock)},
  { 47, -1, sizeof(::tari::rpc::NewBlockHeaderTemplate)},
  { 57, -1, sizeof(::tari::rpc::NewBlockTemplate)},
  { 64, -1, sizeof(::tari::rpc::TransactionKernel)},
  { 76, -1, sizeof(::tari::rpc::TransactionInput)},
  { 83, -1, sizeof(::tari::rpc::TransactionOutput)},
  { 91, -1, sizeof(::tari::rpc::OutputFeatures)},
  { 98, -1, sizeof(::tari::rpc::AggregateBody)},
  { 106, -1, sizeof(::tari::rpc::Transaction)},
  { 113, -1, sizeof(::tari::rpc::Signature)},
  { 120, -1, sizeof(::tari::rpc::ConsensusConstants)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_BlockHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_ProofOfWork_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_PowAlgo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_Block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_HistoricalBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_NewBlockHeaderTemplate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_NewBlockTemplate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_TransactionKernel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_TransactionInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_TransactionOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_OutputFeatures_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_AggregateBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_Signature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_ConsensusConstants_default_instance_),
};

const char descriptor_table_protodef_types_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013types.proto\022\010tari.rpc\032\037google/protobuf"
  "/timestamp.proto\"\214\002\n\013BlockHeader\022\014\n\004hash"
  "\030\001 \001(\014\022\017\n\007version\030\002 \001(\r\022\016\n\006height\030\003 \001(\004\022"
  "\021\n\tprev_hash\030\004 \001(\014\022-\n\ttimestamp\030\005 \001(\0132\032."
  "google.protobuf.Timestamp\022\021\n\toutput_mr\030\006"
  " \001(\014\022\026\n\016range_proof_mr\030\007 \001(\014\022\021\n\tkernel_m"
  "r\030\010 \001(\014\022\033\n\023total_kernel_offset\030\t \001(\014\022\r\n\005"
  "nonce\030\n \001(\004\022\"\n\003pow\030\013 \001(\0132\025.tari.rpc.Proo"
  "fOfWork\"\231\001\n\013ProofOfWork\022\020\n\010pow_algo\030\001 \001("
  "\004\022%\n\035accumulated_monero_difficulty\030\002 \001(\004"
  "\022$\n\034accumulated_blake_difficulty\030\003 \001(\004\022\020"
  "\n\010pow_data\030\004 \001(\014\022\031\n\021target_difficulty\030\005 "
  "\001(\004\"n\n\007PowAlgo\022,\n\010pow_algo\030\001 \001(\0162\032.tari."
  "rpc.PowAlgo.PowAlgos\"5\n\010PowAlgos\022\024\n\020POW_"
  "ALGOS_MONERO\020\000\022\023\n\017POW_ALGOS_BLAKE\020\001\"U\n\005B"
  "lock\022%\n\006header\030\001 \001(\0132\025.tari.rpc.BlockHea"
  "der\022%\n\004body\030\002 \001(\0132\027.tari.rpc.AggregateBo"
  "dy\"c\n\017HistoricalBlock\022\025\n\rconfirmations\030\001"
  " \001(\004\022\031\n\021spent_commitments\030\002 \003(\014\022\036\n\005block"
  "\030\003 \001(\0132\017.tari.rpc.Block\"\215\001\n\026NewBlockHead"
  "erTemplate\022\017\n\007version\030\001 \001(\r\022\016\n\006height\030\002 "
  "\001(\004\022\021\n\tprev_hash\030\003 \001(\014\022\033\n\023total_kernel_o"
  "ffset\030\004 \001(\014\022\"\n\003pow\030\005 \001(\0132\025.tari.rpc.Proo"
  "fOfWork\"k\n\020NewBlockTemplate\0220\n\006header\030\001 "
  "\001(\0132 .tari.rpc.NewBlockHeaderTemplate\022%\n"
  "\004body\030\002 \001(\0132\027.tari.rpc.AggregateBody\"\252\001\n"
  "\021TransactionKernel\022\020\n\010features\030\001 \001(\r\022\013\n\003"
  "fee\030\002 \001(\004\022\023\n\013lock_height\030\003 \001(\004\022\021\n\tmeta_i"
  "nfo\030\004 \001(\014\022\025\n\rlinked_kernel\030\005 \001(\014\022\016\n\006exce"
  "ss\030\006 \001(\014\022\'\n\nexcess_sig\030\007 \001(\0132\023.tari.rpc."
  "Signature\"R\n\020TransactionInput\022*\n\010feature"
  "s\030\001 \001(\0132\030.tari.rpc.OutputFeatures\022\022\n\ncom"
  "mitment\030\002 \001(\014\"h\n\021TransactionOutput\022*\n\010fe"
  "atures\030\001 \001(\0132\030.tari.rpc.OutputFeatures\022\022"
  "\n\ncommitment\030\002 \001(\014\022\023\n\013range_proof\030\003 \001(\014\""
  "1\n\016OutputFeatures\022\r\n\005flags\030\001 \001(\r\022\020\n\010matu"
  "rity\030\002 \001(\004\"\227\001\n\rAggregateBody\022*\n\006inputs\030\001"
  " \003(\0132\032.tari.rpc.TransactionInput\022,\n\007outp"
  "uts\030\002 \003(\0132\033.tari.rpc.TransactionOutput\022,"
  "\n\007kernels\030\003 \003(\0132\033.tari.rpc.TransactionKe"
  "rnel\"D\n\013Transaction\022\016\n\006offset\030\001 \001(\014\022%\n\004b"
  "ody\030\002 \001(\0132\027.tari.rpc.AggregateBody\"4\n\tSi"
  "gnature\022\024\n\014public_nonce\030\001 \001(\014\022\021\n\tsignatu"
  "re\030\002 \001(\014\"\323\003\n\022ConsensusConstants\022\034\n\024coinb"
  "ase_lock_height\030\001 \001(\004\022\032\n\022blockchain_vers"
  "ion\030\002 \001(\r\022\031\n\021future_time_limit\030\003 \001(\004\022\037\n\027"
  "difficulty_block_window\030\005 \001(\004\022%\n\035difficu"
  "lty_max_block_interval\030\006 \001(\004\022$\n\034max_bloc"
  "k_transaction_weight\030\007 \001(\004\022\026\n\016pow_algo_c"
  "ount\030\010 \001(\004\022\036\n\026median_timestamp_count\030\t \001"
  "(\004\022\030\n\020emission_initial\030\n \001(\004\022\026\n\016emission"
  "_decay\030\013 \001(\001\022\025\n\remission_tail\030\014 \001(\004\022 \n\030m"
  "in_blake_pow_difficulty\030\r \001(\004\022\033\n\023block_w"
  "eight_inputs\030\016 \001(\004\022\034\n\024block_weight_outpu"
  "ts\030\017 \001(\004\022\034\n\024block_weight_kernels\030\020 \001(\004b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_types_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_types_2eproto_sccs[15] = {
  &scc_info_AggregateBody_types_2eproto.base,
  &scc_info_Block_types_2eproto.base,
  &scc_info_BlockHeader_types_2eproto.base,
  &scc_info_ConsensusConstants_types_2eproto.base,
  &scc_info_HistoricalBlock_types_2eproto.base,
  &scc_info_NewBlockHeaderTemplate_types_2eproto.base,
  &scc_info_NewBlockTemplate_types_2eproto.base,
  &scc_info_OutputFeatures_types_2eproto.base,
  &scc_info_PowAlgo_types_2eproto.base,
  &scc_info_ProofOfWork_types_2eproto.base,
  &scc_info_Signature_types_2eproto.base,
  &scc_info_Transaction_types_2eproto.base,
  &scc_info_TransactionInput_types_2eproto.base,
  &scc_info_TransactionKernel_types_2eproto.base,
  &scc_info_TransactionOutput_types_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_types_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2eproto = {
  false, false, descriptor_table_protodef_types_2eproto, "types.proto", 2206,
  &descriptor_table_types_2eproto_once, descriptor_table_types_2eproto_sccs, descriptor_table_types_2eproto_deps, 15, 1,
  schemas, file_default_instances, TableStruct_types_2eproto::offsets,
  file_level_metadata_types_2eproto, 15, file_level_enum_descriptors_types_2eproto, file_level_service_descriptors_types_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_types_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_types_2eproto)), true);
namespace tari {
namespace rpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PowAlgo_PowAlgos_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_types_2eproto);
  return file_level_enum_descriptors_types_2eproto[0];
}
bool PowAlgo_PowAlgos_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PowAlgo_PowAlgos PowAlgo::POW_ALGOS_MONERO;
constexpr PowAlgo_PowAlgos PowAlgo::POW_ALGOS_BLAKE;
constexpr PowAlgo_PowAlgos PowAlgo::PowAlgos_MIN;
constexpr PowAlgo_PowAlgos PowAlgo::PowAlgos_MAX;
constexpr int PowAlgo::PowAlgos_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void BlockHeader::InitAsDefaultInstance() {
  ::tari::rpc::_BlockHeader_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::tari::rpc::_BlockHeader_default_instance_._instance.get_mutable()->pow_ = const_cast< ::tari::rpc::ProofOfWork*>(
      ::tari::rpc::ProofOfWork::internal_default_instance());
}
class BlockHeader::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const BlockHeader* msg);
  static const ::tari::rpc::ProofOfWork& pow(const BlockHeader* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
BlockHeader::_Internal::timestamp(const BlockHeader* msg) {
  return *msg->timestamp_;
}
const ::tari::rpc::ProofOfWork&
BlockHeader::_Internal::pow(const BlockHeader* msg) {
  return *msg->pow_;
}
void BlockHeader::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
BlockHeader::BlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.BlockHeader)
}
BlockHeader::BlockHeader(const BlockHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hash(),
      GetArena());
  }
  prev_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prev_hash().empty()) {
    prev_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev_hash(),
      GetArena());
  }
  output_mr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output_mr().empty()) {
    output_mr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_output_mr(),
      GetArena());
  }
  range_proof_mr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_range_proof_mr().empty()) {
    range_proof_mr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_range_proof_mr(),
      GetArena());
  }
  kernel_mr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kernel_mr().empty()) {
    kernel_mr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_kernel_mr(),
      GetArena());
  }
  total_kernel_offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_total_kernel_offset().empty()) {
    total_kernel_offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_total_kernel_offset(),
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_pow()) {
    pow_ = new ::tari::rpc::ProofOfWork(*from.pow_);
  } else {
    pow_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&height_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:tari.rpc.BlockHeader)
}

void BlockHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockHeader_types_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_mr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_proof_mr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernel_mr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_kernel_offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
}

BlockHeader::~BlockHeader() {
  // @@protoc_insertion_point(destructor:tari.rpc.BlockHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_mr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_proof_mr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kernel_mr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_kernel_offset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete pow_;
}

void BlockHeader::ArenaDtor(void* object) {
  BlockHeader* _this = reinterpret_cast< BlockHeader* >(object);
  (void)_this;
}
void BlockHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockHeader& BlockHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockHeader_types_2eproto.base);
  return *internal_default_instance();
}


void BlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_mr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  range_proof_mr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernel_mr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  total_kernel_offset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArena() == nullptr && pow_ != nullptr) {
    delete pow_;
  }
  pow_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&height_)) + sizeof(version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes prev_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_prev_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes output_mr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_output_mr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes range_proof_mr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_range_proof_mr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes kernel_mr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_kernel_mr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes total_kernel_offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_total_kernel_offset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nonce = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tari.rpc.ProofOfWork pow = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_pow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_version(), target);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  // bytes prev_hash = 4;
  if (this->prev_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_prev_hash(), target);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timestamp(this), target, stream);
  }

  // bytes output_mr = 6;
  if (this->output_mr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_output_mr(), target);
  }

  // bytes range_proof_mr = 7;
  if (this->range_proof_mr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_range_proof_mr(), target);
  }

  // bytes kernel_mr = 8;
  if (this->kernel_mr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_kernel_mr(), target);
  }

  // bytes total_kernel_offset = 9;
  if (this->total_kernel_offset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_total_kernel_offset(), target);
  }

  // uint64 nonce = 10;
  if (this->nonce() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_nonce(), target);
  }

  // .tari.rpc.ProofOfWork pow = 11;
  if (this->has_pow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::pow(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.BlockHeader)
  return target;
}

size_t BlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.BlockHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // bytes prev_hash = 4;
  if (this->prev_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prev_hash());
  }

  // bytes output_mr = 6;
  if (this->output_mr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_output_mr());
  }

  // bytes range_proof_mr = 7;
  if (this->range_proof_mr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_range_proof_mr());
  }

  // bytes kernel_mr = 8;
  if (this->kernel_mr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_kernel_mr());
  }

  // bytes total_kernel_offset = 9;
  if (this->total_kernel_offset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_total_kernel_offset());
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .tari.rpc.ProofOfWork pow = 11;
  if (this->has_pow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pow_);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // uint64 nonce = 10;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_nonce());
  }

  // uint32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.BlockHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.BlockHeader)
    MergeFrom(*source);
  }
}

void BlockHeader::MergeFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {
    _internal_set_hash(from._internal_hash());
  }
  if (from.prev_hash().size() > 0) {
    _internal_set_prev_hash(from._internal_prev_hash());
  }
  if (from.output_mr().size() > 0) {
    _internal_set_output_mr(from._internal_output_mr());
  }
  if (from.range_proof_mr().size() > 0) {
    _internal_set_range_proof_mr(from._internal_range_proof_mr());
  }
  if (from.kernel_mr().size() > 0) {
    _internal_set_kernel_mr(from._internal_kernel_mr());
  }
  if (from.total_kernel_offset().size() > 0) {
    _internal_set_total_kernel_offset(from._internal_total_kernel_offset());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.has_pow()) {
    _internal_mutable_pow()->::tari::rpc::ProofOfWork::MergeFrom(from._internal_pow());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.nonce() != 0) {
    _internal_set_nonce(from._internal_nonce());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void BlockHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {
  return true;
}

void BlockHeader::InternalSwap(BlockHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  prev_hash_.Swap(&other->prev_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  output_mr_.Swap(&other->output_mr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  range_proof_mr_.Swap(&other->range_proof_mr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  kernel_mr_.Swap(&other->kernel_mr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  total_kernel_offset_.Swap(&other->total_kernel_offset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockHeader, version_)
      + sizeof(BlockHeader::version_)
      - PROTOBUF_FIELD_OFFSET(BlockHeader, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProofOfWork::InitAsDefaultInstance() {
}
class ProofOfWork::_Internal {
 public:
};

ProofOfWork::ProofOfWork(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.ProofOfWork)
}
ProofOfWork::ProofOfWork(const ProofOfWork& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pow_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pow_data().empty()) {
    pow_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pow_data(),
      GetArena());
  }
  ::memcpy(&pow_algo_, &from.pow_algo_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_difficulty_) -
    reinterpret_cast<char*>(&pow_algo_)) + sizeof(target_difficulty_));
  // @@protoc_insertion_point(copy_constructor:tari.rpc.ProofOfWork)
}

void ProofOfWork::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProofOfWork_types_2eproto.base);
  pow_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pow_algo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_difficulty_) -
      reinterpret_cast<char*>(&pow_algo_)) + sizeof(target_difficulty_));
}

ProofOfWork::~ProofOfWork() {
  // @@protoc_insertion_point(destructor:tari.rpc.ProofOfWork)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProofOfWork::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pow_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProofOfWork::ArenaDtor(void* object) {
  ProofOfWork* _this = reinterpret_cast< ProofOfWork* >(object);
  (void)_this;
}
void ProofOfWork::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProofOfWork::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProofOfWork& ProofOfWork::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProofOfWork_types_2eproto.base);
  return *internal_default_instance();
}


void ProofOfWork::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.ProofOfWork)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pow_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&pow_algo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_difficulty_) -
      reinterpret_cast<char*>(&pow_algo_)) + sizeof(target_difficulty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProofOfWork::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pow_algo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pow_algo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 accumulated_monero_difficulty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accumulated_monero_difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 accumulated_blake_difficulty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          accumulated_blake_difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pow_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pow_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 target_difficulty = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          target_difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProofOfWork::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.ProofOfWork)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pow_algo = 1;
  if (this->pow_algo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pow_algo(), target);
  }

  // uint64 accumulated_monero_difficulty = 2;
  if (this->accumulated_monero_difficulty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_accumulated_monero_difficulty(), target);
  }

  // uint64 accumulated_blake_difficulty = 3;
  if (this->accumulated_blake_difficulty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_accumulated_blake_difficulty(), target);
  }

  // bytes pow_data = 4;
  if (this->pow_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pow_data(), target);
  }

  // uint64 target_difficulty = 5;
  if (this->target_difficulty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_target_difficulty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.ProofOfWork)
  return target;
}

size_t ProofOfWork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.ProofOfWork)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pow_data = 4;
  if (this->pow_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pow_data());
  }

  // uint64 pow_algo = 1;
  if (this->pow_algo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pow_algo());
  }

  // uint64 accumulated_monero_difficulty = 2;
  if (this->accumulated_monero_difficulty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accumulated_monero_difficulty());
  }

  // uint64 accumulated_blake_difficulty = 3;
  if (this->accumulated_blake_difficulty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accumulated_blake_difficulty());
  }

  // uint64 target_difficulty = 5;
  if (this->target_difficulty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_difficulty());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProofOfWork::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.ProofOfWork)
  GOOGLE_DCHECK_NE(&from, this);
  const ProofOfWork* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProofOfWork>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.ProofOfWork)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.ProofOfWork)
    MergeFrom(*source);
  }
}

void ProofOfWork::MergeFrom(const ProofOfWork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.ProofOfWork)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pow_data().size() > 0) {
    _internal_set_pow_data(from._internal_pow_data());
  }
  if (from.pow_algo() != 0) {
    _internal_set_pow_algo(from._internal_pow_algo());
  }
  if (from.accumulated_monero_difficulty() != 0) {
    _internal_set_accumulated_monero_difficulty(from._internal_accumulated_monero_difficulty());
  }
  if (from.accumulated_blake_difficulty() != 0) {
    _internal_set_accumulated_blake_difficulty(from._internal_accumulated_blake_difficulty());
  }
  if (from.target_difficulty() != 0) {
    _internal_set_target_difficulty(from._internal_target_difficulty());
  }
}

void ProofOfWork::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.ProofOfWork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProofOfWork::CopyFrom(const ProofOfWork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.ProofOfWork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProofOfWork::IsInitialized() const {
  return true;
}

void ProofOfWork::InternalSwap(ProofOfWork* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pow_data_.Swap(&other->pow_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProofOfWork, target_difficulty_)
      + sizeof(ProofOfWork::target_difficulty_)
      - PROTOBUF_FIELD_OFFSET(ProofOfWork, pow_algo_)>(
          reinterpret_cast<char*>(&pow_algo_),
          reinterpret_cast<char*>(&other->pow_algo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProofOfWork::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PowAlgo::InitAsDefaultInstance() {
}
class PowAlgo::_Internal {
 public:
};

PowAlgo::PowAlgo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.PowAlgo)
}
PowAlgo::PowAlgo(const PowAlgo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pow_algo_ = from.pow_algo_;
  // @@protoc_insertion_point(copy_constructor:tari.rpc.PowAlgo)
}

void PowAlgo::SharedCtor() {
  pow_algo_ = 0;
}

PowAlgo::~PowAlgo() {
  // @@protoc_insertion_point(destructor:tari.rpc.PowAlgo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PowAlgo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PowAlgo::ArenaDtor(void* object) {
  PowAlgo* _this = reinterpret_cast< PowAlgo* >(object);
  (void)_this;
}
void PowAlgo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PowAlgo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowAlgo& PowAlgo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowAlgo_types_2eproto.base);
  return *internal_default_instance();
}


void PowAlgo::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.PowAlgo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pow_algo_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PowAlgo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tari.rpc.PowAlgo.PowAlgos pow_algo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pow_algo(static_cast<::tari::rpc::PowAlgo_PowAlgos>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PowAlgo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.PowAlgo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tari.rpc.PowAlgo.PowAlgos pow_algo = 1;
  if (this->pow_algo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_pow_algo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.PowAlgo)
  return target;
}

size_t PowAlgo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.PowAlgo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tari.rpc.PowAlgo.PowAlgos pow_algo = 1;
  if (this->pow_algo() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pow_algo());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowAlgo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.PowAlgo)
  GOOGLE_DCHECK_NE(&from, this);
  const PowAlgo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowAlgo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.PowAlgo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.PowAlgo)
    MergeFrom(*source);
  }
}

void PowAlgo::MergeFrom(const PowAlgo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.PowAlgo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pow_algo() != 0) {
    _internal_set_pow_algo(from._internal_pow_algo());
  }
}

void PowAlgo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.PowAlgo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowAlgo::CopyFrom(const PowAlgo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.PowAlgo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowAlgo::IsInitialized() const {
  return true;
}

void PowAlgo::InternalSwap(PowAlgo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(pow_algo_, other->pow_algo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PowAlgo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Block::InitAsDefaultInstance() {
  ::tari::rpc::_Block_default_instance_._instance.get_mutable()->header_ = const_cast< ::tari::rpc::BlockHeader*>(
      ::tari::rpc::BlockHeader::internal_default_instance());
  ::tari::rpc::_Block_default_instance_._instance.get_mutable()->body_ = const_cast< ::tari::rpc::AggregateBody*>(
      ::tari::rpc::AggregateBody::internal_default_instance());
}
class Block::_Internal {
 public:
  static const ::tari::rpc::BlockHeader& header(const Block* msg);
  static const ::tari::rpc::AggregateBody& body(const Block* msg);
};

const ::tari::rpc::BlockHeader&
Block::_Internal::header(const Block* msg) {
  return *msg->header_;
}
const ::tari::rpc::AggregateBody&
Block::_Internal::body(const Block* msg) {
  return *msg->body_;
}
Block::Block(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::tari::rpc::BlockHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_body()) {
    body_ = new ::tari::rpc::AggregateBody(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tari.rpc.Block)
}

void Block::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Block_types_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&body_) -
      reinterpret_cast<char*>(&header_)) + sizeof(body_));
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:tari.rpc.Block)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Block::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete body_;
}

void Block::ArenaDtor(void* object) {
  Block* _this = reinterpret_cast< Block* >(object);
  (void)_this;
}
void Block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Block& Block::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Block_types_2eproto.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tari.rpc.BlockHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tari.rpc.AggregateBody body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tari.rpc.BlockHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .tari.rpc.AggregateBody body = 2;
  if (this->has_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.Block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tari.rpc.BlockHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .tari.rpc.AggregateBody body = 2;
  if (this->has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Block>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.Block)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::tari::rpc::BlockHeader::MergeFrom(from._internal_header());
  }
  if (from.has_body()) {
    _internal_mutable_body()->::tari::rpc::AggregateBody::MergeFrom(from._internal_body());
  }
}

void Block::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Block, body_)
      + sizeof(Block::body_)
      - PROTOBUF_FIELD_OFFSET(Block, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HistoricalBlock::InitAsDefaultInstance() {
  ::tari::rpc::_HistoricalBlock_default_instance_._instance.get_mutable()->block_ = const_cast< ::tari::rpc::Block*>(
      ::tari::rpc::Block::internal_default_instance());
}
class HistoricalBlock::_Internal {
 public:
  static const ::tari::rpc::Block& block(const HistoricalBlock* msg);
};

const ::tari::rpc::Block&
HistoricalBlock::_Internal::block(const HistoricalBlock* msg) {
  return *msg->block_;
}
HistoricalBlock::HistoricalBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  spent_commitments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.HistoricalBlock)
}
HistoricalBlock::HistoricalBlock(const HistoricalBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      spent_commitments_(from.spent_commitments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_block()) {
    block_ = new ::tari::rpc::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  confirmations_ = from.confirmations_;
  // @@protoc_insertion_point(copy_constructor:tari.rpc.HistoricalBlock)
}

void HistoricalBlock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HistoricalBlock_types_2eproto.base);
  ::memset(&block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confirmations_) -
      reinterpret_cast<char*>(&block_)) + sizeof(confirmations_));
}

HistoricalBlock::~HistoricalBlock() {
  // @@protoc_insertion_point(destructor:tari.rpc.HistoricalBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HistoricalBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete block_;
}

void HistoricalBlock::ArenaDtor(void* object) {
  HistoricalBlock* _this = reinterpret_cast< HistoricalBlock* >(object);
  (void)_this;
}
void HistoricalBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistoricalBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HistoricalBlock& HistoricalBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HistoricalBlock_types_2eproto.base);
  return *internal_default_instance();
}


void HistoricalBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.HistoricalBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spent_commitments_.Clear();
  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  confirmations_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistoricalBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 confirmations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confirmations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes spent_commitments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_spent_commitments();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .tari.rpc.Block block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HistoricalBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.HistoricalBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 confirmations = 1;
  if (this->confirmations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_confirmations(), target);
  }

  // repeated bytes spent_commitments = 2;
  for (int i = 0, n = this->_internal_spent_commitments_size(); i < n; i++) {
    const auto& s = this->_internal_spent_commitments(i);
    target = stream->WriteBytes(2, s, target);
  }

  // .tari.rpc.Block block = 3;
  if (this->has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::block(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.HistoricalBlock)
  return target;
}

size_t HistoricalBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.HistoricalBlock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes spent_commitments = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(spent_commitments_.size());
  for (int i = 0, n = spent_commitments_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      spent_commitments_.Get(i));
  }

  // .tari.rpc.Block block = 3;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // uint64 confirmations = 1;
  if (this->confirmations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_confirmations());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HistoricalBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.HistoricalBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const HistoricalBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HistoricalBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.HistoricalBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.HistoricalBlock)
    MergeFrom(*source);
  }
}

void HistoricalBlock::MergeFrom(const HistoricalBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.HistoricalBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spent_commitments_.MergeFrom(from.spent_commitments_);
  if (from.has_block()) {
    _internal_mutable_block()->::tari::rpc::Block::MergeFrom(from._internal_block());
  }
  if (from.confirmations() != 0) {
    _internal_set_confirmations(from._internal_confirmations());
  }
}

void HistoricalBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.HistoricalBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoricalBlock::CopyFrom(const HistoricalBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.HistoricalBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoricalBlock::IsInitialized() const {
  return true;
}

void HistoricalBlock::InternalSwap(HistoricalBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  spent_commitments_.InternalSwap(&other->spent_commitments_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistoricalBlock, confirmations_)
      + sizeof(HistoricalBlock::confirmations_)
      - PROTOBUF_FIELD_OFFSET(HistoricalBlock, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistoricalBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewBlockHeaderTemplate::InitAsDefaultInstance() {
  ::tari::rpc::_NewBlockHeaderTemplate_default_instance_._instance.get_mutable()->pow_ = const_cast< ::tari::rpc::ProofOfWork*>(
      ::tari::rpc::ProofOfWork::internal_default_instance());
}
class NewBlockHeaderTemplate::_Internal {
 public:
  static const ::tari::rpc::ProofOfWork& pow(const NewBlockHeaderTemplate* msg);
};

const ::tari::rpc::ProofOfWork&
NewBlockHeaderTemplate::_Internal::pow(const NewBlockHeaderTemplate* msg) {
  return *msg->pow_;
}
NewBlockHeaderTemplate::NewBlockHeaderTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.NewBlockHeaderTemplate)
}
NewBlockHeaderTemplate::NewBlockHeaderTemplate(const NewBlockHeaderTemplate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prev_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_prev_hash().empty()) {
    prev_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prev_hash(),
      GetArena());
  }
  total_kernel_offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_total_kernel_offset().empty()) {
    total_kernel_offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_total_kernel_offset(),
      GetArena());
  }
  if (from._internal_has_pow()) {
    pow_ = new ::tari::rpc::ProofOfWork(*from.pow_);
  } else {
    pow_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&height_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:tari.rpc.NewBlockHeaderTemplate)
}

void NewBlockHeaderTemplate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewBlockHeaderTemplate_types_2eproto.base);
  prev_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_kernel_offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&pow_)) + sizeof(version_));
}

NewBlockHeaderTemplate::~NewBlockHeaderTemplate() {
  // @@protoc_insertion_point(destructor:tari.rpc.NewBlockHeaderTemplate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewBlockHeaderTemplate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prev_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_kernel_offset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pow_;
}

void NewBlockHeaderTemplate::ArenaDtor(void* object) {
  NewBlockHeaderTemplate* _this = reinterpret_cast< NewBlockHeaderTemplate* >(object);
  (void)_this;
}
void NewBlockHeaderTemplate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewBlockHeaderTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewBlockHeaderTemplate& NewBlockHeaderTemplate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewBlockHeaderTemplate_types_2eproto.base);
  return *internal_default_instance();
}


void NewBlockHeaderTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.NewBlockHeaderTemplate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prev_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  total_kernel_offset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && pow_ != nullptr) {
    delete pow_;
  }
  pow_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&height_)) + sizeof(version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewBlockHeaderTemplate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes prev_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_prev_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes total_kernel_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_total_kernel_offset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tari.rpc.ProofOfWork pow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewBlockHeaderTemplate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.NewBlockHeaderTemplate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // uint64 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  // bytes prev_hash = 3;
  if (this->prev_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_prev_hash(), target);
  }

  // bytes total_kernel_offset = 4;
  if (this->total_kernel_offset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_total_kernel_offset(), target);
  }

  // .tari.rpc.ProofOfWork pow = 5;
  if (this->has_pow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pow(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.NewBlockHeaderTemplate)
  return target;
}

size_t NewBlockHeaderTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.NewBlockHeaderTemplate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes prev_hash = 3;
  if (this->prev_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prev_hash());
  }

  // bytes total_kernel_offset = 4;
  if (this->total_kernel_offset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_total_kernel_offset());
  }

  // .tari.rpc.ProofOfWork pow = 5;
  if (this->has_pow()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pow_);
  }

  // uint64 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewBlockHeaderTemplate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.NewBlockHeaderTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const NewBlockHeaderTemplate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewBlockHeaderTemplate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.NewBlockHeaderTemplate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.NewBlockHeaderTemplate)
    MergeFrom(*source);
  }
}

void NewBlockHeaderTemplate::MergeFrom(const NewBlockHeaderTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.NewBlockHeaderTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prev_hash().size() > 0) {
    _internal_set_prev_hash(from._internal_prev_hash());
  }
  if (from.total_kernel_offset().size() > 0) {
    _internal_set_total_kernel_offset(from._internal_total_kernel_offset());
  }
  if (from.has_pow()) {
    _internal_mutable_pow()->::tari::rpc::ProofOfWork::MergeFrom(from._internal_pow());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void NewBlockHeaderTemplate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.NewBlockHeaderTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewBlockHeaderTemplate::CopyFrom(const NewBlockHeaderTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.NewBlockHeaderTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewBlockHeaderTemplate::IsInitialized() const {
  return true;
}

void NewBlockHeaderTemplate::InternalSwap(NewBlockHeaderTemplate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  prev_hash_.Swap(&other->prev_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  total_kernel_offset_.Swap(&other->total_kernel_offset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewBlockHeaderTemplate, version_)
      + sizeof(NewBlockHeaderTemplate::version_)
      - PROTOBUF_FIELD_OFFSET(NewBlockHeaderTemplate, pow_)>(
          reinterpret_cast<char*>(&pow_),
          reinterpret_cast<char*>(&other->pow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewBlockHeaderTemplate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewBlockTemplate::InitAsDefaultInstance() {
  ::tari::rpc::_NewBlockTemplate_default_instance_._instance.get_mutable()->header_ = const_cast< ::tari::rpc::NewBlockHeaderTemplate*>(
      ::tari::rpc::NewBlockHeaderTemplate::internal_default_instance());
  ::tari::rpc::_NewBlockTemplate_default_instance_._instance.get_mutable()->body_ = const_cast< ::tari::rpc::AggregateBody*>(
      ::tari::rpc::AggregateBody::internal_default_instance());
}
class NewBlockTemplate::_Internal {
 public:
  static const ::tari::rpc::NewBlockHeaderTemplate& header(const NewBlockTemplate* msg);
  static const ::tari::rpc::AggregateBody& body(const NewBlockTemplate* msg);
};

const ::tari::rpc::NewBlockHeaderTemplate&
NewBlockTemplate::_Internal::header(const NewBlockTemplate* msg) {
  return *msg->header_;
}
const ::tari::rpc::AggregateBody&
NewBlockTemplate::_Internal::body(const NewBlockTemplate* msg) {
  return *msg->body_;
}
NewBlockTemplate::NewBlockTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.NewBlockTemplate)
}
NewBlockTemplate::NewBlockTemplate(const NewBlockTemplate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::tari::rpc::NewBlockHeaderTemplate(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_body()) {
    body_ = new ::tari::rpc::AggregateBody(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tari.rpc.NewBlockTemplate)
}

void NewBlockTemplate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewBlockTemplate_types_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&body_) -
      reinterpret_cast<char*>(&header_)) + sizeof(body_));
}

NewBlockTemplate::~NewBlockTemplate() {
  // @@protoc_insertion_point(destructor:tari.rpc.NewBlockTemplate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewBlockTemplate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete body_;
}

void NewBlockTemplate::ArenaDtor(void* object) {
  NewBlockTemplate* _this = reinterpret_cast< NewBlockTemplate* >(object);
  (void)_this;
}
void NewBlockTemplate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewBlockTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewBlockTemplate& NewBlockTemplate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewBlockTemplate_types_2eproto.base);
  return *internal_default_instance();
}


void NewBlockTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.NewBlockTemplate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewBlockTemplate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tari.rpc.NewBlockHeaderTemplate header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tari.rpc.AggregateBody body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewBlockTemplate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.NewBlockTemplate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tari.rpc.NewBlockHeaderTemplate header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .tari.rpc.AggregateBody body = 2;
  if (this->has_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.NewBlockTemplate)
  return target;
}

size_t NewBlockTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.NewBlockTemplate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tari.rpc.NewBlockHeaderTemplate header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .tari.rpc.AggregateBody body = 2;
  if (this->has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewBlockTemplate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.NewBlockTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const NewBlockTemplate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewBlockTemplate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.NewBlockTemplate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.NewBlockTemplate)
    MergeFrom(*source);
  }
}

void NewBlockTemplate::MergeFrom(const NewBlockTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.NewBlockTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::tari::rpc::NewBlockHeaderTemplate::MergeFrom(from._internal_header());
  }
  if (from.has_body()) {
    _internal_mutable_body()->::tari::rpc::AggregateBody::MergeFrom(from._internal_body());
  }
}

void NewBlockTemplate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.NewBlockTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewBlockTemplate::CopyFrom(const NewBlockTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.NewBlockTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewBlockTemplate::IsInitialized() const {
  return true;
}

void NewBlockTemplate::InternalSwap(NewBlockTemplate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewBlockTemplate, body_)
      + sizeof(NewBlockTemplate::body_)
      - PROTOBUF_FIELD_OFFSET(NewBlockTemplate, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewBlockTemplate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionKernel::InitAsDefaultInstance() {
  ::tari::rpc::_TransactionKernel_default_instance_._instance.get_mutable()->excess_sig_ = const_cast< ::tari::rpc::Signature*>(
      ::tari::rpc::Signature::internal_default_instance());
}
class TransactionKernel::_Internal {
 public:
  static const ::tari::rpc::Signature& excess_sig(const TransactionKernel* msg);
};

const ::tari::rpc::Signature&
TransactionKernel::_Internal::excess_sig(const TransactionKernel* msg) {
  return *msg->excess_sig_;
}
TransactionKernel::TransactionKernel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.TransactionKernel)
}
TransactionKernel::TransactionKernel(const TransactionKernel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  meta_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_meta_info().empty()) {
    meta_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_meta_info(),
      GetArena());
  }
  linked_kernel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_linked_kernel().empty()) {
    linked_kernel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_linked_kernel(),
      GetArena());
  }
  excess_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_excess().empty()) {
    excess_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_excess(),
      GetArena());
  }
  if (from._internal_has_excess_sig()) {
    excess_sig_ = new ::tari::rpc::Signature(*from.excess_sig_);
  } else {
    excess_sig_ = nullptr;
  }
  ::memcpy(&fee_, &from.fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&features_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(features_));
  // @@protoc_insertion_point(copy_constructor:tari.rpc.TransactionKernel)
}

void TransactionKernel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionKernel_types_2eproto.base);
  meta_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  linked_kernel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  excess_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&excess_sig_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&features_) -
      reinterpret_cast<char*>(&excess_sig_)) + sizeof(features_));
}

TransactionKernel::~TransactionKernel() {
  // @@protoc_insertion_point(destructor:tari.rpc.TransactionKernel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionKernel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  meta_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  linked_kernel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  excess_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete excess_sig_;
}

void TransactionKernel::ArenaDtor(void* object) {
  TransactionKernel* _this = reinterpret_cast< TransactionKernel* >(object);
  (void)_this;
}
void TransactionKernel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionKernel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionKernel& TransactionKernel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionKernel_types_2eproto.base);
  return *internal_default_instance();
}


void TransactionKernel::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.TransactionKernel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  meta_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  linked_kernel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  excess_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && excess_sig_ != nullptr) {
    delete excess_sig_;
  }
  excess_sig_ = nullptr;
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&features_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(features_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionKernel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 lock_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lock_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes meta_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_meta_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes linked_kernel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_linked_kernel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes excess = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_excess();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tari.rpc.Signature excess_sig = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_excess_sig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionKernel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.TransactionKernel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 features = 1;
  if (this->features() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_features(), target);
  }

  // uint64 fee = 2;
  if (this->fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_fee(), target);
  }

  // uint64 lock_height = 3;
  if (this->lock_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lock_height(), target);
  }

  // bytes meta_info = 4;
  if (this->meta_info().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_meta_info(), target);
  }

  // bytes linked_kernel = 5;
  if (this->linked_kernel().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_linked_kernel(), target);
  }

  // bytes excess = 6;
  if (this->excess().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_excess(), target);
  }

  // .tari.rpc.Signature excess_sig = 7;
  if (this->has_excess_sig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::excess_sig(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.TransactionKernel)
  return target;
}

size_t TransactionKernel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.TransactionKernel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes meta_info = 4;
  if (this->meta_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_meta_info());
  }

  // bytes linked_kernel = 5;
  if (this->linked_kernel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_linked_kernel());
  }

  // bytes excess = 6;
  if (this->excess().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_excess());
  }

  // .tari.rpc.Signature excess_sig = 7;
  if (this->has_excess_sig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *excess_sig_);
  }

  // uint64 fee = 2;
  if (this->fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fee());
  }

  // uint64 lock_height = 3;
  if (this->lock_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lock_height());
  }

  // uint32 features = 1;
  if (this->features() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_features());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionKernel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.TransactionKernel)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionKernel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionKernel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.TransactionKernel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.TransactionKernel)
    MergeFrom(*source);
  }
}

void TransactionKernel::MergeFrom(const TransactionKernel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.TransactionKernel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.meta_info().size() > 0) {
    _internal_set_meta_info(from._internal_meta_info());
  }
  if (from.linked_kernel().size() > 0) {
    _internal_set_linked_kernel(from._internal_linked_kernel());
  }
  if (from.excess().size() > 0) {
    _internal_set_excess(from._internal_excess());
  }
  if (from.has_excess_sig()) {
    _internal_mutable_excess_sig()->::tari::rpc::Signature::MergeFrom(from._internal_excess_sig());
  }
  if (from.fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.lock_height() != 0) {
    _internal_set_lock_height(from._internal_lock_height());
  }
  if (from.features() != 0) {
    _internal_set_features(from._internal_features());
  }
}

void TransactionKernel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.TransactionKernel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionKernel::CopyFrom(const TransactionKernel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.TransactionKernel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionKernel::IsInitialized() const {
  return true;
}

void TransactionKernel::InternalSwap(TransactionKernel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  meta_info_.Swap(&other->meta_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  linked_kernel_.Swap(&other->linked_kernel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  excess_.Swap(&other->excess_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionKernel, features_)
      + sizeof(TransactionKernel::features_)
      - PROTOBUF_FIELD_OFFSET(TransactionKernel, excess_sig_)>(
          reinterpret_cast<char*>(&excess_sig_),
          reinterpret_cast<char*>(&other->excess_sig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionKernel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionInput::InitAsDefaultInstance() {
  ::tari::rpc::_TransactionInput_default_instance_._instance.get_mutable()->features_ = const_cast< ::tari::rpc::OutputFeatures*>(
      ::tari::rpc::OutputFeatures::internal_default_instance());
}
class TransactionInput::_Internal {
 public:
  static const ::tari::rpc::OutputFeatures& features(const TransactionInput* msg);
};

const ::tari::rpc::OutputFeatures&
TransactionInput::_Internal::features(const TransactionInput* msg) {
  return *msg->features_;
}
TransactionInput::TransactionInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.TransactionInput)
}
TransactionInput::TransactionInput(const TransactionInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_commitment().empty()) {
    commitment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_commitment(),
      GetArena());
  }
  if (from._internal_has_features()) {
    features_ = new ::tari::rpc::OutputFeatures(*from.features_);
  } else {
    features_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tari.rpc.TransactionInput)
}

void TransactionInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionInput_types_2eproto.base);
  commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  features_ = nullptr;
}

TransactionInput::~TransactionInput() {
  // @@protoc_insertion_point(destructor:tari.rpc.TransactionInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  commitment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete features_;
}

void TransactionInput::ArenaDtor(void* object) {
  TransactionInput* _this = reinterpret_cast< TransactionInput* >(object);
  (void)_this;
}
void TransactionInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionInput& TransactionInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionInput_types_2eproto.base);
  return *internal_default_instance();
}


void TransactionInput::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.TransactionInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commitment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && features_ != nullptr) {
    delete features_;
  }
  features_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tari.rpc.OutputFeatures features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_features(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes commitment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_commitment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.TransactionInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tari.rpc.OutputFeatures features = 1;
  if (this->has_features()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::features(this), target, stream);
  }

  // bytes commitment = 2;
  if (this->commitment().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_commitment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.TransactionInput)
  return target;
}

size_t TransactionInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.TransactionInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes commitment = 2;
  if (this->commitment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_commitment());
  }

  // .tari.rpc.OutputFeatures features = 1;
  if (this->has_features()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *features_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.TransactionInput)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.TransactionInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.TransactionInput)
    MergeFrom(*source);
  }
}

void TransactionInput::MergeFrom(const TransactionInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.TransactionInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.commitment().size() > 0) {
    _internal_set_commitment(from._internal_commitment());
  }
  if (from.has_features()) {
    _internal_mutable_features()->::tari::rpc::OutputFeatures::MergeFrom(from._internal_features());
  }
}

void TransactionInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.TransactionInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionInput::CopyFrom(const TransactionInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.TransactionInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInput::IsInitialized() const {
  return true;
}

void TransactionInput::InternalSwap(TransactionInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  commitment_.Swap(&other->commitment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(features_, other->features_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionOutput::InitAsDefaultInstance() {
  ::tari::rpc::_TransactionOutput_default_instance_._instance.get_mutable()->features_ = const_cast< ::tari::rpc::OutputFeatures*>(
      ::tari::rpc::OutputFeatures::internal_default_instance());
}
class TransactionOutput::_Internal {
 public:
  static const ::tari::rpc::OutputFeatures& features(const TransactionOutput* msg);
};

const ::tari::rpc::OutputFeatures&
TransactionOutput::_Internal::features(const TransactionOutput* msg) {
  return *msg->features_;
}
TransactionOutput::TransactionOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.TransactionOutput)
}
TransactionOutput::TransactionOutput(const TransactionOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_commitment().empty()) {
    commitment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_commitment(),
      GetArena());
  }
  range_proof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_range_proof().empty()) {
    range_proof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_range_proof(),
      GetArena());
  }
  if (from._internal_has_features()) {
    features_ = new ::tari::rpc::OutputFeatures(*from.features_);
  } else {
    features_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tari.rpc.TransactionOutput)
}

void TransactionOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionOutput_types_2eproto.base);
  commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_proof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  features_ = nullptr;
}

TransactionOutput::~TransactionOutput() {
  // @@protoc_insertion_point(destructor:tari.rpc.TransactionOutput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransactionOutput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  commitment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  range_proof_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete features_;
}

void TransactionOutput::ArenaDtor(void* object) {
  TransactionOutput* _this = reinterpret_cast< TransactionOutput* >(object);
  (void)_this;
}
void TransactionOutput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionOutput& TransactionOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionOutput_types_2eproto.base);
  return *internal_default_instance();
}


void TransactionOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.TransactionOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commitment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  range_proof_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && features_ != nullptr) {
    delete features_;
  }
  features_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tari.rpc.OutputFeatures features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_features(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes commitment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_commitment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes range_proof = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_range_proof();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionOutput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.TransactionOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tari.rpc.OutputFeatures features = 1;
  if (this->has_features()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::features(this), target, stream);
  }

  // bytes commitment = 2;
  if (this->commitment().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_commitment(), target);
  }

  // bytes range_proof = 3;
  if (this->range_proof().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_range_proof(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.TransactionOutput)
  return target;
}

size_t TransactionOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.TransactionOutput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes commitment = 2;
  if (this->commitment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_commitment());
  }

  // bytes range_proof = 3;
  if (this->range_proof().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_range_proof());
  }

  // .tari.rpc.OutputFeatures features = 1;
  if (this->has_features()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *features_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.TransactionOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.TransactionOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.TransactionOutput)
    MergeFrom(*source);
  }
}

void TransactionOutput::MergeFrom(const TransactionOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.TransactionOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.commitment().size() > 0) {
    _internal_set_commitment(from._internal_commitment());
  }
  if (from.range_proof().size() > 0) {
    _internal_set_range_proof(from._internal_range_proof());
  }
  if (from.has_features()) {
    _internal_mutable_features()->::tari::rpc::OutputFeatures::MergeFrom(from._internal_features());
  }
}

void TransactionOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.TransactionOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionOutput::CopyFrom(const TransactionOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.TransactionOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOutput::IsInitialized() const {
  return true;
}

void TransactionOutput::InternalSwap(TransactionOutput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  commitment_.Swap(&other->commitment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  range_proof_.Swap(&other->range_proof_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(features_, other->features_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutputFeatures::InitAsDefaultInstance() {
}
class OutputFeatures::_Internal {
 public:
};

OutputFeatures::OutputFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.OutputFeatures)
}
OutputFeatures::OutputFeatures(const OutputFeatures& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&maturity_, &from.maturity_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&maturity_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:tari.rpc.OutputFeatures)
}

void OutputFeatures::SharedCtor() {
  ::memset(&maturity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&maturity_)) + sizeof(flags_));
}

OutputFeatures::~OutputFeatures() {
  // @@protoc_insertion_point(destructor:tari.rpc.OutputFeatures)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OutputFeatures::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OutputFeatures::ArenaDtor(void* object) {
  OutputFeatures* _this = reinterpret_cast< OutputFeatures* >(object);
  (void)_this;
}
void OutputFeatures::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OutputFeatures::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputFeatures& OutputFeatures::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputFeatures_types_2eproto.base);
  return *internal_default_instance();
}


void OutputFeatures::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.OutputFeatures)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&maturity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&maturity_)) + sizeof(flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutputFeatures::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 maturity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputFeatures::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.OutputFeatures)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flags(), target);
  }

  // uint64 maturity = 2;
  if (this->maturity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_maturity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.OutputFeatures)
  return target;
}

size_t OutputFeatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.OutputFeatures)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 maturity = 2;
  if (this->maturity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_maturity());
  }

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputFeatures::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.OutputFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputFeatures* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputFeatures>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.OutputFeatures)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.OutputFeatures)
    MergeFrom(*source);
  }
}

void OutputFeatures::MergeFrom(const OutputFeatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.OutputFeatures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maturity() != 0) {
    _internal_set_maturity(from._internal_maturity());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
}

void OutputFeatures::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.OutputFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputFeatures::CopyFrom(const OutputFeatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.OutputFeatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputFeatures::IsInitialized() const {
  return true;
}

void OutputFeatures::InternalSwap(OutputFeatures* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OutputFeatures, flags_)
      + sizeof(OutputFeatures::flags_)
      - PROTOBUF_FIELD_OFFSET(OutputFeatures, maturity_)>(
          reinterpret_cast<char*>(&maturity_),
          reinterpret_cast<char*>(&other->maturity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputFeatures::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AggregateBody::InitAsDefaultInstance() {
}
class AggregateBody::_Internal {
 public:
};

AggregateBody::AggregateBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena),
  outputs_(arena),
  kernels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.AggregateBody)
}
AggregateBody::AggregateBody(const AggregateBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      inputs_(from.inputs_),
      outputs_(from.outputs_),
      kernels_(from.kernels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tari.rpc.AggregateBody)
}

void AggregateBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregateBody_types_2eproto.base);
}

AggregateBody::~AggregateBody() {
  // @@protoc_insertion_point(destructor:tari.rpc.AggregateBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AggregateBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AggregateBody::ArenaDtor(void* object) {
  AggregateBody* _this = reinterpret_cast< AggregateBody* >(object);
  (void)_this;
}
void AggregateBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AggregateBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AggregateBody& AggregateBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregateBody_types_2eproto.base);
  return *internal_default_instance();
}


void AggregateBody::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.AggregateBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  kernels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AggregateBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tari.rpc.TransactionInput inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tari.rpc.TransactionOutput outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .tari.rpc.TransactionKernel kernels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kernels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AggregateBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.AggregateBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tari.rpc.TransactionInput inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_inputs(i), target, stream);
  }

  // repeated .tari.rpc.TransactionOutput outputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_outputs(i), target, stream);
  }

  // repeated .tari.rpc.TransactionKernel kernels = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kernels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_kernels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.AggregateBody)
  return target;
}

size_t AggregateBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.AggregateBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tari.rpc.TransactionInput inputs = 1;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tari.rpc.TransactionOutput outputs = 2;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tari.rpc.TransactionKernel kernels = 3;
  total_size += 1UL * this->_internal_kernels_size();
  for (const auto& msg : this->kernels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregateBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.AggregateBody)
  GOOGLE_DCHECK_NE(&from, this);
  const AggregateBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AggregateBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.AggregateBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.AggregateBody)
    MergeFrom(*source);
  }
}

void AggregateBody::MergeFrom(const AggregateBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.AggregateBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  kernels_.MergeFrom(from.kernels_);
}

void AggregateBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.AggregateBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AggregateBody::CopyFrom(const AggregateBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.AggregateBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregateBody::IsInitialized() const {
  return true;
}

void AggregateBody::InternalSwap(AggregateBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  kernels_.InternalSwap(&other->kernels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AggregateBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
  ::tari::rpc::_Transaction_default_instance_._instance.get_mutable()->body_ = const_cast< ::tari::rpc::AggregateBody*>(
      ::tari::rpc::AggregateBody::internal_default_instance());
}
class Transaction::_Internal {
 public:
  static const ::tari::rpc::AggregateBody& body(const Transaction* msg);
};

const ::tari::rpc::AggregateBody&
Transaction::_Internal::body(const Transaction* msg) {
  return *msg->body_;
}
Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_offset().empty()) {
    offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_offset(),
      GetArena());
  }
  if (from._internal_has_body()) {
    body_ = new ::tari::rpc::AggregateBody(*from.body_);
  } else {
    body_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tari.rpc.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_types_2eproto.base);
  offset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_ = nullptr;
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:tari.rpc.Transaction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  offset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete body_;
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_types_2eproto.base);
  return *internal_default_instance();
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  offset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_offset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tari.rpc.AggregateBody body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes offset = 1;
  if (this->offset().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_offset(), target);
  }

  // .tari.rpc.AggregateBody body = 2;
  if (this->has_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::body(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes offset = 1;
  if (this->offset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_offset());
  }

  // .tari.rpc.AggregateBody body = 2;
  if (this->has_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset().size() > 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.has_body()) {
    _internal_mutable_body()->::tari::rpc::AggregateBody::MergeFrom(from._internal_body());
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  offset_.Swap(&other->offset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(body_, other->body_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Signature::InitAsDefaultInstance() {
}
class Signature::_Internal {
 public:
};

Signature::Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.Signature)
}
Signature::Signature(const Signature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_nonce().empty()) {
    public_nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_nonce(),
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signature(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tari.rpc.Signature)
}

void Signature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Signature_types_2eproto.base);
  public_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:tari.rpc.Signature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Signature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  public_nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Signature::ArenaDtor(void* object) {
  Signature* _this = reinterpret_cast< Signature* >(object);
  (void)_this;
}
void Signature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Signature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Signature& Signature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Signature_types_2eproto.base);
  return *internal_default_instance();
}


void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_nonce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Signature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes public_nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Signature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.Signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_nonce = 1;
  if (this->public_nonce().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_nonce(), target);
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.Signature)
  return target;
}

size_t Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.Signature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_nonce = 1;
  if (this->public_nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_nonce());
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Signature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  const Signature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Signature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.Signature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.Signature)
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.public_nonce().size() > 0) {
    _internal_set_public_nonce(from._internal_public_nonce());
  }
  if (from.signature().size() > 0) {
    _internal_set_signature(from._internal_signature());
  }
}

void Signature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  return true;
}

void Signature::InternalSwap(Signature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  public_nonce_.Swap(&other->public_nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Signature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConsensusConstants::InitAsDefaultInstance() {
}
class ConsensusConstants::_Internal {
 public:
};

ConsensusConstants::ConsensusConstants(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.ConsensusConstants)
}
ConsensusConstants::ConsensusConstants(const ConsensusConstants& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&coinbase_lock_height_, &from.coinbase_lock_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&blockchain_version_) -
    reinterpret_cast<char*>(&coinbase_lock_height_)) + sizeof(blockchain_version_));
  // @@protoc_insertion_point(copy_constructor:tari.rpc.ConsensusConstants)
}

void ConsensusConstants::SharedCtor() {
  ::memset(&coinbase_lock_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blockchain_version_) -
      reinterpret_cast<char*>(&coinbase_lock_height_)) + sizeof(blockchain_version_));
}

ConsensusConstants::~ConsensusConstants() {
  // @@protoc_insertion_point(destructor:tari.rpc.ConsensusConstants)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConsensusConstants::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConsensusConstants::ArenaDtor(void* object) {
  ConsensusConstants* _this = reinterpret_cast< ConsensusConstants* >(object);
  (void)_this;
}
void ConsensusConstants::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConsensusConstants::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConsensusConstants& ConsensusConstants::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConsensusConstants_types_2eproto.base);
  return *internal_default_instance();
}


void ConsensusConstants::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.ConsensusConstants)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&coinbase_lock_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blockchain_version_) -
      reinterpret_cast<char*>(&coinbase_lock_height_)) + sizeof(blockchain_version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusConstants::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 coinbase_lock_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          coinbase_lock_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 blockchain_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          blockchain_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 future_time_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          future_time_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 difficulty_block_window = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          difficulty_block_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 difficulty_max_block_interval = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          difficulty_max_block_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_block_transaction_weight = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_block_transaction_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pow_algo_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          pow_algo_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 median_timestamp_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          median_timestamp_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 emission_initial = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          emission_initial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double emission_decay = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          emission_decay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 emission_tail = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          emission_tail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 min_blake_pow_difficulty = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          min_blake_pow_difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_weight_inputs = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          block_weight_inputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_weight_outputs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          block_weight_outputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_weight_kernels = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          block_weight_kernels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConsensusConstants::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.ConsensusConstants)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 coinbase_lock_height = 1;
  if (this->coinbase_lock_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_coinbase_lock_height(), target);
  }

  // uint32 blockchain_version = 2;
  if (this->blockchain_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_blockchain_version(), target);
  }

  // uint64 future_time_limit = 3;
  if (this->future_time_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_future_time_limit(), target);
  }

  // uint64 difficulty_block_window = 5;
  if (this->difficulty_block_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_difficulty_block_window(), target);
  }

  // uint64 difficulty_max_block_interval = 6;
  if (this->difficulty_max_block_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_difficulty_max_block_interval(), target);
  }

  // uint64 max_block_transaction_weight = 7;
  if (this->max_block_transaction_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_max_block_transaction_weight(), target);
  }

  // uint64 pow_algo_count = 8;
  if (this->pow_algo_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_pow_algo_count(), target);
  }

  // uint64 median_timestamp_count = 9;
  if (this->median_timestamp_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_median_timestamp_count(), target);
  }

  // uint64 emission_initial = 10;
  if (this->emission_initial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_emission_initial(), target);
  }

  // double emission_decay = 11;
  if (!(this->emission_decay() <= 0 && this->emission_decay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_emission_decay(), target);
  }

  // uint64 emission_tail = 12;
  if (this->emission_tail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_emission_tail(), target);
  }

  // uint64 min_blake_pow_difficulty = 13;
  if (this->min_blake_pow_difficulty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_min_blake_pow_difficulty(), target);
  }

  // uint64 block_weight_inputs = 14;
  if (this->block_weight_inputs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_block_weight_inputs(), target);
  }

  // uint64 block_weight_outputs = 15;
  if (this->block_weight_outputs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_block_weight_outputs(), target);
  }

  // uint64 block_weight_kernels = 16;
  if (this->block_weight_kernels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_block_weight_kernels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.ConsensusConstants)
  return target;
}

size_t ConsensusConstants::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.ConsensusConstants)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 coinbase_lock_height = 1;
  if (this->coinbase_lock_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_coinbase_lock_height());
  }

  // uint64 future_time_limit = 3;
  if (this->future_time_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_future_time_limit());
  }

  // uint64 difficulty_block_window = 5;
  if (this->difficulty_block_window() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_difficulty_block_window());
  }

  // uint64 difficulty_max_block_interval = 6;
  if (this->difficulty_max_block_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_difficulty_max_block_interval());
  }

  // uint64 max_block_transaction_weight = 7;
  if (this->max_block_transaction_weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_block_transaction_weight());
  }

  // uint64 pow_algo_count = 8;
  if (this->pow_algo_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pow_algo_count());
  }

  // uint64 median_timestamp_count = 9;
  if (this->median_timestamp_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_median_timestamp_count());
  }

  // uint64 emission_initial = 10;
  if (this->emission_initial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_emission_initial());
  }

  // double emission_decay = 11;
  if (!(this->emission_decay() <= 0 && this->emission_decay() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 emission_tail = 12;
  if (this->emission_tail() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_emission_tail());
  }

  // uint64 min_blake_pow_difficulty = 13;
  if (this->min_blake_pow_difficulty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_blake_pow_difficulty());
  }

  // uint64 block_weight_inputs = 14;
  if (this->block_weight_inputs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_weight_inputs());
  }

  // uint64 block_weight_outputs = 15;
  if (this->block_weight_outputs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_weight_outputs());
  }

  // uint64 block_weight_kernels = 16;
  if (this->block_weight_kernels() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_weight_kernels());
  }

  // uint32 blockchain_version = 2;
  if (this->blockchain_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blockchain_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConsensusConstants::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.ConsensusConstants)
  GOOGLE_DCHECK_NE(&from, this);
  const ConsensusConstants* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConsensusConstants>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.ConsensusConstants)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.ConsensusConstants)
    MergeFrom(*source);
  }
}

void ConsensusConstants::MergeFrom(const ConsensusConstants& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.ConsensusConstants)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.coinbase_lock_height() != 0) {
    _internal_set_coinbase_lock_height(from._internal_coinbase_lock_height());
  }
  if (from.future_time_limit() != 0) {
    _internal_set_future_time_limit(from._internal_future_time_limit());
  }
  if (from.difficulty_block_window() != 0) {
    _internal_set_difficulty_block_window(from._internal_difficulty_block_window());
  }
  if (from.difficulty_max_block_interval() != 0) {
    _internal_set_difficulty_max_block_interval(from._internal_difficulty_max_block_interval());
  }
  if (from.max_block_transaction_weight() != 0) {
    _internal_set_max_block_transaction_weight(from._internal_max_block_transaction_weight());
  }
  if (from.pow_algo_count() != 0) {
    _internal_set_pow_algo_count(from._internal_pow_algo_count());
  }
  if (from.median_timestamp_count() != 0) {
    _internal_set_median_timestamp_count(from._internal_median_timestamp_count());
  }
  if (from.emission_initial() != 0) {
    _internal_set_emission_initial(from._internal_emission_initial());
  }
  if (!(from.emission_decay() <= 0 && from.emission_decay() >= 0)) {
    _internal_set_emission_decay(from._internal_emission_decay());
  }
  if (from.emission_tail() != 0) {
    _internal_set_emission_tail(from._internal_emission_tail());
  }
  if (from.min_blake_pow_difficulty() != 0) {
    _internal_set_min_blake_pow_difficulty(from._internal_min_blake_pow_difficulty());
  }
  if (from.block_weight_inputs() != 0) {
    _internal_set_block_weight_inputs(from._internal_block_weight_inputs());
  }
  if (from.block_weight_outputs() != 0) {
    _internal_set_block_weight_outputs(from._internal_block_weight_outputs());
  }
  if (from.block_weight_kernels() != 0) {
    _internal_set_block_weight_kernels(from._internal_block_weight_kernels());
  }
  if (from.blockchain_version() != 0) {
    _internal_set_blockchain_version(from._internal_blockchain_version());
  }
}

void ConsensusConstants::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.ConsensusConstants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConsensusConstants::CopyFrom(const ConsensusConstants& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.ConsensusConstants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusConstants::IsInitialized() const {
  return true;
}

void ConsensusConstants::InternalSwap(ConsensusConstants* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsensusConstants, blockchain_version_)
      + sizeof(ConsensusConstants::blockchain_version_)
      - PROTOBUF_FIELD_OFFSET(ConsensusConstants, coinbase_lock_height_)>(
          reinterpret_cast<char*>(&coinbase_lock_height_),
          reinterpret_cast<char*>(&other->coinbase_lock_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusConstants::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace tari
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tari::rpc::BlockHeader* Arena::CreateMaybeMessage< ::tari::rpc::BlockHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::BlockHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::ProofOfWork* Arena::CreateMaybeMessage< ::tari::rpc::ProofOfWork >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::ProofOfWork >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::PowAlgo* Arena::CreateMaybeMessage< ::tari::rpc::PowAlgo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::PowAlgo >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::Block* Arena::CreateMaybeMessage< ::tari::rpc::Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::HistoricalBlock* Arena::CreateMaybeMessage< ::tari::rpc::HistoricalBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::HistoricalBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::NewBlockHeaderTemplate* Arena::CreateMaybeMessage< ::tari::rpc::NewBlockHeaderTemplate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::NewBlockHeaderTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::NewBlockTemplate* Arena::CreateMaybeMessage< ::tari::rpc::NewBlockTemplate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::NewBlockTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::TransactionKernel* Arena::CreateMaybeMessage< ::tari::rpc::TransactionKernel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::TransactionKernel >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::TransactionInput* Arena::CreateMaybeMessage< ::tari::rpc::TransactionInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::TransactionInput >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::TransactionOutput* Arena::CreateMaybeMessage< ::tari::rpc::TransactionOutput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::TransactionOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::OutputFeatures* Arena::CreateMaybeMessage< ::tari::rpc::OutputFeatures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::OutputFeatures >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::AggregateBody* Arena::CreateMaybeMessage< ::tari::rpc::AggregateBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::AggregateBody >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::Transaction* Arena::CreateMaybeMessage< ::tari::rpc::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::Signature* Arena::CreateMaybeMessage< ::tari::rpc::Signature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::Signature >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::ConsensusConstants* Arena::CreateMaybeMessage< ::tari::rpc::ConsensusConstants >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::ConsensusConstants >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
