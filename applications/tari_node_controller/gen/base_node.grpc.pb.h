// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: base_node.proto
// Original file comments:
// Copyright 2020. The Tari Project
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
// following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
// disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
// following disclaimer in the documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
// products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#ifndef GRPC_base_5fnode_2eproto__INCLUDED
#define GRPC_base_5fnode_2eproto__INCLUDED

#include "base_node.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace tari {
namespace rpc {

// The gRPC interface for interacting with the base node.
class BaseNode final {
 public:
  static constexpr char const* service_full_name() {
    return "tari.rpc.BaseNode";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists headers in the current best chain
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tari::rpc::BlockHeader>> ListHeaders(::grpc::ClientContext* context, const ::tari::rpc::ListHeadersRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tari::rpc::BlockHeader>>(ListHeadersRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::BlockHeader>> AsyncListHeaders(::grpc::ClientContext* context, const ::tari::rpc::ListHeadersRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::BlockHeader>>(AsyncListHeadersRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::BlockHeader>> PrepareAsyncListHeaders(::grpc::ClientContext* context, const ::tari::rpc::ListHeadersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::BlockHeader>>(PrepareAsyncListHeadersRaw(context, request, cq));
    }
    // Returns blocks in the current best chain. Currently only supports querying by height
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tari::rpc::HistoricalBlock>> GetBlocks(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tari::rpc::HistoricalBlock>>(GetBlocksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::HistoricalBlock>> AsyncGetBlocks(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::HistoricalBlock>>(AsyncGetBlocksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::HistoricalBlock>> PrepareAsyncGetBlocks(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::HistoricalBlock>>(PrepareAsyncGetBlocksRaw(context, request, cq));
    }
    // Returns the calc timing for the chain heights
    virtual ::grpc::Status GetCalcTiming(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::tari::rpc::CalcTimingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::CalcTimingResponse>> AsyncGetCalcTiming(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::CalcTimingResponse>>(AsyncGetCalcTimingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::CalcTimingResponse>> PrepareAsyncGetCalcTiming(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::CalcTimingResponse>>(PrepareAsyncGetCalcTimingRaw(context, request, cq));
    }
    // Returns the network Constants
    virtual ::grpc::Status GetConstants(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::tari::rpc::ConsensusConstants* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::ConsensusConstants>> AsyncGetConstants(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::ConsensusConstants>>(AsyncGetConstantsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::ConsensusConstants>> PrepareAsyncGetConstants(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::ConsensusConstants>>(PrepareAsyncGetConstantsRaw(context, request, cq));
    }
    // Returns Block Sizes
    virtual ::grpc::Status GetBlockSize(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::tari::rpc::BlockGroupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::BlockGroupResponse>> AsyncGetBlockSize(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::BlockGroupResponse>>(AsyncGetBlockSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::BlockGroupResponse>> PrepareAsyncGetBlockSize(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::BlockGroupResponse>>(PrepareAsyncGetBlockSizeRaw(context, request, cq));
    }
    // Returns Block Fees
    virtual ::grpc::Status GetBlockFees(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::tari::rpc::BlockGroupResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::BlockGroupResponse>> AsyncGetBlockFees(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::BlockGroupResponse>>(AsyncGetBlockFeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::BlockGroupResponse>> PrepareAsyncGetBlockFees(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::BlockGroupResponse>>(PrepareAsyncGetBlockFeesRaw(context, request, cq));
    }
    // Get Version
    virtual ::grpc::Status GetVersion(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::tari::rpc::StringValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::StringValue>> AsyncGetVersion(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::StringValue>>(AsyncGetVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::StringValue>> PrepareAsyncGetVersion(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::StringValue>>(PrepareAsyncGetVersionRaw(context, request, cq));
    }
    // Get coins in circulation
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tari::rpc::ValueAtHeightResponse>> GetTokensInCirculation(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tari::rpc::ValueAtHeightResponse>>(GetTokensInCirculationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::ValueAtHeightResponse>> AsyncGetTokensInCirculation(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::ValueAtHeightResponse>>(AsyncGetTokensInCirculationRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::ValueAtHeightResponse>> PrepareAsyncGetTokensInCirculation(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::ValueAtHeightResponse>>(PrepareAsyncGetTokensInCirculationRaw(context, request, cq));
    }
    // Get network difficulties
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tari::rpc::NetworkDifficultyResponse>> GetNetworkDifficulty(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tari::rpc::NetworkDifficultyResponse>>(GetNetworkDifficultyRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::NetworkDifficultyResponse>> AsyncGetNetworkDifficulty(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::NetworkDifficultyResponse>>(AsyncGetNetworkDifficultyRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::NetworkDifficultyResponse>> PrepareAsyncGetNetworkDifficulty(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::NetworkDifficultyResponse>>(PrepareAsyncGetNetworkDifficultyRaw(context, request, cq));
    }
    // Get the block template
    virtual ::grpc::Status GetNewBlockTemplate(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo& request, ::tari::rpc::NewBlockTemplateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::NewBlockTemplateResponse>> AsyncGetNewBlockTemplate(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::NewBlockTemplateResponse>>(AsyncGetNewBlockTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::NewBlockTemplateResponse>> PrepareAsyncGetNewBlockTemplate(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::NewBlockTemplateResponse>>(PrepareAsyncGetNewBlockTemplateRaw(context, request, cq));
    }
    // Construct a new block from a provided template
    virtual ::grpc::Status GetNewBlock(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate& request, ::tari::rpc::GetNewBlockResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::GetNewBlockResult>> AsyncGetNewBlock(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::GetNewBlockResult>>(AsyncGetNewBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::GetNewBlockResult>> PrepareAsyncGetNewBlock(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::GetNewBlockResult>>(PrepareAsyncGetNewBlockRaw(context, request, cq));
    }
    // Submit a new block for propogation
    virtual ::grpc::Status SubmitBlock(::grpc::ClientContext* context, const ::tari::rpc::Block& request, ::tari::rpc::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::Empty>> AsyncSubmitBlock(::grpc::ClientContext* context, const ::tari::rpc::Block& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::Empty>>(AsyncSubmitBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::Empty>> PrepareAsyncSubmitBlock(::grpc::ClientContext* context, const ::tari::rpc::Block& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::Empty>>(PrepareAsyncSubmitBlockRaw(context, request, cq));
    }
    // Get the base node sync information
    virtual ::grpc::Status GetSyncInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::tari::rpc::SyncInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::SyncInfoResponse>> AsyncGetSyncInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::SyncInfoResponse>>(AsyncGetSyncInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::SyncInfoResponse>> PrepareAsyncGetSyncInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::SyncInfoResponse>>(PrepareAsyncGetSyncInfoRaw(context, request, cq));
    }
    // Get the base node tip information
    virtual ::grpc::Status GetTipInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::tari::rpc::TipInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::TipInfoResponse>> AsyncGetTipInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::TipInfoResponse>>(AsyncGetTipInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::TipInfoResponse>> PrepareAsyncGetTipInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::TipInfoResponse>>(PrepareAsyncGetTipInfoRaw(context, request, cq));
    }
    // Search for blocks containing the specified kernels
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tari::rpc::HistoricalBlock>> SearchKernels(::grpc::ClientContext* context, const ::tari::rpc::SearchKernelsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tari::rpc::HistoricalBlock>>(SearchKernelsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::HistoricalBlock>> AsyncSearchKernels(::grpc::ClientContext* context, const ::tari::rpc::SearchKernelsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::HistoricalBlock>>(AsyncSearchKernelsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::HistoricalBlock>> PrepareAsyncSearchKernels(::grpc::ClientContext* context, const ::tari::rpc::SearchKernelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tari::rpc::HistoricalBlock>>(PrepareAsyncSearchKernelsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Lists headers in the current best chain
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListHeaders(::grpc::ClientContext* context, ::tari::rpc::ListHeadersRequest* request, ::grpc::ClientReadReactor< ::tari::rpc::BlockHeader>* reactor) = 0;
      #else
      virtual void ListHeaders(::grpc::ClientContext* context, ::tari::rpc::ListHeadersRequest* request, ::grpc::experimental::ClientReadReactor< ::tari::rpc::BlockHeader>* reactor) = 0;
      #endif
      // Returns blocks in the current best chain. Currently only supports querying by height
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBlocks(::grpc::ClientContext* context, ::tari::rpc::GetBlocksRequest* request, ::grpc::ClientReadReactor< ::tari::rpc::HistoricalBlock>* reactor) = 0;
      #else
      virtual void GetBlocks(::grpc::ClientContext* context, ::tari::rpc::GetBlocksRequest* request, ::grpc::experimental::ClientReadReactor< ::tari::rpc::HistoricalBlock>* reactor) = 0;
      #endif
      // Returns the calc timing for the chain heights
      virtual void GetCalcTiming(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest* request, ::tari::rpc::CalcTimingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCalcTiming(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::CalcTimingResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCalcTiming(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest* request, ::tari::rpc::CalcTimingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCalcTiming(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest* request, ::tari::rpc::CalcTimingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCalcTiming(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::CalcTimingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCalcTiming(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::CalcTimingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Returns the network Constants
      virtual void GetConstants(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::ConsensusConstants* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConstants(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::ConsensusConstants* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetConstants(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::ConsensusConstants* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetConstants(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::ConsensusConstants* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetConstants(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::ConsensusConstants* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetConstants(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::ConsensusConstants* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Returns Block Sizes
      virtual void GetBlockSize(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBlockSize(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBlockSize(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBlockSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBlockSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Returns Block Fees
      virtual void GetBlockFees(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBlockFees(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBlockFees(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBlockFees(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBlockFees(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBlockFees(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get Version
      virtual void GetVersion(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::StringValue* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::StringValue* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetVersion(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::StringValue* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetVersion(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::StringValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::StringValue* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::StringValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get coins in circulation
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTokensInCirculation(::grpc::ClientContext* context, ::tari::rpc::GetBlocksRequest* request, ::grpc::ClientReadReactor< ::tari::rpc::ValueAtHeightResponse>* reactor) = 0;
      #else
      virtual void GetTokensInCirculation(::grpc::ClientContext* context, ::tari::rpc::GetBlocksRequest* request, ::grpc::experimental::ClientReadReactor< ::tari::rpc::ValueAtHeightResponse>* reactor) = 0;
      #endif
      // Get network difficulties
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetNetworkDifficulty(::grpc::ClientContext* context, ::tari::rpc::HeightRequest* request, ::grpc::ClientReadReactor< ::tari::rpc::NetworkDifficultyResponse>* reactor) = 0;
      #else
      virtual void GetNetworkDifficulty(::grpc::ClientContext* context, ::tari::rpc::HeightRequest* request, ::grpc::experimental::ClientReadReactor< ::tari::rpc::NetworkDifficultyResponse>* reactor) = 0;
      #endif
      // Get the block template
      virtual void GetNewBlockTemplate(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo* request, ::tari::rpc::NewBlockTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNewBlockTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::NewBlockTemplateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetNewBlockTemplate(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo* request, ::tari::rpc::NewBlockTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetNewBlockTemplate(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo* request, ::tari::rpc::NewBlockTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetNewBlockTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::NewBlockTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetNewBlockTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::NewBlockTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Construct a new block from a provided template
      virtual void GetNewBlock(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate* request, ::tari::rpc::GetNewBlockResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNewBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::GetNewBlockResult* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetNewBlock(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate* request, ::tari::rpc::GetNewBlockResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetNewBlock(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate* request, ::tari::rpc::GetNewBlockResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetNewBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::GetNewBlockResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetNewBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::GetNewBlockResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Submit a new block for propogation
      virtual void SubmitBlock(::grpc::ClientContext* context, const ::tari::rpc::Block* request, ::tari::rpc::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitBlock(::grpc::ClientContext* context, const ::tari::rpc::Block* request, ::tari::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitBlock(::grpc::ClientContext* context, const ::tari::rpc::Block* request, ::tari::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubmitBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubmitBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get the base node sync information
      virtual void GetSyncInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::SyncInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSyncInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::SyncInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSyncInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::SyncInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSyncInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::SyncInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetSyncInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::SyncInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetSyncInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::SyncInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get the base node tip information
      virtual void GetTipInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::TipInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTipInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::TipInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTipInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::TipInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTipInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::TipInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTipInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::TipInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTipInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::TipInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Search for blocks containing the specified kernels
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SearchKernels(::grpc::ClientContext* context, ::tari::rpc::SearchKernelsRequest* request, ::grpc::ClientReadReactor< ::tari::rpc::HistoricalBlock>* reactor) = 0;
      #else
      virtual void SearchKernels(::grpc::ClientContext* context, ::tari::rpc::SearchKernelsRequest* request, ::grpc::experimental::ClientReadReactor< ::tari::rpc::HistoricalBlock>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::tari::rpc::BlockHeader>* ListHeadersRaw(::grpc::ClientContext* context, const ::tari::rpc::ListHeadersRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tari::rpc::BlockHeader>* AsyncListHeadersRaw(::grpc::ClientContext* context, const ::tari::rpc::ListHeadersRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tari::rpc::BlockHeader>* PrepareAsyncListHeadersRaw(::grpc::ClientContext* context, const ::tari::rpc::ListHeadersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tari::rpc::HistoricalBlock>* GetBlocksRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tari::rpc::HistoricalBlock>* AsyncGetBlocksRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tari::rpc::HistoricalBlock>* PrepareAsyncGetBlocksRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::CalcTimingResponse>* AsyncGetCalcTimingRaw(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::CalcTimingResponse>* PrepareAsyncGetCalcTimingRaw(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::ConsensusConstants>* AsyncGetConstantsRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::ConsensusConstants>* PrepareAsyncGetConstantsRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::BlockGroupResponse>* AsyncGetBlockSizeRaw(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::BlockGroupResponse>* PrepareAsyncGetBlockSizeRaw(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::BlockGroupResponse>* AsyncGetBlockFeesRaw(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::BlockGroupResponse>* PrepareAsyncGetBlockFeesRaw(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::StringValue>* AsyncGetVersionRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::StringValue>* PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tari::rpc::ValueAtHeightResponse>* GetTokensInCirculationRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tari::rpc::ValueAtHeightResponse>* AsyncGetTokensInCirculationRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tari::rpc::ValueAtHeightResponse>* PrepareAsyncGetTokensInCirculationRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tari::rpc::NetworkDifficultyResponse>* GetNetworkDifficultyRaw(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tari::rpc::NetworkDifficultyResponse>* AsyncGetNetworkDifficultyRaw(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tari::rpc::NetworkDifficultyResponse>* PrepareAsyncGetNetworkDifficultyRaw(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::NewBlockTemplateResponse>* AsyncGetNewBlockTemplateRaw(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::NewBlockTemplateResponse>* PrepareAsyncGetNewBlockTemplateRaw(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::GetNewBlockResult>* AsyncGetNewBlockRaw(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::GetNewBlockResult>* PrepareAsyncGetNewBlockRaw(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::Empty>* AsyncSubmitBlockRaw(::grpc::ClientContext* context, const ::tari::rpc::Block& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::Empty>* PrepareAsyncSubmitBlockRaw(::grpc::ClientContext* context, const ::tari::rpc::Block& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::SyncInfoResponse>* AsyncGetSyncInfoRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::SyncInfoResponse>* PrepareAsyncGetSyncInfoRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::TipInfoResponse>* AsyncGetTipInfoRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tari::rpc::TipInfoResponse>* PrepareAsyncGetTipInfoRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tari::rpc::HistoricalBlock>* SearchKernelsRaw(::grpc::ClientContext* context, const ::tari::rpc::SearchKernelsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tari::rpc::HistoricalBlock>* AsyncSearchKernelsRaw(::grpc::ClientContext* context, const ::tari::rpc::SearchKernelsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tari::rpc::HistoricalBlock>* PrepareAsyncSearchKernelsRaw(::grpc::ClientContext* context, const ::tari::rpc::SearchKernelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::tari::rpc::BlockHeader>> ListHeaders(::grpc::ClientContext* context, const ::tari::rpc::ListHeadersRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tari::rpc::BlockHeader>>(ListHeadersRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::BlockHeader>> AsyncListHeaders(::grpc::ClientContext* context, const ::tari::rpc::ListHeadersRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::BlockHeader>>(AsyncListHeadersRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::BlockHeader>> PrepareAsyncListHeaders(::grpc::ClientContext* context, const ::tari::rpc::ListHeadersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::BlockHeader>>(PrepareAsyncListHeadersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tari::rpc::HistoricalBlock>> GetBlocks(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tari::rpc::HistoricalBlock>>(GetBlocksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>> AsyncGetBlocks(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>>(AsyncGetBlocksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>> PrepareAsyncGetBlocks(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>>(PrepareAsyncGetBlocksRaw(context, request, cq));
    }
    ::grpc::Status GetCalcTiming(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::tari::rpc::CalcTimingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::CalcTimingResponse>> AsyncGetCalcTiming(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::CalcTimingResponse>>(AsyncGetCalcTimingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::CalcTimingResponse>> PrepareAsyncGetCalcTiming(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::CalcTimingResponse>>(PrepareAsyncGetCalcTimingRaw(context, request, cq));
    }
    ::grpc::Status GetConstants(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::tari::rpc::ConsensusConstants* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::ConsensusConstants>> AsyncGetConstants(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::ConsensusConstants>>(AsyncGetConstantsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::ConsensusConstants>> PrepareAsyncGetConstants(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::ConsensusConstants>>(PrepareAsyncGetConstantsRaw(context, request, cq));
    }
    ::grpc::Status GetBlockSize(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::tari::rpc::BlockGroupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>> AsyncGetBlockSize(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>>(AsyncGetBlockSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>> PrepareAsyncGetBlockSize(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>>(PrepareAsyncGetBlockSizeRaw(context, request, cq));
    }
    ::grpc::Status GetBlockFees(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::tari::rpc::BlockGroupResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>> AsyncGetBlockFees(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>>(AsyncGetBlockFeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>> PrepareAsyncGetBlockFees(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>>(PrepareAsyncGetBlockFeesRaw(context, request, cq));
    }
    ::grpc::Status GetVersion(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::tari::rpc::StringValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::StringValue>> AsyncGetVersion(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::StringValue>>(AsyncGetVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::StringValue>> PrepareAsyncGetVersion(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::StringValue>>(PrepareAsyncGetVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tari::rpc::ValueAtHeightResponse>> GetTokensInCirculation(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tari::rpc::ValueAtHeightResponse>>(GetTokensInCirculationRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::ValueAtHeightResponse>> AsyncGetTokensInCirculation(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::ValueAtHeightResponse>>(AsyncGetTokensInCirculationRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::ValueAtHeightResponse>> PrepareAsyncGetTokensInCirculation(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::ValueAtHeightResponse>>(PrepareAsyncGetTokensInCirculationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tari::rpc::NetworkDifficultyResponse>> GetNetworkDifficulty(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tari::rpc::NetworkDifficultyResponse>>(GetNetworkDifficultyRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::NetworkDifficultyResponse>> AsyncGetNetworkDifficulty(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::NetworkDifficultyResponse>>(AsyncGetNetworkDifficultyRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::NetworkDifficultyResponse>> PrepareAsyncGetNetworkDifficulty(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::NetworkDifficultyResponse>>(PrepareAsyncGetNetworkDifficultyRaw(context, request, cq));
    }
    ::grpc::Status GetNewBlockTemplate(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo& request, ::tari::rpc::NewBlockTemplateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::NewBlockTemplateResponse>> AsyncGetNewBlockTemplate(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::NewBlockTemplateResponse>>(AsyncGetNewBlockTemplateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::NewBlockTemplateResponse>> PrepareAsyncGetNewBlockTemplate(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::NewBlockTemplateResponse>>(PrepareAsyncGetNewBlockTemplateRaw(context, request, cq));
    }
    ::grpc::Status GetNewBlock(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate& request, ::tari::rpc::GetNewBlockResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::GetNewBlockResult>> AsyncGetNewBlock(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::GetNewBlockResult>>(AsyncGetNewBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::GetNewBlockResult>> PrepareAsyncGetNewBlock(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::GetNewBlockResult>>(PrepareAsyncGetNewBlockRaw(context, request, cq));
    }
    ::grpc::Status SubmitBlock(::grpc::ClientContext* context, const ::tari::rpc::Block& request, ::tari::rpc::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::Empty>> AsyncSubmitBlock(::grpc::ClientContext* context, const ::tari::rpc::Block& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::Empty>>(AsyncSubmitBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::Empty>> PrepareAsyncSubmitBlock(::grpc::ClientContext* context, const ::tari::rpc::Block& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::Empty>>(PrepareAsyncSubmitBlockRaw(context, request, cq));
    }
    ::grpc::Status GetSyncInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::tari::rpc::SyncInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::SyncInfoResponse>> AsyncGetSyncInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::SyncInfoResponse>>(AsyncGetSyncInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::SyncInfoResponse>> PrepareAsyncGetSyncInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::SyncInfoResponse>>(PrepareAsyncGetSyncInfoRaw(context, request, cq));
    }
    ::grpc::Status GetTipInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::tari::rpc::TipInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::TipInfoResponse>> AsyncGetTipInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::TipInfoResponse>>(AsyncGetTipInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::TipInfoResponse>> PrepareAsyncGetTipInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tari::rpc::TipInfoResponse>>(PrepareAsyncGetTipInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tari::rpc::HistoricalBlock>> SearchKernels(::grpc::ClientContext* context, const ::tari::rpc::SearchKernelsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tari::rpc::HistoricalBlock>>(SearchKernelsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>> AsyncSearchKernels(::grpc::ClientContext* context, const ::tari::rpc::SearchKernelsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>>(AsyncSearchKernelsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>> PrepareAsyncSearchKernels(::grpc::ClientContext* context, const ::tari::rpc::SearchKernelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>>(PrepareAsyncSearchKernelsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListHeaders(::grpc::ClientContext* context, ::tari::rpc::ListHeadersRequest* request, ::grpc::ClientReadReactor< ::tari::rpc::BlockHeader>* reactor) override;
      #else
      void ListHeaders(::grpc::ClientContext* context, ::tari::rpc::ListHeadersRequest* request, ::grpc::experimental::ClientReadReactor< ::tari::rpc::BlockHeader>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBlocks(::grpc::ClientContext* context, ::tari::rpc::GetBlocksRequest* request, ::grpc::ClientReadReactor< ::tari::rpc::HistoricalBlock>* reactor) override;
      #else
      void GetBlocks(::grpc::ClientContext* context, ::tari::rpc::GetBlocksRequest* request, ::grpc::experimental::ClientReadReactor< ::tari::rpc::HistoricalBlock>* reactor) override;
      #endif
      void GetCalcTiming(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest* request, ::tari::rpc::CalcTimingResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCalcTiming(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::CalcTimingResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCalcTiming(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest* request, ::tari::rpc::CalcTimingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCalcTiming(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest* request, ::tari::rpc::CalcTimingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCalcTiming(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::CalcTimingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCalcTiming(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::CalcTimingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetConstants(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::ConsensusConstants* response, std::function<void(::grpc::Status)>) override;
      void GetConstants(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::ConsensusConstants* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetConstants(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::ConsensusConstants* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetConstants(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::ConsensusConstants* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetConstants(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::ConsensusConstants* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetConstants(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::ConsensusConstants* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetBlockSize(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBlockSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBlockSize(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBlockSize(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBlockSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBlockSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetBlockFees(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBlockFees(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBlockFees(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBlockFees(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBlockFees(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBlockFees(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetVersion(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::StringValue* response, std::function<void(::grpc::Status)>) override;
      void GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::StringValue* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetVersion(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::StringValue* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetVersion(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::StringValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::StringValue* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::StringValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTokensInCirculation(::grpc::ClientContext* context, ::tari::rpc::GetBlocksRequest* request, ::grpc::ClientReadReactor< ::tari::rpc::ValueAtHeightResponse>* reactor) override;
      #else
      void GetTokensInCirculation(::grpc::ClientContext* context, ::tari::rpc::GetBlocksRequest* request, ::grpc::experimental::ClientReadReactor< ::tari::rpc::ValueAtHeightResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetNetworkDifficulty(::grpc::ClientContext* context, ::tari::rpc::HeightRequest* request, ::grpc::ClientReadReactor< ::tari::rpc::NetworkDifficultyResponse>* reactor) override;
      #else
      void GetNetworkDifficulty(::grpc::ClientContext* context, ::tari::rpc::HeightRequest* request, ::grpc::experimental::ClientReadReactor< ::tari::rpc::NetworkDifficultyResponse>* reactor) override;
      #endif
      void GetNewBlockTemplate(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo* request, ::tari::rpc::NewBlockTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNewBlockTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::NewBlockTemplateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetNewBlockTemplate(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo* request, ::tari::rpc::NewBlockTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetNewBlockTemplate(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo* request, ::tari::rpc::NewBlockTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetNewBlockTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::NewBlockTemplateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetNewBlockTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::NewBlockTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetNewBlock(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate* request, ::tari::rpc::GetNewBlockResult* response, std::function<void(::grpc::Status)>) override;
      void GetNewBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::GetNewBlockResult* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetNewBlock(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate* request, ::tari::rpc::GetNewBlockResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetNewBlock(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate* request, ::tari::rpc::GetNewBlockResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetNewBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::GetNewBlockResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetNewBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::GetNewBlockResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubmitBlock(::grpc::ClientContext* context, const ::tari::rpc::Block* request, ::tari::rpc::Empty* response, std::function<void(::grpc::Status)>) override;
      void SubmitBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitBlock(::grpc::ClientContext* context, const ::tari::rpc::Block* request, ::tari::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitBlock(::grpc::ClientContext* context, const ::tari::rpc::Block* request, ::tari::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubmitBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubmitBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetSyncInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::SyncInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSyncInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::SyncInfoResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSyncInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::SyncInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSyncInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::SyncInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetSyncInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::SyncInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetSyncInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::SyncInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetTipInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::TipInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTipInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::TipInfoResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTipInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::TipInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTipInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::TipInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTipInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::TipInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTipInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::TipInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SearchKernels(::grpc::ClientContext* context, ::tari::rpc::SearchKernelsRequest* request, ::grpc::ClientReadReactor< ::tari::rpc::HistoricalBlock>* reactor) override;
      #else
      void SearchKernels(::grpc::ClientContext* context, ::tari::rpc::SearchKernelsRequest* request, ::grpc::experimental::ClientReadReactor< ::tari::rpc::HistoricalBlock>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::tari::rpc::BlockHeader>* ListHeadersRaw(::grpc::ClientContext* context, const ::tari::rpc::ListHeadersRequest& request) override;
    ::grpc::ClientAsyncReader< ::tari::rpc::BlockHeader>* AsyncListHeadersRaw(::grpc::ClientContext* context, const ::tari::rpc::ListHeadersRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tari::rpc::BlockHeader>* PrepareAsyncListHeadersRaw(::grpc::ClientContext* context, const ::tari::rpc::ListHeadersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tari::rpc::HistoricalBlock>* GetBlocksRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request) override;
    ::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>* AsyncGetBlocksRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>* PrepareAsyncGetBlocksRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::CalcTimingResponse>* AsyncGetCalcTimingRaw(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::CalcTimingResponse>* PrepareAsyncGetCalcTimingRaw(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::ConsensusConstants>* AsyncGetConstantsRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::ConsensusConstants>* PrepareAsyncGetConstantsRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>* AsyncGetBlockSizeRaw(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>* PrepareAsyncGetBlockSizeRaw(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>* AsyncGetBlockFeesRaw(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>* PrepareAsyncGetBlockFeesRaw(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::StringValue>* AsyncGetVersionRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::StringValue>* PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tari::rpc::ValueAtHeightResponse>* GetTokensInCirculationRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request) override;
    ::grpc::ClientAsyncReader< ::tari::rpc::ValueAtHeightResponse>* AsyncGetTokensInCirculationRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tari::rpc::ValueAtHeightResponse>* PrepareAsyncGetTokensInCirculationRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tari::rpc::NetworkDifficultyResponse>* GetNetworkDifficultyRaw(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request) override;
    ::grpc::ClientAsyncReader< ::tari::rpc::NetworkDifficultyResponse>* AsyncGetNetworkDifficultyRaw(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tari::rpc::NetworkDifficultyResponse>* PrepareAsyncGetNetworkDifficultyRaw(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::NewBlockTemplateResponse>* AsyncGetNewBlockTemplateRaw(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::NewBlockTemplateResponse>* PrepareAsyncGetNewBlockTemplateRaw(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::GetNewBlockResult>* AsyncGetNewBlockRaw(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::GetNewBlockResult>* PrepareAsyncGetNewBlockRaw(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::Empty>* AsyncSubmitBlockRaw(::grpc::ClientContext* context, const ::tari::rpc::Block& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::Empty>* PrepareAsyncSubmitBlockRaw(::grpc::ClientContext* context, const ::tari::rpc::Block& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::SyncInfoResponse>* AsyncGetSyncInfoRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::SyncInfoResponse>* PrepareAsyncGetSyncInfoRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::TipInfoResponse>* AsyncGetTipInfoRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tari::rpc::TipInfoResponse>* PrepareAsyncGetTipInfoRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tari::rpc::HistoricalBlock>* SearchKernelsRaw(::grpc::ClientContext* context, const ::tari::rpc::SearchKernelsRequest& request) override;
    ::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>* AsyncSearchKernelsRaw(::grpc::ClientContext* context, const ::tari::rpc::SearchKernelsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>* PrepareAsyncSearchKernelsRaw(::grpc::ClientContext* context, const ::tari::rpc::SearchKernelsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListHeaders_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlocks_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCalcTiming_;
    const ::grpc::internal::RpcMethod rpcmethod_GetConstants_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockSize_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockFees_;
    const ::grpc::internal::RpcMethod rpcmethod_GetVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTokensInCirculation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNetworkDifficulty_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNewBlockTemplate_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNewBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSyncInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTipInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_SearchKernels_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists headers in the current best chain
    virtual ::grpc::Status ListHeaders(::grpc::ServerContext* context, const ::tari::rpc::ListHeadersRequest* request, ::grpc::ServerWriter< ::tari::rpc::BlockHeader>* writer);
    // Returns blocks in the current best chain. Currently only supports querying by height
    virtual ::grpc::Status GetBlocks(::grpc::ServerContext* context, const ::tari::rpc::GetBlocksRequest* request, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* writer);
    // Returns the calc timing for the chain heights
    virtual ::grpc::Status GetCalcTiming(::grpc::ServerContext* context, const ::tari::rpc::HeightRequest* request, ::tari::rpc::CalcTimingResponse* response);
    // Returns the network Constants
    virtual ::grpc::Status GetConstants(::grpc::ServerContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::ConsensusConstants* response);
    // Returns Block Sizes
    virtual ::grpc::Status GetBlockSize(::grpc::ServerContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response);
    // Returns Block Fees
    virtual ::grpc::Status GetBlockFees(::grpc::ServerContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response);
    // Get Version
    virtual ::grpc::Status GetVersion(::grpc::ServerContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::StringValue* response);
    // Get coins in circulation
    virtual ::grpc::Status GetTokensInCirculation(::grpc::ServerContext* context, const ::tari::rpc::GetBlocksRequest* request, ::grpc::ServerWriter< ::tari::rpc::ValueAtHeightResponse>* writer);
    // Get network difficulties
    virtual ::grpc::Status GetNetworkDifficulty(::grpc::ServerContext* context, const ::tari::rpc::HeightRequest* request, ::grpc::ServerWriter< ::tari::rpc::NetworkDifficultyResponse>* writer);
    // Get the block template
    virtual ::grpc::Status GetNewBlockTemplate(::grpc::ServerContext* context, const ::tari::rpc::PowAlgo* request, ::tari::rpc::NewBlockTemplateResponse* response);
    // Construct a new block from a provided template
    virtual ::grpc::Status GetNewBlock(::grpc::ServerContext* context, const ::tari::rpc::NewBlockTemplate* request, ::tari::rpc::GetNewBlockResult* response);
    // Submit a new block for propogation
    virtual ::grpc::Status SubmitBlock(::grpc::ServerContext* context, const ::tari::rpc::Block* request, ::tari::rpc::Empty* response);
    // Get the base node sync information
    virtual ::grpc::Status GetSyncInfo(::grpc::ServerContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::SyncInfoResponse* response);
    // Get the base node tip information
    virtual ::grpc::Status GetTipInfo(::grpc::ServerContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::TipInfoResponse* response);
    // Search for blocks containing the specified kernels
    virtual ::grpc::Status SearchKernels(::grpc::ServerContext* context, const ::tari::rpc::SearchKernelsRequest* request, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListHeaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListHeaders() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListHeaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListHeaders(::grpc::ServerContext* /*context*/, const ::tari::rpc::ListHeadersRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::BlockHeader>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListHeaders(::grpc::ServerContext* context, ::tari::rpc::ListHeadersRequest* request, ::grpc::ServerAsyncWriter< ::tari::rpc::BlockHeader>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlocks() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlocks(::grpc::ServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlocks(::grpc::ServerContext* context, ::tari::rpc::GetBlocksRequest* request, ::grpc::ServerAsyncWriter< ::tari::rpc::HistoricalBlock>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCalcTiming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCalcTiming() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCalcTiming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCalcTiming(::grpc::ServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/, ::tari::rpc::CalcTimingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCalcTiming(::grpc::ServerContext* context, ::tari::rpc::HeightRequest* request, ::grpc::ServerAsyncResponseWriter< ::tari::rpc::CalcTimingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConstants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetConstants() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetConstants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConstants(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::ConsensusConstants* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConstants(::grpc::ServerContext* context, ::tari::rpc::Empty* request, ::grpc::ServerAsyncResponseWriter< ::tari::rpc::ConsensusConstants>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockSize() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetBlockSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockSize(::grpc::ServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockSize(::grpc::ServerContext* context, ::tari::rpc::BlockGroupRequest* request, ::grpc::ServerAsyncResponseWriter< ::tari::rpc::BlockGroupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockFees() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetBlockFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockFees(::grpc::ServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockFees(::grpc::ServerContext* context, ::tari::rpc::BlockGroupRequest* request, ::grpc::ServerAsyncResponseWriter< ::tari::rpc::BlockGroupResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetVersion() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVersion(::grpc::ServerContext* context, ::tari::rpc::Empty* request, ::grpc::ServerAsyncResponseWriter< ::tari::rpc::StringValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTokensInCirculation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTokensInCirculation() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetTokensInCirculation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokensInCirculation(::grpc::ServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::ValueAtHeightResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTokensInCirculation(::grpc::ServerContext* context, ::tari::rpc::GetBlocksRequest* request, ::grpc::ServerAsyncWriter< ::tari::rpc::ValueAtHeightResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNetworkDifficulty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNetworkDifficulty() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetNetworkDifficulty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkDifficulty(::grpc::ServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::NetworkDifficultyResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNetworkDifficulty(::grpc::ServerContext* context, ::tari::rpc::HeightRequest* request, ::grpc::ServerAsyncWriter< ::tari::rpc::NetworkDifficultyResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNewBlockTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNewBlockTemplate() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetNewBlockTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewBlockTemplate(::grpc::ServerContext* /*context*/, const ::tari::rpc::PowAlgo* /*request*/, ::tari::rpc::NewBlockTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNewBlockTemplate(::grpc::ServerContext* context, ::tari::rpc::PowAlgo* request, ::grpc::ServerAsyncResponseWriter< ::tari::rpc::NewBlockTemplateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNewBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNewBlock() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetNewBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewBlock(::grpc::ServerContext* /*context*/, const ::tari::rpc::NewBlockTemplate* /*request*/, ::tari::rpc::GetNewBlockResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNewBlock(::grpc::ServerContext* context, ::tari::rpc::NewBlockTemplate* request, ::grpc::ServerAsyncResponseWriter< ::tari::rpc::GetNewBlockResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitBlock() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SubmitBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitBlock(::grpc::ServerContext* /*context*/, const ::tari::rpc::Block* /*request*/, ::tari::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitBlock(::grpc::ServerContext* context, ::tari::rpc::Block* request, ::grpc::ServerAsyncResponseWriter< ::tari::rpc::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSyncInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSyncInfo() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_GetSyncInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSyncInfo(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::SyncInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSyncInfo(::grpc::ServerContext* context, ::tari::rpc::Empty* request, ::grpc::ServerAsyncResponseWriter< ::tari::rpc::SyncInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTipInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTipInfo() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetTipInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTipInfo(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::TipInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTipInfo(::grpc::ServerContext* context, ::tari::rpc::Empty* request, ::grpc::ServerAsyncResponseWriter< ::tari::rpc::TipInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchKernels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchKernels() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_SearchKernels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchKernels(::grpc::ServerContext* /*context*/, const ::tari::rpc::SearchKernelsRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchKernels(::grpc::ServerContext* context, ::tari::rpc::SearchKernelsRequest* request, ::grpc::ServerAsyncWriter< ::tari::rpc::HistoricalBlock>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(14, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListHeaders<WithAsyncMethod_GetBlocks<WithAsyncMethod_GetCalcTiming<WithAsyncMethod_GetConstants<WithAsyncMethod_GetBlockSize<WithAsyncMethod_GetBlockFees<WithAsyncMethod_GetVersion<WithAsyncMethod_GetTokensInCirculation<WithAsyncMethod_GetNetworkDifficulty<WithAsyncMethod_GetNewBlockTemplate<WithAsyncMethod_GetNewBlock<WithAsyncMethod_SubmitBlock<WithAsyncMethod_GetSyncInfo<WithAsyncMethod_GetTipInfo<WithAsyncMethod_SearchKernels<Service > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListHeaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListHeaders() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::tari::rpc::ListHeadersRequest, ::tari::rpc::BlockHeader>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tari::rpc::ListHeadersRequest* request) { return this->ListHeaders(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_ListHeaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListHeaders(::grpc::ServerContext* /*context*/, const ::tari::rpc::ListHeadersRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::BlockHeader>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::tari::rpc::BlockHeader>* ListHeaders(
      ::grpc::CallbackServerContext* /*context*/, const ::tari::rpc::ListHeadersRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::tari::rpc::BlockHeader>* ListHeaders(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tari::rpc::ListHeadersRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBlocks() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::tari::rpc::GetBlocksRequest, ::tari::rpc::HistoricalBlock>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tari::rpc::GetBlocksRequest* request) { return this->GetBlocks(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlocks(::grpc::ServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::tari::rpc::HistoricalBlock>* GetBlocks(
      ::grpc::CallbackServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::tari::rpc::HistoricalBlock>* GetBlocks(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCalcTiming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCalcTiming() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::HeightRequest, ::tari::rpc::CalcTimingResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tari::rpc::HeightRequest* request, ::tari::rpc::CalcTimingResponse* response) { return this->GetCalcTiming(context, request, response); }));}
    void SetMessageAllocatorFor_GetCalcTiming(
        ::grpc::experimental::MessageAllocator< ::tari::rpc::HeightRequest, ::tari::rpc::CalcTimingResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::HeightRequest, ::tari::rpc::CalcTimingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCalcTiming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCalcTiming(::grpc::ServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/, ::tari::rpc::CalcTimingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCalcTiming(
      ::grpc::CallbackServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/, ::tari::rpc::CalcTimingResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCalcTiming(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/, ::tari::rpc::CalcTimingResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetConstants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetConstants() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::Empty, ::tari::rpc::ConsensusConstants>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tari::rpc::Empty* request, ::tari::rpc::ConsensusConstants* response) { return this->GetConstants(context, request, response); }));}
    void SetMessageAllocatorFor_GetConstants(
        ::grpc::experimental::MessageAllocator< ::tari::rpc::Empty, ::tari::rpc::ConsensusConstants>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::Empty, ::tari::rpc::ConsensusConstants>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetConstants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConstants(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::ConsensusConstants* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetConstants(
      ::grpc::CallbackServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::ConsensusConstants* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetConstants(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::ConsensusConstants* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBlockSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBlockSize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::BlockGroupRequest, ::tari::rpc::BlockGroupResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response) { return this->GetBlockSize(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockSize(
        ::grpc::experimental::MessageAllocator< ::tari::rpc::BlockGroupRequest, ::tari::rpc::BlockGroupResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::BlockGroupRequest, ::tari::rpc::BlockGroupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetBlockSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockSize(::grpc::ServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBlockSize(
      ::grpc::CallbackServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBlockSize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBlockFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBlockFees() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::BlockGroupRequest, ::tari::rpc::BlockGroupResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response) { return this->GetBlockFees(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockFees(
        ::grpc::experimental::MessageAllocator< ::tari::rpc::BlockGroupRequest, ::tari::rpc::BlockGroupResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::BlockGroupRequest, ::tari::rpc::BlockGroupResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetBlockFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockFees(::grpc::ServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBlockFees(
      ::grpc::CallbackServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBlockFees(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::Empty, ::tari::rpc::StringValue>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tari::rpc::Empty* request, ::tari::rpc::StringValue* response) { return this->GetVersion(context, request, response); }));}
    void SetMessageAllocatorFor_GetVersion(
        ::grpc::experimental::MessageAllocator< ::tari::rpc::Empty, ::tari::rpc::StringValue>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::Empty, ::tari::rpc::StringValue>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::StringValue* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::StringValue* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTokensInCirculation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTokensInCirculation() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::tari::rpc::GetBlocksRequest, ::tari::rpc::ValueAtHeightResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tari::rpc::GetBlocksRequest* request) { return this->GetTokensInCirculation(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetTokensInCirculation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokensInCirculation(::grpc::ServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::ValueAtHeightResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::tari::rpc::ValueAtHeightResponse>* GetTokensInCirculation(
      ::grpc::CallbackServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::tari::rpc::ValueAtHeightResponse>* GetTokensInCirculation(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNetworkDifficulty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNetworkDifficulty() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::tari::rpc::HeightRequest, ::tari::rpc::NetworkDifficultyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tari::rpc::HeightRequest* request) { return this->GetNetworkDifficulty(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetNetworkDifficulty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkDifficulty(::grpc::ServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::NetworkDifficultyResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::tari::rpc::NetworkDifficultyResponse>* GetNetworkDifficulty(
      ::grpc::CallbackServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::tari::rpc::NetworkDifficultyResponse>* GetNetworkDifficulty(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNewBlockTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNewBlockTemplate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::PowAlgo, ::tari::rpc::NewBlockTemplateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tari::rpc::PowAlgo* request, ::tari::rpc::NewBlockTemplateResponse* response) { return this->GetNewBlockTemplate(context, request, response); }));}
    void SetMessageAllocatorFor_GetNewBlockTemplate(
        ::grpc::experimental::MessageAllocator< ::tari::rpc::PowAlgo, ::tari::rpc::NewBlockTemplateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::PowAlgo, ::tari::rpc::NewBlockTemplateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNewBlockTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewBlockTemplate(::grpc::ServerContext* /*context*/, const ::tari::rpc::PowAlgo* /*request*/, ::tari::rpc::NewBlockTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNewBlockTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::tari::rpc::PowAlgo* /*request*/, ::tari::rpc::NewBlockTemplateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNewBlockTemplate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tari::rpc::PowAlgo* /*request*/, ::tari::rpc::NewBlockTemplateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetNewBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetNewBlock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::NewBlockTemplate, ::tari::rpc::GetNewBlockResult>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tari::rpc::NewBlockTemplate* request, ::tari::rpc::GetNewBlockResult* response) { return this->GetNewBlock(context, request, response); }));}
    void SetMessageAllocatorFor_GetNewBlock(
        ::grpc::experimental::MessageAllocator< ::tari::rpc::NewBlockTemplate, ::tari::rpc::GetNewBlockResult>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::NewBlockTemplate, ::tari::rpc::GetNewBlockResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetNewBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewBlock(::grpc::ServerContext* /*context*/, const ::tari::rpc::NewBlockTemplate* /*request*/, ::tari::rpc::GetNewBlockResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNewBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::tari::rpc::NewBlockTemplate* /*request*/, ::tari::rpc::GetNewBlockResult* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNewBlock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tari::rpc::NewBlockTemplate* /*request*/, ::tari::rpc::GetNewBlockResult* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubmitBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubmitBlock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::Block, ::tari::rpc::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tari::rpc::Block* request, ::tari::rpc::Empty* response) { return this->SubmitBlock(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitBlock(
        ::grpc::experimental::MessageAllocator< ::tari::rpc::Block, ::tari::rpc::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::Block, ::tari::rpc::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubmitBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitBlock(::grpc::ServerContext* /*context*/, const ::tari::rpc::Block* /*request*/, ::tari::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::tari::rpc::Block* /*request*/, ::tari::rpc::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitBlock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tari::rpc::Block* /*request*/, ::tari::rpc::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetSyncInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetSyncInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::Empty, ::tari::rpc::SyncInfoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tari::rpc::Empty* request, ::tari::rpc::SyncInfoResponse* response) { return this->GetSyncInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetSyncInfo(
        ::grpc::experimental::MessageAllocator< ::tari::rpc::Empty, ::tari::rpc::SyncInfoResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::Empty, ::tari::rpc::SyncInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetSyncInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSyncInfo(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::SyncInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSyncInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::SyncInfoResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSyncInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::SyncInfoResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTipInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTipInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::Empty, ::tari::rpc::TipInfoResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tari::rpc::Empty* request, ::tari::rpc::TipInfoResponse* response) { return this->GetTipInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetTipInfo(
        ::grpc::experimental::MessageAllocator< ::tari::rpc::Empty, ::tari::rpc::TipInfoResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::tari::rpc::Empty, ::tari::rpc::TipInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTipInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTipInfo(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::TipInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTipInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::TipInfoResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTipInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::TipInfoResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SearchKernels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SearchKernels() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::tari::rpc::SearchKernelsRequest, ::tari::rpc::HistoricalBlock>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::tari::rpc::SearchKernelsRequest* request) { return this->SearchKernels(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SearchKernels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchKernels(::grpc::ServerContext* /*context*/, const ::tari::rpc::SearchKernelsRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::tari::rpc::HistoricalBlock>* SearchKernels(
      ::grpc::CallbackServerContext* /*context*/, const ::tari::rpc::SearchKernelsRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::tari::rpc::HistoricalBlock>* SearchKernels(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::tari::rpc::SearchKernelsRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ListHeaders<ExperimentalWithCallbackMethod_GetBlocks<ExperimentalWithCallbackMethod_GetCalcTiming<ExperimentalWithCallbackMethod_GetConstants<ExperimentalWithCallbackMethod_GetBlockSize<ExperimentalWithCallbackMethod_GetBlockFees<ExperimentalWithCallbackMethod_GetVersion<ExperimentalWithCallbackMethod_GetTokensInCirculation<ExperimentalWithCallbackMethod_GetNetworkDifficulty<ExperimentalWithCallbackMethod_GetNewBlockTemplate<ExperimentalWithCallbackMethod_GetNewBlock<ExperimentalWithCallbackMethod_SubmitBlock<ExperimentalWithCallbackMethod_GetSyncInfo<ExperimentalWithCallbackMethod_GetTipInfo<ExperimentalWithCallbackMethod_SearchKernels<Service > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ListHeaders<ExperimentalWithCallbackMethod_GetBlocks<ExperimentalWithCallbackMethod_GetCalcTiming<ExperimentalWithCallbackMethod_GetConstants<ExperimentalWithCallbackMethod_GetBlockSize<ExperimentalWithCallbackMethod_GetBlockFees<ExperimentalWithCallbackMethod_GetVersion<ExperimentalWithCallbackMethod_GetTokensInCirculation<ExperimentalWithCallbackMethod_GetNetworkDifficulty<ExperimentalWithCallbackMethod_GetNewBlockTemplate<ExperimentalWithCallbackMethod_GetNewBlock<ExperimentalWithCallbackMethod_SubmitBlock<ExperimentalWithCallbackMethod_GetSyncInfo<ExperimentalWithCallbackMethod_GetTipInfo<ExperimentalWithCallbackMethod_SearchKernels<Service > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListHeaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListHeaders() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListHeaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListHeaders(::grpc::ServerContext* /*context*/, const ::tari::rpc::ListHeadersRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::BlockHeader>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlocks() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlocks(::grpc::ServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCalcTiming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCalcTiming() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCalcTiming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCalcTiming(::grpc::ServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/, ::tari::rpc::CalcTimingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetConstants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetConstants() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetConstants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConstants(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::ConsensusConstants* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockSize() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetBlockSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockSize(::grpc::ServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockFees() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetBlockFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockFees(::grpc::ServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetVersion() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTokensInCirculation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTokensInCirculation() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetTokensInCirculation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokensInCirculation(::grpc::ServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::ValueAtHeightResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNetworkDifficulty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNetworkDifficulty() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetNetworkDifficulty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkDifficulty(::grpc::ServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::NetworkDifficultyResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNewBlockTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNewBlockTemplate() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetNewBlockTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewBlockTemplate(::grpc::ServerContext* /*context*/, const ::tari::rpc::PowAlgo* /*request*/, ::tari::rpc::NewBlockTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNewBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNewBlock() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetNewBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewBlock(::grpc::ServerContext* /*context*/, const ::tari::rpc::NewBlockTemplate* /*request*/, ::tari::rpc::GetNewBlockResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitBlock() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SubmitBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitBlock(::grpc::ServerContext* /*context*/, const ::tari::rpc::Block* /*request*/, ::tari::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSyncInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSyncInfo() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_GetSyncInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSyncInfo(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::SyncInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTipInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTipInfo() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetTipInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTipInfo(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::TipInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SearchKernels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchKernels() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_SearchKernels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchKernels(::grpc::ServerContext* /*context*/, const ::tari::rpc::SearchKernelsRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListHeaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListHeaders() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListHeaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListHeaders(::grpc::ServerContext* /*context*/, const ::tari::rpc::ListHeadersRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::BlockHeader>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListHeaders(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlocks() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlocks(::grpc::ServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlocks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCalcTiming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCalcTiming() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCalcTiming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCalcTiming(::grpc::ServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/, ::tari::rpc::CalcTimingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCalcTiming(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConstants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetConstants() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetConstants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConstants(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::ConsensusConstants* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConstants(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockSize() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetBlockSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockSize(::grpc::ServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockFees() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetBlockFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockFees(::grpc::ServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockFees(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetVersion() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTokensInCirculation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTokensInCirculation() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetTokensInCirculation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokensInCirculation(::grpc::ServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::ValueAtHeightResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTokensInCirculation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNetworkDifficulty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNetworkDifficulty() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetNetworkDifficulty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkDifficulty(::grpc::ServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::NetworkDifficultyResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNetworkDifficulty(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNewBlockTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNewBlockTemplate() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetNewBlockTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewBlockTemplate(::grpc::ServerContext* /*context*/, const ::tari::rpc::PowAlgo* /*request*/, ::tari::rpc::NewBlockTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNewBlockTemplate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNewBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNewBlock() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetNewBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewBlock(::grpc::ServerContext* /*context*/, const ::tari::rpc::NewBlockTemplate* /*request*/, ::tari::rpc::GetNewBlockResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNewBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitBlock() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SubmitBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitBlock(::grpc::ServerContext* /*context*/, const ::tari::rpc::Block* /*request*/, ::tari::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSyncInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSyncInfo() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_GetSyncInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSyncInfo(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::SyncInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSyncInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTipInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTipInfo() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetTipInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTipInfo(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::TipInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTipInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchKernels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchKernels() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_SearchKernels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchKernels(::grpc::ServerContext* /*context*/, const ::tari::rpc::SearchKernelsRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchKernels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(14, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListHeaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListHeaders() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->ListHeaders(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListHeaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListHeaders(::grpc::ServerContext* /*context*/, const ::tari::rpc::ListHeadersRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::BlockHeader>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ListHeaders(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* ListHeaders(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBlocks() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetBlocks(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlocks(::grpc::ServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetBlocks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetBlocks(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCalcTiming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCalcTiming() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCalcTiming(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCalcTiming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCalcTiming(::grpc::ServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/, ::tari::rpc::CalcTimingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCalcTiming(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCalcTiming(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetConstants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetConstants() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetConstants(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetConstants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConstants(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::ConsensusConstants* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetConstants(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetConstants(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBlockSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBlockSize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockSize(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBlockSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockSize(::grpc::ServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBlockSize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBlockSize(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBlockFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBlockFees() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockFees(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBlockFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockFees(::grpc::ServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBlockFees(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBlockFees(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetVersion(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTokensInCirculation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTokensInCirculation() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetTokensInCirculation(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTokensInCirculation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTokensInCirculation(::grpc::ServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::ValueAtHeightResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetTokensInCirculation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetTokensInCirculation(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNetworkDifficulty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNetworkDifficulty() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetNetworkDifficulty(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNetworkDifficulty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNetworkDifficulty(::grpc::ServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::NetworkDifficultyResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetNetworkDifficulty(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetNetworkDifficulty(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNewBlockTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNewBlockTemplate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNewBlockTemplate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNewBlockTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewBlockTemplate(::grpc::ServerContext* /*context*/, const ::tari::rpc::PowAlgo* /*request*/, ::tari::rpc::NewBlockTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNewBlockTemplate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNewBlockTemplate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetNewBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetNewBlock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNewBlock(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetNewBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNewBlock(::grpc::ServerContext* /*context*/, const ::tari::rpc::NewBlockTemplate* /*request*/, ::tari::rpc::GetNewBlockResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetNewBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetNewBlock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubmitBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubmitBlock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitBlock(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubmitBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitBlock(::grpc::ServerContext* /*context*/, const ::tari::rpc::Block* /*request*/, ::tari::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubmitBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubmitBlock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetSyncInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetSyncInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSyncInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetSyncInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSyncInfo(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::SyncInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetSyncInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetSyncInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTipInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTipInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTipInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTipInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTipInfo(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::TipInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTipInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTipInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SearchKernels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SearchKernels() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SearchKernels(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SearchKernels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchKernels(::grpc::ServerContext* /*context*/, const ::tari::rpc::SearchKernelsRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SearchKernels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SearchKernels(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCalcTiming : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCalcTiming() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tari::rpc::HeightRequest, ::tari::rpc::CalcTimingResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tari::rpc::HeightRequest, ::tari::rpc::CalcTimingResponse>* streamer) {
                       return this->StreamedGetCalcTiming(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCalcTiming() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCalcTiming(::grpc::ServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/, ::tari::rpc::CalcTimingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCalcTiming(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tari::rpc::HeightRequest,::tari::rpc::CalcTimingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConstants : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetConstants() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tari::rpc::Empty, ::tari::rpc::ConsensusConstants>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tari::rpc::Empty, ::tari::rpc::ConsensusConstants>* streamer) {
                       return this->StreamedGetConstants(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetConstants() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConstants(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::ConsensusConstants* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConstants(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tari::rpc::Empty,::tari::rpc::ConsensusConstants>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockSize() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tari::rpc::BlockGroupRequest, ::tari::rpc::BlockGroupResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tari::rpc::BlockGroupRequest, ::tari::rpc::BlockGroupResponse>* streamer) {
                       return this->StreamedGetBlockSize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockSize(::grpc::ServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tari::rpc::BlockGroupRequest,::tari::rpc::BlockGroupResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockFees() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tari::rpc::BlockGroupRequest, ::tari::rpc::BlockGroupResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tari::rpc::BlockGroupRequest, ::tari::rpc::BlockGroupResponse>* streamer) {
                       return this->StreamedGetBlockFees(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockFees(::grpc::ServerContext* /*context*/, const ::tari::rpc::BlockGroupRequest* /*request*/, ::tari::rpc::BlockGroupResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockFees(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tari::rpc::BlockGroupRequest,::tari::rpc::BlockGroupResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetVersion() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tari::rpc::Empty, ::tari::rpc::StringValue>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tari::rpc::Empty, ::tari::rpc::StringValue>* streamer) {
                       return this->StreamedGetVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetVersion(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tari::rpc::Empty,::tari::rpc::StringValue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNewBlockTemplate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNewBlockTemplate() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tari::rpc::PowAlgo, ::tari::rpc::NewBlockTemplateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tari::rpc::PowAlgo, ::tari::rpc::NewBlockTemplateResponse>* streamer) {
                       return this->StreamedGetNewBlockTemplate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNewBlockTemplate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNewBlockTemplate(::grpc::ServerContext* /*context*/, const ::tari::rpc::PowAlgo* /*request*/, ::tari::rpc::NewBlockTemplateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNewBlockTemplate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tari::rpc::PowAlgo,::tari::rpc::NewBlockTemplateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNewBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNewBlock() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tari::rpc::NewBlockTemplate, ::tari::rpc::GetNewBlockResult>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tari::rpc::NewBlockTemplate, ::tari::rpc::GetNewBlockResult>* streamer) {
                       return this->StreamedGetNewBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNewBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNewBlock(::grpc::ServerContext* /*context*/, const ::tari::rpc::NewBlockTemplate* /*request*/, ::tari::rpc::GetNewBlockResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNewBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tari::rpc::NewBlockTemplate,::tari::rpc::GetNewBlockResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitBlock() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tari::rpc::Block, ::tari::rpc::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tari::rpc::Block, ::tari::rpc::Empty>* streamer) {
                       return this->StreamedSubmitBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitBlock(::grpc::ServerContext* /*context*/, const ::tari::rpc::Block* /*request*/, ::tari::rpc::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tari::rpc::Block,::tari::rpc::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSyncInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSyncInfo() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tari::rpc::Empty, ::tari::rpc::SyncInfoResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tari::rpc::Empty, ::tari::rpc::SyncInfoResponse>* streamer) {
                       return this->StreamedGetSyncInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSyncInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSyncInfo(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::SyncInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSyncInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tari::rpc::Empty,::tari::rpc::SyncInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTipInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTipInfo() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tari::rpc::Empty, ::tari::rpc::TipInfoResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::tari::rpc::Empty, ::tari::rpc::TipInfoResponse>* streamer) {
                       return this->StreamedGetTipInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTipInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTipInfo(::grpc::ServerContext* /*context*/, const ::tari::rpc::Empty* /*request*/, ::tari::rpc::TipInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTipInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tari::rpc::Empty,::tari::rpc::TipInfoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCalcTiming<WithStreamedUnaryMethod_GetConstants<WithStreamedUnaryMethod_GetBlockSize<WithStreamedUnaryMethod_GetBlockFees<WithStreamedUnaryMethod_GetVersion<WithStreamedUnaryMethod_GetNewBlockTemplate<WithStreamedUnaryMethod_GetNewBlock<WithStreamedUnaryMethod_SubmitBlock<WithStreamedUnaryMethod_GetSyncInfo<WithStreamedUnaryMethod_GetTipInfo<Service > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListHeaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ListHeaders() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::tari::rpc::ListHeadersRequest, ::tari::rpc::BlockHeader>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::tari::rpc::ListHeadersRequest, ::tari::rpc::BlockHeader>* streamer) {
                       return this->StreamedListHeaders(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ListHeaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListHeaders(::grpc::ServerContext* /*context*/, const ::tari::rpc::ListHeadersRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::BlockHeader>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListHeaders(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tari::rpc::ListHeadersRequest,::tari::rpc::BlockHeader>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetBlocks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetBlocks() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::tari::rpc::GetBlocksRequest, ::tari::rpc::HistoricalBlock>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::tari::rpc::GetBlocksRequest, ::tari::rpc::HistoricalBlock>* streamer) {
                       return this->StreamedGetBlocks(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetBlocks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlocks(::grpc::ServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetBlocks(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tari::rpc::GetBlocksRequest,::tari::rpc::HistoricalBlock>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetTokensInCirculation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetTokensInCirculation() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::tari::rpc::GetBlocksRequest, ::tari::rpc::ValueAtHeightResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::tari::rpc::GetBlocksRequest, ::tari::rpc::ValueAtHeightResponse>* streamer) {
                       return this->StreamedGetTokensInCirculation(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetTokensInCirculation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTokensInCirculation(::grpc::ServerContext* /*context*/, const ::tari::rpc::GetBlocksRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::ValueAtHeightResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetTokensInCirculation(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tari::rpc::GetBlocksRequest,::tari::rpc::ValueAtHeightResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetNetworkDifficulty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetNetworkDifficulty() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::tari::rpc::HeightRequest, ::tari::rpc::NetworkDifficultyResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::tari::rpc::HeightRequest, ::tari::rpc::NetworkDifficultyResponse>* streamer) {
                       return this->StreamedGetNetworkDifficulty(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetNetworkDifficulty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNetworkDifficulty(::grpc::ServerContext* /*context*/, const ::tari::rpc::HeightRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::NetworkDifficultyResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetNetworkDifficulty(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tari::rpc::HeightRequest,::tari::rpc::NetworkDifficultyResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SearchKernels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SearchKernels() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::tari::rpc::SearchKernelsRequest, ::tari::rpc::HistoricalBlock>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::tari::rpc::SearchKernelsRequest, ::tari::rpc::HistoricalBlock>* streamer) {
                       return this->StreamedSearchKernels(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SearchKernels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchKernels(::grpc::ServerContext* /*context*/, const ::tari::rpc::SearchKernelsRequest* /*request*/, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSearchKernels(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tari::rpc::SearchKernelsRequest,::tari::rpc::HistoricalBlock>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListHeaders<WithSplitStreamingMethod_GetBlocks<WithSplitStreamingMethod_GetTokensInCirculation<WithSplitStreamingMethod_GetNetworkDifficulty<WithSplitStreamingMethod_SearchKernels<Service > > > > > SplitStreamedService;
  typedef WithSplitStreamingMethod_ListHeaders<WithSplitStreamingMethod_GetBlocks<WithStreamedUnaryMethod_GetCalcTiming<WithStreamedUnaryMethod_GetConstants<WithStreamedUnaryMethod_GetBlockSize<WithStreamedUnaryMethod_GetBlockFees<WithStreamedUnaryMethod_GetVersion<WithSplitStreamingMethod_GetTokensInCirculation<WithSplitStreamingMethod_GetNetworkDifficulty<WithStreamedUnaryMethod_GetNewBlockTemplate<WithStreamedUnaryMethod_GetNewBlock<WithStreamedUnaryMethod_SubmitBlock<WithStreamedUnaryMethod_GetSyncInfo<WithStreamedUnaryMethod_GetTipInfo<WithSplitStreamingMethod_SearchKernels<Service > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace rpc
}  // namespace tari


#endif  // GRPC_base_5fnode_2eproto__INCLUDED
