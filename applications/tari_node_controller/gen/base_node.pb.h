// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_node.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_5fnode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_5fnode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_5fnode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_5fnode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_5fnode_2eproto;
namespace tari {
namespace rpc {
class BlockGroupRequest;
class BlockGroupRequestDefaultTypeInternal;
extern BlockGroupRequestDefaultTypeInternal _BlockGroupRequest_default_instance_;
class BlockGroupResponse;
class BlockGroupResponseDefaultTypeInternal;
extern BlockGroupResponseDefaultTypeInternal _BlockGroupResponse_default_instance_;
class CalcTimingResponse;
class CalcTimingResponseDefaultTypeInternal;
extern CalcTimingResponseDefaultTypeInternal _CalcTimingResponse_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class GetBlocksRequest;
class GetBlocksRequestDefaultTypeInternal;
extern GetBlocksRequestDefaultTypeInternal _GetBlocksRequest_default_instance_;
class GetBlocksResponse;
class GetBlocksResponseDefaultTypeInternal;
extern GetBlocksResponseDefaultTypeInternal _GetBlocksResponse_default_instance_;
class GetNewBlockResult;
class GetNewBlockResultDefaultTypeInternal;
extern GetNewBlockResultDefaultTypeInternal _GetNewBlockResult_default_instance_;
class HeightRequest;
class HeightRequestDefaultTypeInternal;
extern HeightRequestDefaultTypeInternal _HeightRequest_default_instance_;
class IntegerValue;
class IntegerValueDefaultTypeInternal;
extern IntegerValueDefaultTypeInternal _IntegerValue_default_instance_;
class ListHeadersRequest;
class ListHeadersRequestDefaultTypeInternal;
extern ListHeadersRequestDefaultTypeInternal _ListHeadersRequest_default_instance_;
class MetaData;
class MetaDataDefaultTypeInternal;
extern MetaDataDefaultTypeInternal _MetaData_default_instance_;
class MinerData;
class MinerDataDefaultTypeInternal;
extern MinerDataDefaultTypeInternal _MinerData_default_instance_;
class NetworkDifficultyResponse;
class NetworkDifficultyResponseDefaultTypeInternal;
extern NetworkDifficultyResponseDefaultTypeInternal _NetworkDifficultyResponse_default_instance_;
class NewBlockTemplateResponse;
class NewBlockTemplateResponseDefaultTypeInternal;
extern NewBlockTemplateResponseDefaultTypeInternal _NewBlockTemplateResponse_default_instance_;
class SearchKernelsRequest;
class SearchKernelsRequestDefaultTypeInternal;
extern SearchKernelsRequestDefaultTypeInternal _SearchKernelsRequest_default_instance_;
class StringValue;
class StringValueDefaultTypeInternal;
extern StringValueDefaultTypeInternal _StringValue_default_instance_;
class SyncInfoResponse;
class SyncInfoResponseDefaultTypeInternal;
extern SyncInfoResponseDefaultTypeInternal _SyncInfoResponse_default_instance_;
class TipInfoResponse;
class TipInfoResponseDefaultTypeInternal;
extern TipInfoResponseDefaultTypeInternal _TipInfoResponse_default_instance_;
class ValueAtHeightResponse;
class ValueAtHeightResponseDefaultTypeInternal;
extern ValueAtHeightResponseDefaultTypeInternal _ValueAtHeightResponse_default_instance_;
}  // namespace rpc
}  // namespace tari
PROTOBUF_NAMESPACE_OPEN
template<> ::tari::rpc::BlockGroupRequest* Arena::CreateMaybeMessage<::tari::rpc::BlockGroupRequest>(Arena*);
template<> ::tari::rpc::BlockGroupResponse* Arena::CreateMaybeMessage<::tari::rpc::BlockGroupResponse>(Arena*);
template<> ::tari::rpc::CalcTimingResponse* Arena::CreateMaybeMessage<::tari::rpc::CalcTimingResponse>(Arena*);
template<> ::tari::rpc::Empty* Arena::CreateMaybeMessage<::tari::rpc::Empty>(Arena*);
template<> ::tari::rpc::GetBlocksRequest* Arena::CreateMaybeMessage<::tari::rpc::GetBlocksRequest>(Arena*);
template<> ::tari::rpc::GetBlocksResponse* Arena::CreateMaybeMessage<::tari::rpc::GetBlocksResponse>(Arena*);
template<> ::tari::rpc::GetNewBlockResult* Arena::CreateMaybeMessage<::tari::rpc::GetNewBlockResult>(Arena*);
template<> ::tari::rpc::HeightRequest* Arena::CreateMaybeMessage<::tari::rpc::HeightRequest>(Arena*);
template<> ::tari::rpc::IntegerValue* Arena::CreateMaybeMessage<::tari::rpc::IntegerValue>(Arena*);
template<> ::tari::rpc::ListHeadersRequest* Arena::CreateMaybeMessage<::tari::rpc::ListHeadersRequest>(Arena*);
template<> ::tari::rpc::MetaData* Arena::CreateMaybeMessage<::tari::rpc::MetaData>(Arena*);
template<> ::tari::rpc::MinerData* Arena::CreateMaybeMessage<::tari::rpc::MinerData>(Arena*);
template<> ::tari::rpc::NetworkDifficultyResponse* Arena::CreateMaybeMessage<::tari::rpc::NetworkDifficultyResponse>(Arena*);
template<> ::tari::rpc::NewBlockTemplateResponse* Arena::CreateMaybeMessage<::tari::rpc::NewBlockTemplateResponse>(Arena*);
template<> ::tari::rpc::SearchKernelsRequest* Arena::CreateMaybeMessage<::tari::rpc::SearchKernelsRequest>(Arena*);
template<> ::tari::rpc::StringValue* Arena::CreateMaybeMessage<::tari::rpc::StringValue>(Arena*);
template<> ::tari::rpc::SyncInfoResponse* Arena::CreateMaybeMessage<::tari::rpc::SyncInfoResponse>(Arena*);
template<> ::tari::rpc::TipInfoResponse* Arena::CreateMaybeMessage<::tari::rpc::TipInfoResponse>(Arena*);
template<> ::tari::rpc::ValueAtHeightResponse* Arena::CreateMaybeMessage<::tari::rpc::ValueAtHeightResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tari {
namespace rpc {

enum CalcType : int {
  MEAN = 0,
  MEDIAN = 1,
  QUANTILE = 2,
  QUARTILE = 3,
  CalcType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CalcType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CalcType_IsValid(int value);
constexpr CalcType CalcType_MIN = MEAN;
constexpr CalcType CalcType_MAX = QUARTILE;
constexpr int CalcType_ARRAYSIZE = CalcType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalcType_descriptor();
template<typename T>
inline const std::string& CalcType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CalcType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CalcType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CalcType_descriptor(), enum_t_value);
}
inline bool CalcType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CalcType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CalcType>(
    CalcType_descriptor(), name, value);
}
enum Sorting : int {
  SORTING_DESC = 0,
  SORTING_ASC = 1,
  Sorting_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Sorting_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Sorting_IsValid(int value);
constexpr Sorting Sorting_MIN = SORTING_DESC;
constexpr Sorting Sorting_MAX = SORTING_ASC;
constexpr int Sorting_ARRAYSIZE = Sorting_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sorting_descriptor();
template<typename T>
inline const std::string& Sorting_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Sorting>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Sorting_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Sorting_descriptor(), enum_t_value);
}
inline bool Sorting_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Sorting* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Sorting>(
    Sorting_descriptor(), name, value);
}
// ===================================================================

class TipInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.TipInfoResponse) */ {
 public:
  inline TipInfoResponse() : TipInfoResponse(nullptr) {}
  virtual ~TipInfoResponse();

  TipInfoResponse(const TipInfoResponse& from);
  TipInfoResponse(TipInfoResponse&& from) noexcept
    : TipInfoResponse() {
    *this = ::std::move(from);
  }

  inline TipInfoResponse& operator=(const TipInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TipInfoResponse& operator=(TipInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TipInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TipInfoResponse* internal_default_instance() {
    return reinterpret_cast<const TipInfoResponse*>(
               &_TipInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TipInfoResponse& a, TipInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TipInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TipInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TipInfoResponse* New() const final {
    return CreateMaybeMessage<TipInfoResponse>(nullptr);
  }

  TipInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TipInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TipInfoResponse& from);
  void MergeFrom(const TipInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TipInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.TipInfoResponse";
  }
  protected:
  explicit TipInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .tari.rpc.MetaData metadata = 1;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::tari::rpc::MetaData& metadata() const;
  ::tari::rpc::MetaData* release_metadata();
  ::tari::rpc::MetaData* mutable_metadata();
  void set_allocated_metadata(::tari::rpc::MetaData* metadata);
  private:
  const ::tari::rpc::MetaData& _internal_metadata() const;
  ::tari::rpc::MetaData* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::tari::rpc::MetaData* metadata);
  ::tari::rpc::MetaData* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:tari.rpc.TipInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tari::rpc::MetaData* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class NewBlockTemplateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.NewBlockTemplateResponse) */ {
 public:
  inline NewBlockTemplateResponse() : NewBlockTemplateResponse(nullptr) {}
  virtual ~NewBlockTemplateResponse();

  NewBlockTemplateResponse(const NewBlockTemplateResponse& from);
  NewBlockTemplateResponse(NewBlockTemplateResponse&& from) noexcept
    : NewBlockTemplateResponse() {
    *this = ::std::move(from);
  }

  inline NewBlockTemplateResponse& operator=(const NewBlockTemplateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewBlockTemplateResponse& operator=(NewBlockTemplateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewBlockTemplateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewBlockTemplateResponse* internal_default_instance() {
    return reinterpret_cast<const NewBlockTemplateResponse*>(
               &_NewBlockTemplateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NewBlockTemplateResponse& a, NewBlockTemplateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NewBlockTemplateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewBlockTemplateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewBlockTemplateResponse* New() const final {
    return CreateMaybeMessage<NewBlockTemplateResponse>(nullptr);
  }

  NewBlockTemplateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewBlockTemplateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewBlockTemplateResponse& from);
  void MergeFrom(const NewBlockTemplateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewBlockTemplateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.NewBlockTemplateResponse";
  }
  protected:
  explicit NewBlockTemplateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewBlockTemplateFieldNumber = 1,
    kBlockRewardFieldNumber = 2,
  };
  // .tari.rpc.NewBlockTemplate new_block_template = 1;
  bool has_new_block_template() const;
  private:
  bool _internal_has_new_block_template() const;
  public:
  void clear_new_block_template();
  const ::tari::rpc::NewBlockTemplate& new_block_template() const;
  ::tari::rpc::NewBlockTemplate* release_new_block_template();
  ::tari::rpc::NewBlockTemplate* mutable_new_block_template();
  void set_allocated_new_block_template(::tari::rpc::NewBlockTemplate* new_block_template);
  private:
  const ::tari::rpc::NewBlockTemplate& _internal_new_block_template() const;
  ::tari::rpc::NewBlockTemplate* _internal_mutable_new_block_template();
  public:
  void unsafe_arena_set_allocated_new_block_template(
      ::tari::rpc::NewBlockTemplate* new_block_template);
  ::tari::rpc::NewBlockTemplate* unsafe_arena_release_new_block_template();

  // uint64 block_reward = 2;
  void clear_block_reward();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_reward() const;
  void set_block_reward(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_reward() const;
  void _internal_set_block_reward(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.NewBlockTemplateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tari::rpc::NewBlockTemplate* new_block_template_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tari.rpc.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class NetworkDifficultyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.NetworkDifficultyResponse) */ {
 public:
  inline NetworkDifficultyResponse() : NetworkDifficultyResponse(nullptr) {}
  virtual ~NetworkDifficultyResponse();

  NetworkDifficultyResponse(const NetworkDifficultyResponse& from);
  NetworkDifficultyResponse(NetworkDifficultyResponse&& from) noexcept
    : NetworkDifficultyResponse() {
    *this = ::std::move(from);
  }

  inline NetworkDifficultyResponse& operator=(const NetworkDifficultyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkDifficultyResponse& operator=(NetworkDifficultyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkDifficultyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkDifficultyResponse* internal_default_instance() {
    return reinterpret_cast<const NetworkDifficultyResponse*>(
               &_NetworkDifficultyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NetworkDifficultyResponse& a, NetworkDifficultyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkDifficultyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkDifficultyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkDifficultyResponse* New() const final {
    return CreateMaybeMessage<NetworkDifficultyResponse>(nullptr);
  }

  NetworkDifficultyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkDifficultyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkDifficultyResponse& from);
  void MergeFrom(const NetworkDifficultyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkDifficultyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.NetworkDifficultyResponse";
  }
  protected:
  explicit NetworkDifficultyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDifficultyFieldNumber = 1,
    kEstimatedHashRateFieldNumber = 2,
    kHeightFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // uint64 difficulty = 1;
  void clear_difficulty();
  ::PROTOBUF_NAMESPACE_ID::uint64 difficulty() const;
  void set_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_difficulty() const;
  void _internal_set_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 estimated_hash_rate = 2;
  void clear_estimated_hash_rate();
  ::PROTOBUF_NAMESPACE_ID::uint64 estimated_hash_rate() const;
  void set_estimated_hash_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_estimated_hash_rate() const;
  void _internal_set_estimated_hash_rate(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.NetworkDifficultyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 difficulty_;
  ::PROTOBUF_NAMESPACE_ID::uint64 estimated_hash_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class ValueAtHeightResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.ValueAtHeightResponse) */ {
 public:
  inline ValueAtHeightResponse() : ValueAtHeightResponse(nullptr) {}
  virtual ~ValueAtHeightResponse();

  ValueAtHeightResponse(const ValueAtHeightResponse& from);
  ValueAtHeightResponse(ValueAtHeightResponse&& from) noexcept
    : ValueAtHeightResponse() {
    *this = ::std::move(from);
  }

  inline ValueAtHeightResponse& operator=(const ValueAtHeightResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueAtHeightResponse& operator=(ValueAtHeightResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ValueAtHeightResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueAtHeightResponse* internal_default_instance() {
    return reinterpret_cast<const ValueAtHeightResponse*>(
               &_ValueAtHeightResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ValueAtHeightResponse& a, ValueAtHeightResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValueAtHeightResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueAtHeightResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValueAtHeightResponse* New() const final {
    return CreateMaybeMessage<ValueAtHeightResponse>(nullptr);
  }

  ValueAtHeightResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValueAtHeightResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ValueAtHeightResponse& from);
  void MergeFrom(const ValueAtHeightResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueAtHeightResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.ValueAtHeightResponse";
  }
  protected:
  explicit ValueAtHeightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // uint64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.ValueAtHeightResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class IntegerValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.IntegerValue) */ {
 public:
  inline IntegerValue() : IntegerValue(nullptr) {}
  virtual ~IntegerValue();

  IntegerValue(const IntegerValue& from);
  IntegerValue(IntegerValue&& from) noexcept
    : IntegerValue() {
    *this = ::std::move(from);
  }

  inline IntegerValue& operator=(const IntegerValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegerValue& operator=(IntegerValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IntegerValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntegerValue* internal_default_instance() {
    return reinterpret_cast<const IntegerValue*>(
               &_IntegerValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IntegerValue& a, IntegerValue& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegerValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegerValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntegerValue* New() const final {
    return CreateMaybeMessage<IntegerValue>(nullptr);
  }

  IntegerValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntegerValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IntegerValue& from);
  void MergeFrom(const IntegerValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntegerValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.IntegerValue";
  }
  protected:
  explicit IntegerValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.IntegerValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class StringValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.StringValue) */ {
 public:
  inline StringValue() : StringValue(nullptr) {}
  virtual ~StringValue();

  StringValue(const StringValue& from);
  StringValue(StringValue&& from) noexcept
    : StringValue() {
    *this = ::std::move(from);
  }

  inline StringValue& operator=(const StringValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringValue& operator=(StringValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringValue* internal_default_instance() {
    return reinterpret_cast<const StringValue*>(
               &_StringValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StringValue& a, StringValue& b) {
    a.Swap(&b);
  }
  inline void Swap(StringValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringValue* New() const final {
    return CreateMaybeMessage<StringValue>(nullptr);
  }

  StringValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringValue& from);
  void MergeFrom(const StringValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.StringValue";
  }
  protected:
  explicit StringValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.StringValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class BlockGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.BlockGroupRequest) */ {
 public:
  inline BlockGroupRequest() : BlockGroupRequest(nullptr) {}
  virtual ~BlockGroupRequest();

  BlockGroupRequest(const BlockGroupRequest& from);
  BlockGroupRequest(BlockGroupRequest&& from) noexcept
    : BlockGroupRequest() {
    *this = ::std::move(from);
  }

  inline BlockGroupRequest& operator=(const BlockGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockGroupRequest& operator=(BlockGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockGroupRequest* internal_default_instance() {
    return reinterpret_cast<const BlockGroupRequest*>(
               &_BlockGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BlockGroupRequest& a, BlockGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockGroupRequest* New() const final {
    return CreateMaybeMessage<BlockGroupRequest>(nullptr);
  }

  BlockGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockGroupRequest& from);
  void MergeFrom(const BlockGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.BlockGroupRequest";
  }
  protected:
  explicit BlockGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromTipFieldNumber = 1,
    kStartHeightFieldNumber = 2,
    kEndHeightFieldNumber = 3,
    kCalcTypeFieldNumber = 4,
  };
  // uint64 from_tip = 1;
  void clear_from_tip();
  ::PROTOBUF_NAMESPACE_ID::uint64 from_tip() const;
  void set_from_tip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_from_tip() const;
  void _internal_set_from_tip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 start_height = 2;
  void clear_start_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_height() const;
  void set_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_height() const;
  void _internal_set_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end_height = 3;
  void clear_end_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_height() const;
  void set_end_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_height() const;
  void _internal_set_end_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .tari.rpc.CalcType calc_type = 4;
  void clear_calc_type();
  ::tari::rpc::CalcType calc_type() const;
  void set_calc_type(::tari::rpc::CalcType value);
  private:
  ::tari::rpc::CalcType _internal_calc_type() const;
  void _internal_set_calc_type(::tari::rpc::CalcType value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.BlockGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_tip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_height_;
  int calc_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class BlockGroupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.BlockGroupResponse) */ {
 public:
  inline BlockGroupResponse() : BlockGroupResponse(nullptr) {}
  virtual ~BlockGroupResponse();

  BlockGroupResponse(const BlockGroupResponse& from);
  BlockGroupResponse(BlockGroupResponse&& from) noexcept
    : BlockGroupResponse() {
    *this = ::std::move(from);
  }

  inline BlockGroupResponse& operator=(const BlockGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockGroupResponse& operator=(BlockGroupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockGroupResponse* internal_default_instance() {
    return reinterpret_cast<const BlockGroupResponse*>(
               &_BlockGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BlockGroupResponse& a, BlockGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockGroupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockGroupResponse* New() const final {
    return CreateMaybeMessage<BlockGroupResponse>(nullptr);
  }

  BlockGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockGroupResponse& from);
  void MergeFrom(const BlockGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.BlockGroupResponse";
  }
  protected:
  explicit BlockGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kCalcTypeFieldNumber = 2,
  };
  // repeated double value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  double _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_value() const;
  void _internal_add_value(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_value();
  public:
  double value(int index) const;
  void set_value(int index, double value);
  void add_value(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_value();

  // .tari.rpc.CalcType calc_type = 2;
  void clear_calc_type();
  ::tari::rpc::CalcType calc_type() const;
  void set_calc_type(::tari::rpc::CalcType value);
  private:
  ::tari::rpc::CalcType _internal_calc_type() const;
  void _internal_set_calc_type(::tari::rpc::CalcType value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.BlockGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > value_;
  mutable std::atomic<int> _value_cached_byte_size_;
  int calc_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class HeightRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.HeightRequest) */ {
 public:
  inline HeightRequest() : HeightRequest(nullptr) {}
  virtual ~HeightRequest();

  HeightRequest(const HeightRequest& from);
  HeightRequest(HeightRequest&& from) noexcept
    : HeightRequest() {
    *this = ::std::move(from);
  }

  inline HeightRequest& operator=(const HeightRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeightRequest& operator=(HeightRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeightRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeightRequest* internal_default_instance() {
    return reinterpret_cast<const HeightRequest*>(
               &_HeightRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(HeightRequest& a, HeightRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HeightRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeightRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeightRequest* New() const final {
    return CreateMaybeMessage<HeightRequest>(nullptr);
  }

  HeightRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeightRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeightRequest& from);
  void MergeFrom(const HeightRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeightRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.HeightRequest";
  }
  protected:
  explicit HeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromTipFieldNumber = 1,
    kStartHeightFieldNumber = 2,
    kEndHeightFieldNumber = 3,
  };
  // uint64 from_tip = 1;
  void clear_from_tip();
  ::PROTOBUF_NAMESPACE_ID::uint64 from_tip() const;
  void set_from_tip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_from_tip() const;
  void _internal_set_from_tip(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 start_height = 2;
  void clear_start_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_height() const;
  void set_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_height() const;
  void _internal_set_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end_height = 3;
  void clear_end_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_height() const;
  void set_end_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_height() const;
  void _internal_set_end_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.HeightRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_tip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class CalcTimingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.CalcTimingResponse) */ {
 public:
  inline CalcTimingResponse() : CalcTimingResponse(nullptr) {}
  virtual ~CalcTimingResponse();

  CalcTimingResponse(const CalcTimingResponse& from);
  CalcTimingResponse(CalcTimingResponse&& from) noexcept
    : CalcTimingResponse() {
    *this = ::std::move(from);
  }

  inline CalcTimingResponse& operator=(const CalcTimingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalcTimingResponse& operator=(CalcTimingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalcTimingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalcTimingResponse* internal_default_instance() {
    return reinterpret_cast<const CalcTimingResponse*>(
               &_CalcTimingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CalcTimingResponse& a, CalcTimingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalcTimingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalcTimingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalcTimingResponse* New() const final {
    return CreateMaybeMessage<CalcTimingResponse>(nullptr);
  }

  CalcTimingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalcTimingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalcTimingResponse& from);
  void MergeFrom(const CalcTimingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalcTimingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.CalcTimingResponse";
  }
  protected:
  explicit CalcTimingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxFieldNumber = 1,
    kMinFieldNumber = 2,
    kAvgFieldNumber = 3,
  };
  // uint64 max = 1;
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::uint64 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 min = 2;
  void clear_min();
  ::PROTOBUF_NAMESPACE_ID::uint64 min() const;
  void set_min(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min() const;
  void _internal_set_min(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double avg = 3;
  void clear_avg();
  double avg() const;
  void set_avg(double value);
  private:
  double _internal_avg() const;
  void _internal_set_avg(double value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.CalcTimingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_;
  double avg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class ListHeadersRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.ListHeadersRequest) */ {
 public:
  inline ListHeadersRequest() : ListHeadersRequest(nullptr) {}
  virtual ~ListHeadersRequest();

  ListHeadersRequest(const ListHeadersRequest& from);
  ListHeadersRequest(ListHeadersRequest&& from) noexcept
    : ListHeadersRequest() {
    *this = ::std::move(from);
  }

  inline ListHeadersRequest& operator=(const ListHeadersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListHeadersRequest& operator=(ListHeadersRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListHeadersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListHeadersRequest* internal_default_instance() {
    return reinterpret_cast<const ListHeadersRequest*>(
               &_ListHeadersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ListHeadersRequest& a, ListHeadersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListHeadersRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListHeadersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListHeadersRequest* New() const final {
    return CreateMaybeMessage<ListHeadersRequest>(nullptr);
  }

  ListHeadersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListHeadersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListHeadersRequest& from);
  void MergeFrom(const ListHeadersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListHeadersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.ListHeadersRequest";
  }
  protected:
  explicit ListHeadersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromHeightFieldNumber = 1,
    kNumHeadersFieldNumber = 2,
    kSortingFieldNumber = 3,
  };
  // uint64 from_height = 1;
  void clear_from_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 from_height() const;
  void set_from_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_from_height() const;
  void _internal_set_from_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 num_headers = 2;
  void clear_num_headers();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_headers() const;
  void set_num_headers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_headers() const;
  void _internal_set_num_headers(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .tari.rpc.Sorting sorting = 3;
  void clear_sorting();
  ::tari::rpc::Sorting sorting() const;
  void set_sorting(::tari::rpc::Sorting value);
  private:
  ::tari::rpc::Sorting _internal_sorting() const;
  void _internal_set_sorting(::tari::rpc::Sorting value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.ListHeadersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_headers_;
  int sorting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class GetBlocksRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.GetBlocksRequest) */ {
 public:
  inline GetBlocksRequest() : GetBlocksRequest(nullptr) {}
  virtual ~GetBlocksRequest();

  GetBlocksRequest(const GetBlocksRequest& from);
  GetBlocksRequest(GetBlocksRequest&& from) noexcept
    : GetBlocksRequest() {
    *this = ::std::move(from);
  }

  inline GetBlocksRequest& operator=(const GetBlocksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlocksRequest& operator=(GetBlocksRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlocksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlocksRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlocksRequest*>(
               &_GetBlocksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetBlocksRequest& a, GetBlocksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlocksRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlocksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlocksRequest* New() const final {
    return CreateMaybeMessage<GetBlocksRequest>(nullptr);
  }

  GetBlocksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlocksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlocksRequest& from);
  void MergeFrom(const GetBlocksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlocksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.GetBlocksRequest";
  }
  protected:
  explicit GetBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightsFieldNumber = 1,
  };
  // repeated uint64 heights = 1;
  int heights_size() const;
  private:
  int _internal_heights_size() const;
  public:
  void clear_heights();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_heights(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_heights() const;
  void _internal_add_heights(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_heights();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 heights(int index) const;
  void set_heights(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_heights(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      heights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_heights();

  // @@protoc_insertion_point(class_scope:tari.rpc.GetBlocksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > heights_;
  mutable std::atomic<int> _heights_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class GetBlocksResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.GetBlocksResponse) */ {
 public:
  inline GetBlocksResponse() : GetBlocksResponse(nullptr) {}
  virtual ~GetBlocksResponse();

  GetBlocksResponse(const GetBlocksResponse& from);
  GetBlocksResponse(GetBlocksResponse&& from) noexcept
    : GetBlocksResponse() {
    *this = ::std::move(from);
  }

  inline GetBlocksResponse& operator=(const GetBlocksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlocksResponse& operator=(GetBlocksResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlocksResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlocksResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlocksResponse*>(
               &_GetBlocksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetBlocksResponse& a, GetBlocksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlocksResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlocksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlocksResponse* New() const final {
    return CreateMaybeMessage<GetBlocksResponse>(nullptr);
  }

  GetBlocksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlocksResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlocksResponse& from);
  void MergeFrom(const GetBlocksResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlocksResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.GetBlocksResponse";
  }
  protected:
  explicit GetBlocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 1,
  };
  // repeated .tari.rpc.HistoricalBlock blocks = 1;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::tari::rpc::HistoricalBlock* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::HistoricalBlock >*
      mutable_blocks();
  private:
  const ::tari::rpc::HistoricalBlock& _internal_blocks(int index) const;
  ::tari::rpc::HistoricalBlock* _internal_add_blocks();
  public:
  const ::tari::rpc::HistoricalBlock& blocks(int index) const;
  ::tari::rpc::HistoricalBlock* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::HistoricalBlock >&
      blocks() const;

  // @@protoc_insertion_point(class_scope:tari.rpc.GetBlocksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::HistoricalBlock > blocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class MetaData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.MetaData) */ {
 public:
  inline MetaData() : MetaData(nullptr) {}
  virtual ~MetaData();

  MetaData(const MetaData& from);
  MetaData(MetaData&& from) noexcept
    : MetaData() {
    *this = ::std::move(from);
  }

  inline MetaData& operator=(const MetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaData& operator=(MetaData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetaData* internal_default_instance() {
    return reinterpret_cast<const MetaData*>(
               &_MetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MetaData& a, MetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetaData* New() const final {
    return CreateMaybeMessage<MetaData>(nullptr);
  }

  MetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetaData& from);
  void MergeFrom(const MetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.MetaData";
  }
  protected:
  explicit MetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBestBlockFieldNumber = 2,
    kHeightOfLongestChainFieldNumber = 1,
    kPruningHorizonFieldNumber = 4,
    kAccumulatedDifficultyFieldNumber = 5,
  };
  // bytes best_block = 2;
  void clear_best_block();
  const std::string& best_block() const;
  void set_best_block(const std::string& value);
  void set_best_block(std::string&& value);
  void set_best_block(const char* value);
  void set_best_block(const void* value, size_t size);
  std::string* mutable_best_block();
  std::string* release_best_block();
  void set_allocated_best_block(std::string* best_block);
  private:
  const std::string& _internal_best_block() const;
  void _internal_set_best_block(const std::string& value);
  std::string* _internal_mutable_best_block();
  public:

  // uint64 height_of_longest_chain = 1;
  void clear_height_of_longest_chain();
  ::PROTOBUF_NAMESPACE_ID::uint64 height_of_longest_chain() const;
  void set_height_of_longest_chain(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height_of_longest_chain() const;
  void _internal_set_height_of_longest_chain(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pruning_horizon = 4;
  void clear_pruning_horizon();
  ::PROTOBUF_NAMESPACE_ID::uint64 pruning_horizon() const;
  void set_pruning_horizon(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pruning_horizon() const;
  void _internal_set_pruning_horizon(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 accumulated_difficulty = 5;
  void clear_accumulated_difficulty();
  ::PROTOBUF_NAMESPACE_ID::uint64 accumulated_difficulty() const;
  void set_accumulated_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accumulated_difficulty() const;
  void _internal_set_accumulated_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.MetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr best_block_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_of_longest_chain_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pruning_horizon_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accumulated_difficulty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class SyncInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.SyncInfoResponse) */ {
 public:
  inline SyncInfoResponse() : SyncInfoResponse(nullptr) {}
  virtual ~SyncInfoResponse();

  SyncInfoResponse(const SyncInfoResponse& from);
  SyncInfoResponse(SyncInfoResponse&& from) noexcept
    : SyncInfoResponse() {
    *this = ::std::move(from);
  }

  inline SyncInfoResponse& operator=(const SyncInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncInfoResponse& operator=(SyncInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SyncInfoResponse*>(
               &_SyncInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SyncInfoResponse& a, SyncInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncInfoResponse* New() const final {
    return CreateMaybeMessage<SyncInfoResponse>(nullptr);
  }

  SyncInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncInfoResponse& from);
  void MergeFrom(const SyncInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.SyncInfoResponse";
  }
  protected:
  explicit SyncInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerNodeIdFieldNumber = 3,
    kTipHeightFieldNumber = 1,
    kLocalHeightFieldNumber = 2,
  };
  // repeated bytes peer_node_id = 3;
  int peer_node_id_size() const;
  private:
  int _internal_peer_node_id_size() const;
  public:
  void clear_peer_node_id();
  const std::string& peer_node_id(int index) const;
  std::string* mutable_peer_node_id(int index);
  void set_peer_node_id(int index, const std::string& value);
  void set_peer_node_id(int index, std::string&& value);
  void set_peer_node_id(int index, const char* value);
  void set_peer_node_id(int index, const void* value, size_t size);
  std::string* add_peer_node_id();
  void add_peer_node_id(const std::string& value);
  void add_peer_node_id(std::string&& value);
  void add_peer_node_id(const char* value);
  void add_peer_node_id(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& peer_node_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_peer_node_id();
  private:
  const std::string& _internal_peer_node_id(int index) const;
  std::string* _internal_add_peer_node_id();
  public:

  // uint64 tip_height = 1;
  void clear_tip_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 tip_height() const;
  void set_tip_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tip_height() const;
  void _internal_set_tip_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 local_height = 2;
  void clear_local_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 local_height() const;
  void set_local_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_local_height() const;
  void _internal_set_local_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.SyncInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> peer_node_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tip_height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 local_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class GetNewBlockResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.GetNewBlockResult) */ {
 public:
  inline GetNewBlockResult() : GetNewBlockResult(nullptr) {}
  virtual ~GetNewBlockResult();

  GetNewBlockResult(const GetNewBlockResult& from);
  GetNewBlockResult(GetNewBlockResult&& from) noexcept
    : GetNewBlockResult() {
    *this = ::std::move(from);
  }

  inline GetNewBlockResult& operator=(const GetNewBlockResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNewBlockResult& operator=(GetNewBlockResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNewBlockResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNewBlockResult* internal_default_instance() {
    return reinterpret_cast<const GetNewBlockResult*>(
               &_GetNewBlockResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetNewBlockResult& a, GetNewBlockResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNewBlockResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNewBlockResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNewBlockResult* New() const final {
    return CreateMaybeMessage<GetNewBlockResult>(nullptr);
  }

  GetNewBlockResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNewBlockResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNewBlockResult& from);
  void MergeFrom(const GetNewBlockResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNewBlockResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.GetNewBlockResult";
  }
  protected:
  explicit GetNewBlockResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockHashFieldNumber = 1,
    kBlockFieldNumber = 2,
    kMinerDataFieldNumber = 3,
  };
  // bytes block_hash = 1;
  void clear_block_hash();
  const std::string& block_hash() const;
  void set_block_hash(const std::string& value);
  void set_block_hash(std::string&& value);
  void set_block_hash(const char* value);
  void set_block_hash(const void* value, size_t size);
  std::string* mutable_block_hash();
  std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // .tari.rpc.Block block = 2;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::tari::rpc::Block& block() const;
  ::tari::rpc::Block* release_block();
  ::tari::rpc::Block* mutable_block();
  void set_allocated_block(::tari::rpc::Block* block);
  private:
  const ::tari::rpc::Block& _internal_block() const;
  ::tari::rpc::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::tari::rpc::Block* block);
  ::tari::rpc::Block* unsafe_arena_release_block();

  // .tari.rpc.MinerData miner_data = 3;
  bool has_miner_data() const;
  private:
  bool _internal_has_miner_data() const;
  public:
  void clear_miner_data();
  const ::tari::rpc::MinerData& miner_data() const;
  ::tari::rpc::MinerData* release_miner_data();
  ::tari::rpc::MinerData* mutable_miner_data();
  void set_allocated_miner_data(::tari::rpc::MinerData* miner_data);
  private:
  const ::tari::rpc::MinerData& _internal_miner_data() const;
  ::tari::rpc::MinerData* _internal_mutable_miner_data();
  public:
  void unsafe_arena_set_allocated_miner_data(
      ::tari::rpc::MinerData* miner_data);
  ::tari::rpc::MinerData* unsafe_arena_release_miner_data();

  // @@protoc_insertion_point(class_scope:tari.rpc.GetNewBlockResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  ::tari::rpc::Block* block_;
  ::tari::rpc::MinerData* miner_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class MinerData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.MinerData) */ {
 public:
  inline MinerData() : MinerData(nullptr) {}
  virtual ~MinerData();

  MinerData(const MinerData& from);
  MinerData(MinerData&& from) noexcept
    : MinerData() {
    *this = ::std::move(from);
  }

  inline MinerData& operator=(const MinerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MinerData& operator=(MinerData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MinerData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MinerData* internal_default_instance() {
    return reinterpret_cast<const MinerData*>(
               &_MinerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MinerData& a, MinerData& b) {
    a.Swap(&b);
  }
  inline void Swap(MinerData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MinerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MinerData* New() const final {
    return CreateMaybeMessage<MinerData>(nullptr);
  }

  MinerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MinerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MinerData& from);
  void MergeFrom(const MinerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.MinerData";
  }
  protected:
  explicit MinerData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMergeMiningHashFieldNumber = 4,
    kAlgoFieldNumber = 1,
    kTargetDifficultyFieldNumber = 2,
    kRewardFieldNumber = 3,
  };
  // bytes merge_mining_hash = 4;
  void clear_merge_mining_hash();
  const std::string& merge_mining_hash() const;
  void set_merge_mining_hash(const std::string& value);
  void set_merge_mining_hash(std::string&& value);
  void set_merge_mining_hash(const char* value);
  void set_merge_mining_hash(const void* value, size_t size);
  std::string* mutable_merge_mining_hash();
  std::string* release_merge_mining_hash();
  void set_allocated_merge_mining_hash(std::string* merge_mining_hash);
  private:
  const std::string& _internal_merge_mining_hash() const;
  void _internal_set_merge_mining_hash(const std::string& value);
  std::string* _internal_mutable_merge_mining_hash();
  public:

  // .tari.rpc.PowAlgo algo = 1;
  bool has_algo() const;
  private:
  bool _internal_has_algo() const;
  public:
  void clear_algo();
  const ::tari::rpc::PowAlgo& algo() const;
  ::tari::rpc::PowAlgo* release_algo();
  ::tari::rpc::PowAlgo* mutable_algo();
  void set_allocated_algo(::tari::rpc::PowAlgo* algo);
  private:
  const ::tari::rpc::PowAlgo& _internal_algo() const;
  ::tari::rpc::PowAlgo* _internal_mutable_algo();
  public:
  void unsafe_arena_set_allocated_algo(
      ::tari::rpc::PowAlgo* algo);
  ::tari::rpc::PowAlgo* unsafe_arena_release_algo();

  // uint64 target_difficulty = 2;
  void clear_target_difficulty();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_difficulty() const;
  void set_target_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_target_difficulty() const;
  void _internal_set_target_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 reward = 3;
  void clear_reward();
  ::PROTOBUF_NAMESPACE_ID::uint64 reward() const;
  void set_reward(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reward() const;
  void _internal_set_reward(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.MinerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr merge_mining_hash_;
  ::tari::rpc::PowAlgo* algo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_difficulty_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reward_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// -------------------------------------------------------------------

class SearchKernelsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.SearchKernelsRequest) */ {
 public:
  inline SearchKernelsRequest() : SearchKernelsRequest(nullptr) {}
  virtual ~SearchKernelsRequest();

  SearchKernelsRequest(const SearchKernelsRequest& from);
  SearchKernelsRequest(SearchKernelsRequest&& from) noexcept
    : SearchKernelsRequest() {
    *this = ::std::move(from);
  }

  inline SearchKernelsRequest& operator=(const SearchKernelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchKernelsRequest& operator=(SearchKernelsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchKernelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchKernelsRequest* internal_default_instance() {
    return reinterpret_cast<const SearchKernelsRequest*>(
               &_SearchKernelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SearchKernelsRequest& a, SearchKernelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchKernelsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchKernelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchKernelsRequest* New() const final {
    return CreateMaybeMessage<SearchKernelsRequest>(nullptr);
  }

  SearchKernelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchKernelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchKernelsRequest& from);
  void MergeFrom(const SearchKernelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchKernelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.SearchKernelsRequest";
  }
  protected:
  explicit SearchKernelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_5fnode_2eproto);
    return ::descriptor_table_base_5fnode_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 1,
  };
  // repeated .tari.rpc.Signature signatures = 1;
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;
  public:
  void clear_signatures();
  ::tari::rpc::Signature* mutable_signatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::Signature >*
      mutable_signatures();
  private:
  const ::tari::rpc::Signature& _internal_signatures(int index) const;
  ::tari::rpc::Signature* _internal_add_signatures();
  public:
  const ::tari::rpc::Signature& signatures(int index) const;
  ::tari::rpc::Signature* add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::Signature >&
      signatures() const;

  // @@protoc_insertion_point(class_scope:tari.rpc.SearchKernelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::Signature > signatures_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_base_5fnode_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TipInfoResponse

// .tari.rpc.MetaData metadata = 1;
inline bool TipInfoResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool TipInfoResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void TipInfoResponse::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::tari::rpc::MetaData& TipInfoResponse::_internal_metadata() const {
  const ::tari::rpc::MetaData* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::MetaData*>(
      &::tari::rpc::_MetaData_default_instance_);
}
inline const ::tari::rpc::MetaData& TipInfoResponse::metadata() const {
  // @@protoc_insertion_point(field_get:tari.rpc.TipInfoResponse.metadata)
  return _internal_metadata();
}
inline void TipInfoResponse::unsafe_arena_set_allocated_metadata(
    ::tari::rpc::MetaData* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.TipInfoResponse.metadata)
}
inline ::tari::rpc::MetaData* TipInfoResponse::release_metadata() {

  ::tari::rpc::MetaData* temp = metadata_;
  metadata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::MetaData* TipInfoResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:tari.rpc.TipInfoResponse.metadata)

  ::tari::rpc::MetaData* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::tari::rpc::MetaData* TipInfoResponse::_internal_mutable_metadata() {

  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::MetaData>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::tari::rpc::MetaData* TipInfoResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.TipInfoResponse.metadata)
  return _internal_mutable_metadata();
}
inline void TipInfoResponse::set_allocated_metadata(::tari::rpc::MetaData* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }

  } else {

  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TipInfoResponse.metadata)
}

// -------------------------------------------------------------------

// NewBlockTemplateResponse

// .tari.rpc.NewBlockTemplate new_block_template = 1;
inline bool NewBlockTemplateResponse::_internal_has_new_block_template() const {
  return this != internal_default_instance() && new_block_template_ != nullptr;
}
inline bool NewBlockTemplateResponse::has_new_block_template() const {
  return _internal_has_new_block_template();
}
inline const ::tari::rpc::NewBlockTemplate& NewBlockTemplateResponse::_internal_new_block_template() const {
  const ::tari::rpc::NewBlockTemplate* p = new_block_template_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::NewBlockTemplate*>(
      &::tari::rpc::_NewBlockTemplate_default_instance_);
}
inline const ::tari::rpc::NewBlockTemplate& NewBlockTemplateResponse::new_block_template() const {
  // @@protoc_insertion_point(field_get:tari.rpc.NewBlockTemplateResponse.new_block_template)
  return _internal_new_block_template();
}
inline void NewBlockTemplateResponse::unsafe_arena_set_allocated_new_block_template(
    ::tari::rpc::NewBlockTemplate* new_block_template) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_block_template_);
  }
  new_block_template_ = new_block_template;
  if (new_block_template) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.NewBlockTemplateResponse.new_block_template)
}
inline ::tari::rpc::NewBlockTemplate* NewBlockTemplateResponse::release_new_block_template() {

  ::tari::rpc::NewBlockTemplate* temp = new_block_template_;
  new_block_template_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::NewBlockTemplate* NewBlockTemplateResponse::unsafe_arena_release_new_block_template() {
  // @@protoc_insertion_point(field_release:tari.rpc.NewBlockTemplateResponse.new_block_template)

  ::tari::rpc::NewBlockTemplate* temp = new_block_template_;
  new_block_template_ = nullptr;
  return temp;
}
inline ::tari::rpc::NewBlockTemplate* NewBlockTemplateResponse::_internal_mutable_new_block_template() {

  if (new_block_template_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::NewBlockTemplate>(GetArena());
    new_block_template_ = p;
  }
  return new_block_template_;
}
inline ::tari::rpc::NewBlockTemplate* NewBlockTemplateResponse::mutable_new_block_template() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.NewBlockTemplateResponse.new_block_template)
  return _internal_mutable_new_block_template();
}
inline void NewBlockTemplateResponse::set_allocated_new_block_template(::tari::rpc::NewBlockTemplate* new_block_template) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_block_template_);
  }
  if (new_block_template) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_block_template)->GetArena();
    if (message_arena != submessage_arena) {
      new_block_template = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_block_template, submessage_arena);
    }

  } else {

  }
  new_block_template_ = new_block_template;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.NewBlockTemplateResponse.new_block_template)
}

// uint64 block_reward = 2;
inline void NewBlockTemplateResponse::clear_block_reward() {
  block_reward_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewBlockTemplateResponse::_internal_block_reward() const {
  return block_reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewBlockTemplateResponse::block_reward() const {
  // @@protoc_insertion_point(field_get:tari.rpc.NewBlockTemplateResponse.block_reward)
  return _internal_block_reward();
}
inline void NewBlockTemplateResponse::_internal_set_block_reward(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  block_reward_ = value;
}
inline void NewBlockTemplateResponse::set_block_reward(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_reward(value);
  // @@protoc_insertion_point(field_set:tari.rpc.NewBlockTemplateResponse.block_reward)
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// NetworkDifficultyResponse

// uint64 difficulty = 1;
inline void NetworkDifficultyResponse::clear_difficulty() {
  difficulty_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkDifficultyResponse::_internal_difficulty() const {
  return difficulty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkDifficultyResponse::difficulty() const {
  // @@protoc_insertion_point(field_get:tari.rpc.NetworkDifficultyResponse.difficulty)
  return _internal_difficulty();
}
inline void NetworkDifficultyResponse::_internal_set_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  difficulty_ = value;
}
inline void NetworkDifficultyResponse::set_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:tari.rpc.NetworkDifficultyResponse.difficulty)
}

// uint64 estimated_hash_rate = 2;
inline void NetworkDifficultyResponse::clear_estimated_hash_rate() {
  estimated_hash_rate_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkDifficultyResponse::_internal_estimated_hash_rate() const {
  return estimated_hash_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkDifficultyResponse::estimated_hash_rate() const {
  // @@protoc_insertion_point(field_get:tari.rpc.NetworkDifficultyResponse.estimated_hash_rate)
  return _internal_estimated_hash_rate();
}
inline void NetworkDifficultyResponse::_internal_set_estimated_hash_rate(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  estimated_hash_rate_ = value;
}
inline void NetworkDifficultyResponse::set_estimated_hash_rate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_estimated_hash_rate(value);
  // @@protoc_insertion_point(field_set:tari.rpc.NetworkDifficultyResponse.estimated_hash_rate)
}

// uint64 height = 3;
inline void NetworkDifficultyResponse::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkDifficultyResponse::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkDifficultyResponse::height() const {
  // @@protoc_insertion_point(field_get:tari.rpc.NetworkDifficultyResponse.height)
  return _internal_height();
}
inline void NetworkDifficultyResponse::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  height_ = value;
}
inline void NetworkDifficultyResponse::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tari.rpc.NetworkDifficultyResponse.height)
}

// uint64 timestamp = 4;
inline void NetworkDifficultyResponse::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkDifficultyResponse::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkDifficultyResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:tari.rpc.NetworkDifficultyResponse.timestamp)
  return _internal_timestamp();
}
inline void NetworkDifficultyResponse::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  timestamp_ = value;
}
inline void NetworkDifficultyResponse::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:tari.rpc.NetworkDifficultyResponse.timestamp)
}

// -------------------------------------------------------------------

// ValueAtHeightResponse

// uint64 value = 1;
inline void ValueAtHeightResponse::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValueAtHeightResponse::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValueAtHeightResponse::value() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ValueAtHeightResponse.value)
  return _internal_value();
}
inline void ValueAtHeightResponse::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  value_ = value;
}
inline void ValueAtHeightResponse::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ValueAtHeightResponse.value)
}

// uint64 height = 2;
inline void ValueAtHeightResponse::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValueAtHeightResponse::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ValueAtHeightResponse::height() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ValueAtHeightResponse.height)
  return _internal_height();
}
inline void ValueAtHeightResponse::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  height_ = value;
}
inline void ValueAtHeightResponse::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ValueAtHeightResponse.height)
}

// -------------------------------------------------------------------

// IntegerValue

// uint64 value = 1;
inline void IntegerValue::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntegerValue::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IntegerValue::value() const {
  // @@protoc_insertion_point(field_get:tari.rpc.IntegerValue.value)
  return _internal_value();
}
inline void IntegerValue::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  value_ = value;
}
inline void IntegerValue::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:tari.rpc.IntegerValue.value)
}

// -------------------------------------------------------------------

// StringValue

// string value = 1;
inline void StringValue::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StringValue::value() const {
  // @@protoc_insertion_point(field_get:tari.rpc.StringValue.value)
  return _internal_value();
}
inline void StringValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:tari.rpc.StringValue.value)
}
inline std::string* StringValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.StringValue.value)
  return _internal_mutable_value();
}
inline const std::string& StringValue::_internal_value() const {
  return value_.Get();
}
inline void StringValue::_internal_set_value(const std::string& value) {

  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StringValue::set_value(std::string&& value) {

  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.StringValue.value)
}
inline void StringValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.StringValue.value)
}
inline void StringValue::set_value(const char* value,
    size_t size) {

  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.StringValue.value)
}
inline std::string* StringValue::_internal_mutable_value() {

  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StringValue::release_value() {
  // @@protoc_insertion_point(field_release:tari.rpc.StringValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StringValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {

  } else {

  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.StringValue.value)
}

// -------------------------------------------------------------------

// BlockGroupRequest

// uint64 from_tip = 1;
inline void BlockGroupRequest::clear_from_tip() {
  from_tip_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockGroupRequest::_internal_from_tip() const {
  return from_tip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockGroupRequest::from_tip() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockGroupRequest.from_tip)
  return _internal_from_tip();
}
inline void BlockGroupRequest::_internal_set_from_tip(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  from_tip_ = value;
}
inline void BlockGroupRequest::set_from_tip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_from_tip(value);
  // @@protoc_insertion_point(field_set:tari.rpc.BlockGroupRequest.from_tip)
}

// uint64 start_height = 2;
inline void BlockGroupRequest::clear_start_height() {
  start_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockGroupRequest::_internal_start_height() const {
  return start_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockGroupRequest::start_height() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockGroupRequest.start_height)
  return _internal_start_height();
}
inline void BlockGroupRequest::_internal_set_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  start_height_ = value;
}
inline void BlockGroupRequest::set_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_height(value);
  // @@protoc_insertion_point(field_set:tari.rpc.BlockGroupRequest.start_height)
}

// uint64 end_height = 3;
inline void BlockGroupRequest::clear_end_height() {
  end_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockGroupRequest::_internal_end_height() const {
  return end_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockGroupRequest::end_height() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockGroupRequest.end_height)
  return _internal_end_height();
}
inline void BlockGroupRequest::_internal_set_end_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  end_height_ = value;
}
inline void BlockGroupRequest::set_end_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_height(value);
  // @@protoc_insertion_point(field_set:tari.rpc.BlockGroupRequest.end_height)
}

// .tari.rpc.CalcType calc_type = 4;
inline void BlockGroupRequest::clear_calc_type() {
  calc_type_ = 0;
}
inline ::tari::rpc::CalcType BlockGroupRequest::_internal_calc_type() const {
  return static_cast< ::tari::rpc::CalcType >(calc_type_);
}
inline ::tari::rpc::CalcType BlockGroupRequest::calc_type() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockGroupRequest.calc_type)
  return _internal_calc_type();
}
inline void BlockGroupRequest::_internal_set_calc_type(::tari::rpc::CalcType value) {

  calc_type_ = value;
}
inline void BlockGroupRequest::set_calc_type(::tari::rpc::CalcType value) {
  _internal_set_calc_type(value);
  // @@protoc_insertion_point(field_set:tari.rpc.BlockGroupRequest.calc_type)
}

// -------------------------------------------------------------------

// BlockGroupResponse

// repeated double value = 1;
inline int BlockGroupResponse::_internal_value_size() const {
  return value_.size();
}
inline int BlockGroupResponse::value_size() const {
  return _internal_value_size();
}
inline void BlockGroupResponse::clear_value() {
  value_.Clear();
}
inline double BlockGroupResponse::_internal_value(int index) const {
  return value_.Get(index);
}
inline double BlockGroupResponse::value(int index) const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockGroupResponse.value)
  return _internal_value(index);
}
inline void BlockGroupResponse::set_value(int index, double value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tari.rpc.BlockGroupResponse.value)
}
inline void BlockGroupResponse::_internal_add_value(double value) {
  value_.Add(value);
}
inline void BlockGroupResponse::add_value(double value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:tari.rpc.BlockGroupResponse.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BlockGroupResponse::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
BlockGroupResponse::value() const {
  // @@protoc_insertion_point(field_list:tari.rpc.BlockGroupResponse.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BlockGroupResponse::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
BlockGroupResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tari.rpc.BlockGroupResponse.value)
  return _internal_mutable_value();
}

// .tari.rpc.CalcType calc_type = 2;
inline void BlockGroupResponse::clear_calc_type() {
  calc_type_ = 0;
}
inline ::tari::rpc::CalcType BlockGroupResponse::_internal_calc_type() const {
  return static_cast< ::tari::rpc::CalcType >(calc_type_);
}
inline ::tari::rpc::CalcType BlockGroupResponse::calc_type() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockGroupResponse.calc_type)
  return _internal_calc_type();
}
inline void BlockGroupResponse::_internal_set_calc_type(::tari::rpc::CalcType value) {

  calc_type_ = value;
}
inline void BlockGroupResponse::set_calc_type(::tari::rpc::CalcType value) {
  _internal_set_calc_type(value);
  // @@protoc_insertion_point(field_set:tari.rpc.BlockGroupResponse.calc_type)
}

// -------------------------------------------------------------------

// HeightRequest

// uint64 from_tip = 1;
inline void HeightRequest::clear_from_tip() {
  from_tip_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeightRequest::_internal_from_tip() const {
  return from_tip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeightRequest::from_tip() const {
  // @@protoc_insertion_point(field_get:tari.rpc.HeightRequest.from_tip)
  return _internal_from_tip();
}
inline void HeightRequest::_internal_set_from_tip(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  from_tip_ = value;
}
inline void HeightRequest::set_from_tip(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_from_tip(value);
  // @@protoc_insertion_point(field_set:tari.rpc.HeightRequest.from_tip)
}

// uint64 start_height = 2;
inline void HeightRequest::clear_start_height() {
  start_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeightRequest::_internal_start_height() const {
  return start_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeightRequest::start_height() const {
  // @@protoc_insertion_point(field_get:tari.rpc.HeightRequest.start_height)
  return _internal_start_height();
}
inline void HeightRequest::_internal_set_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  start_height_ = value;
}
inline void HeightRequest::set_start_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_height(value);
  // @@protoc_insertion_point(field_set:tari.rpc.HeightRequest.start_height)
}

// uint64 end_height = 3;
inline void HeightRequest::clear_end_height() {
  end_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeightRequest::_internal_end_height() const {
  return end_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HeightRequest::end_height() const {
  // @@protoc_insertion_point(field_get:tari.rpc.HeightRequest.end_height)
  return _internal_end_height();
}
inline void HeightRequest::_internal_set_end_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  end_height_ = value;
}
inline void HeightRequest::set_end_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_height(value);
  // @@protoc_insertion_point(field_set:tari.rpc.HeightRequest.end_height)
}

// -------------------------------------------------------------------

// CalcTimingResponse

// uint64 max = 1;
inline void CalcTimingResponse::clear_max() {
  max_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CalcTimingResponse::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CalcTimingResponse::max() const {
  // @@protoc_insertion_point(field_get:tari.rpc.CalcTimingResponse.max)
  return _internal_max();
}
inline void CalcTimingResponse::_internal_set_max(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  max_ = value;
}
inline void CalcTimingResponse::set_max(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:tari.rpc.CalcTimingResponse.max)
}

// uint64 min = 2;
inline void CalcTimingResponse::clear_min() {
  min_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CalcTimingResponse::_internal_min() const {
  return min_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CalcTimingResponse::min() const {
  // @@protoc_insertion_point(field_get:tari.rpc.CalcTimingResponse.min)
  return _internal_min();
}
inline void CalcTimingResponse::_internal_set_min(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  min_ = value;
}
inline void CalcTimingResponse::set_min(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:tari.rpc.CalcTimingResponse.min)
}

// double avg = 3;
inline void CalcTimingResponse::clear_avg() {
  avg_ = 0;
}
inline double CalcTimingResponse::_internal_avg() const {
  return avg_;
}
inline double CalcTimingResponse::avg() const {
  // @@protoc_insertion_point(field_get:tari.rpc.CalcTimingResponse.avg)
  return _internal_avg();
}
inline void CalcTimingResponse::_internal_set_avg(double value) {

  avg_ = value;
}
inline void CalcTimingResponse::set_avg(double value) {
  _internal_set_avg(value);
  // @@protoc_insertion_point(field_set:tari.rpc.CalcTimingResponse.avg)
}

// -------------------------------------------------------------------

// ListHeadersRequest

// uint64 from_height = 1;
inline void ListHeadersRequest::clear_from_height() {
  from_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListHeadersRequest::_internal_from_height() const {
  return from_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListHeadersRequest::from_height() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ListHeadersRequest.from_height)
  return _internal_from_height();
}
inline void ListHeadersRequest::_internal_set_from_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  from_height_ = value;
}
inline void ListHeadersRequest::set_from_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_from_height(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ListHeadersRequest.from_height)
}

// uint64 num_headers = 2;
inline void ListHeadersRequest::clear_num_headers() {
  num_headers_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListHeadersRequest::_internal_num_headers() const {
  return num_headers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListHeadersRequest::num_headers() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ListHeadersRequest.num_headers)
  return _internal_num_headers();
}
inline void ListHeadersRequest::_internal_set_num_headers(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  num_headers_ = value;
}
inline void ListHeadersRequest::set_num_headers(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_headers(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ListHeadersRequest.num_headers)
}

// .tari.rpc.Sorting sorting = 3;
inline void ListHeadersRequest::clear_sorting() {
  sorting_ = 0;
}
inline ::tari::rpc::Sorting ListHeadersRequest::_internal_sorting() const {
  return static_cast< ::tari::rpc::Sorting >(sorting_);
}
inline ::tari::rpc::Sorting ListHeadersRequest::sorting() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ListHeadersRequest.sorting)
  return _internal_sorting();
}
inline void ListHeadersRequest::_internal_set_sorting(::tari::rpc::Sorting value) {

  sorting_ = value;
}
inline void ListHeadersRequest::set_sorting(::tari::rpc::Sorting value) {
  _internal_set_sorting(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ListHeadersRequest.sorting)
}

// -------------------------------------------------------------------

// GetBlocksRequest

// repeated uint64 heights = 1;
inline int GetBlocksRequest::_internal_heights_size() const {
  return heights_.size();
}
inline int GetBlocksRequest::heights_size() const {
  return _internal_heights_size();
}
inline void GetBlocksRequest::clear_heights() {
  heights_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBlocksRequest::_internal_heights(int index) const {
  return heights_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetBlocksRequest::heights(int index) const {
  // @@protoc_insertion_point(field_get:tari.rpc.GetBlocksRequest.heights)
  return _internal_heights(index);
}
inline void GetBlocksRequest::set_heights(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  heights_.Set(index, value);
  // @@protoc_insertion_point(field_set:tari.rpc.GetBlocksRequest.heights)
}
inline void GetBlocksRequest::_internal_add_heights(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  heights_.Add(value);
}
inline void GetBlocksRequest::add_heights(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_heights(value);
  // @@protoc_insertion_point(field_add:tari.rpc.GetBlocksRequest.heights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GetBlocksRequest::_internal_heights() const {
  return heights_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
GetBlocksRequest::heights() const {
  // @@protoc_insertion_point(field_list:tari.rpc.GetBlocksRequest.heights)
  return _internal_heights();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GetBlocksRequest::_internal_mutable_heights() {
  return &heights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
GetBlocksRequest::mutable_heights() {
  // @@protoc_insertion_point(field_mutable_list:tari.rpc.GetBlocksRequest.heights)
  return _internal_mutable_heights();
}

// -------------------------------------------------------------------

// GetBlocksResponse

// repeated .tari.rpc.HistoricalBlock blocks = 1;
inline int GetBlocksResponse::_internal_blocks_size() const {
  return blocks_.size();
}
inline int GetBlocksResponse::blocks_size() const {
  return _internal_blocks_size();
}
inline ::tari::rpc::HistoricalBlock* GetBlocksResponse::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:tari.rpc.GetBlocksResponse.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::HistoricalBlock >*
GetBlocksResponse::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:tari.rpc.GetBlocksResponse.blocks)
  return &blocks_;
}
inline const ::tari::rpc::HistoricalBlock& GetBlocksResponse::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::tari::rpc::HistoricalBlock& GetBlocksResponse::blocks(int index) const {
  // @@protoc_insertion_point(field_get:tari.rpc.GetBlocksResponse.blocks)
  return _internal_blocks(index);
}
inline ::tari::rpc::HistoricalBlock* GetBlocksResponse::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::tari::rpc::HistoricalBlock* GetBlocksResponse::add_blocks() {
  // @@protoc_insertion_point(field_add:tari.rpc.GetBlocksResponse.blocks)
  return _internal_add_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::HistoricalBlock >&
GetBlocksResponse::blocks() const {
  // @@protoc_insertion_point(field_list:tari.rpc.GetBlocksResponse.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// MetaData

// uint64 height_of_longest_chain = 1;
inline void MetaData::clear_height_of_longest_chain() {
  height_of_longest_chain_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MetaData::_internal_height_of_longest_chain() const {
  return height_of_longest_chain_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MetaData::height_of_longest_chain() const {
  // @@protoc_insertion_point(field_get:tari.rpc.MetaData.height_of_longest_chain)
  return _internal_height_of_longest_chain();
}
inline void MetaData::_internal_set_height_of_longest_chain(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  height_of_longest_chain_ = value;
}
inline void MetaData::set_height_of_longest_chain(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height_of_longest_chain(value);
  // @@protoc_insertion_point(field_set:tari.rpc.MetaData.height_of_longest_chain)
}

// bytes best_block = 2;
inline void MetaData::clear_best_block() {
  best_block_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MetaData::best_block() const {
  // @@protoc_insertion_point(field_get:tari.rpc.MetaData.best_block)
  return _internal_best_block();
}
inline void MetaData::set_best_block(const std::string& value) {
  _internal_set_best_block(value);
  // @@protoc_insertion_point(field_set:tari.rpc.MetaData.best_block)
}
inline std::string* MetaData::mutable_best_block() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.MetaData.best_block)
  return _internal_mutable_best_block();
}
inline const std::string& MetaData::_internal_best_block() const {
  return best_block_.Get();
}
inline void MetaData::_internal_set_best_block(const std::string& value) {

  best_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MetaData::set_best_block(std::string&& value) {

  best_block_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.MetaData.best_block)
}
inline void MetaData::set_best_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  best_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.MetaData.best_block)
}
inline void MetaData::set_best_block(const void* value,
    size_t size) {

  best_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.MetaData.best_block)
}
inline std::string* MetaData::_internal_mutable_best_block() {

  return best_block_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MetaData::release_best_block() {
  // @@protoc_insertion_point(field_release:tari.rpc.MetaData.best_block)
  return best_block_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MetaData::set_allocated_best_block(std::string* best_block) {
  if (best_block != nullptr) {

  } else {

  }
  best_block_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), best_block,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.MetaData.best_block)
}

// uint64 pruning_horizon = 4;
inline void MetaData::clear_pruning_horizon() {
  pruning_horizon_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MetaData::_internal_pruning_horizon() const {
  return pruning_horizon_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MetaData::pruning_horizon() const {
  // @@protoc_insertion_point(field_get:tari.rpc.MetaData.pruning_horizon)
  return _internal_pruning_horizon();
}
inline void MetaData::_internal_set_pruning_horizon(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  pruning_horizon_ = value;
}
inline void MetaData::set_pruning_horizon(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pruning_horizon(value);
  // @@protoc_insertion_point(field_set:tari.rpc.MetaData.pruning_horizon)
}

// uint64 accumulated_difficulty = 5;
inline void MetaData::clear_accumulated_difficulty() {
  accumulated_difficulty_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MetaData::_internal_accumulated_difficulty() const {
  return accumulated_difficulty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MetaData::accumulated_difficulty() const {
  // @@protoc_insertion_point(field_get:tari.rpc.MetaData.accumulated_difficulty)
  return _internal_accumulated_difficulty();
}
inline void MetaData::_internal_set_accumulated_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  accumulated_difficulty_ = value;
}
inline void MetaData::set_accumulated_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accumulated_difficulty(value);
  // @@protoc_insertion_point(field_set:tari.rpc.MetaData.accumulated_difficulty)
}

// -------------------------------------------------------------------

// SyncInfoResponse

// uint64 tip_height = 1;
inline void SyncInfoResponse::clear_tip_height() {
  tip_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncInfoResponse::_internal_tip_height() const {
  return tip_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncInfoResponse::tip_height() const {
  // @@protoc_insertion_point(field_get:tari.rpc.SyncInfoResponse.tip_height)
  return _internal_tip_height();
}
inline void SyncInfoResponse::_internal_set_tip_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  tip_height_ = value;
}
inline void SyncInfoResponse::set_tip_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tip_height(value);
  // @@protoc_insertion_point(field_set:tari.rpc.SyncInfoResponse.tip_height)
}

// uint64 local_height = 2;
inline void SyncInfoResponse::clear_local_height() {
  local_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncInfoResponse::_internal_local_height() const {
  return local_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SyncInfoResponse::local_height() const {
  // @@protoc_insertion_point(field_get:tari.rpc.SyncInfoResponse.local_height)
  return _internal_local_height();
}
inline void SyncInfoResponse::_internal_set_local_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  local_height_ = value;
}
inline void SyncInfoResponse::set_local_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_local_height(value);
  // @@protoc_insertion_point(field_set:tari.rpc.SyncInfoResponse.local_height)
}

// repeated bytes peer_node_id = 3;
inline int SyncInfoResponse::_internal_peer_node_id_size() const {
  return peer_node_id_.size();
}
inline int SyncInfoResponse::peer_node_id_size() const {
  return _internal_peer_node_id_size();
}
inline void SyncInfoResponse::clear_peer_node_id() {
  peer_node_id_.Clear();
}
inline std::string* SyncInfoResponse::add_peer_node_id() {
  // @@protoc_insertion_point(field_add_mutable:tari.rpc.SyncInfoResponse.peer_node_id)
  return _internal_add_peer_node_id();
}
inline const std::string& SyncInfoResponse::_internal_peer_node_id(int index) const {
  return peer_node_id_.Get(index);
}
inline const std::string& SyncInfoResponse::peer_node_id(int index) const {
  // @@protoc_insertion_point(field_get:tari.rpc.SyncInfoResponse.peer_node_id)
  return _internal_peer_node_id(index);
}
inline std::string* SyncInfoResponse::mutable_peer_node_id(int index) {
  // @@protoc_insertion_point(field_mutable:tari.rpc.SyncInfoResponse.peer_node_id)
  return peer_node_id_.Mutable(index);
}
inline void SyncInfoResponse::set_peer_node_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tari.rpc.SyncInfoResponse.peer_node_id)
  peer_node_id_.Mutable(index)->assign(value);
}
inline void SyncInfoResponse::set_peer_node_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tari.rpc.SyncInfoResponse.peer_node_id)
  peer_node_id_.Mutable(index)->assign(std::move(value));
}
inline void SyncInfoResponse::set_peer_node_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peer_node_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tari.rpc.SyncInfoResponse.peer_node_id)
}
inline void SyncInfoResponse::set_peer_node_id(int index, const void* value, size_t size) {
  peer_node_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.SyncInfoResponse.peer_node_id)
}
inline std::string* SyncInfoResponse::_internal_add_peer_node_id() {
  return peer_node_id_.Add();
}
inline void SyncInfoResponse::add_peer_node_id(const std::string& value) {
  peer_node_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tari.rpc.SyncInfoResponse.peer_node_id)
}
inline void SyncInfoResponse::add_peer_node_id(std::string&& value) {
  peer_node_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tari.rpc.SyncInfoResponse.peer_node_id)
}
inline void SyncInfoResponse::add_peer_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  peer_node_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tari.rpc.SyncInfoResponse.peer_node_id)
}
inline void SyncInfoResponse::add_peer_node_id(const void* value, size_t size) {
  peer_node_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tari.rpc.SyncInfoResponse.peer_node_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyncInfoResponse::peer_node_id() const {
  // @@protoc_insertion_point(field_list:tari.rpc.SyncInfoResponse.peer_node_id)
  return peer_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SyncInfoResponse::mutable_peer_node_id() {
  // @@protoc_insertion_point(field_mutable_list:tari.rpc.SyncInfoResponse.peer_node_id)
  return &peer_node_id_;
}

// -------------------------------------------------------------------

// GetNewBlockResult

// bytes block_hash = 1;
inline void GetNewBlockResult::clear_block_hash() {
  block_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetNewBlockResult::block_hash() const {
  // @@protoc_insertion_point(field_get:tari.rpc.GetNewBlockResult.block_hash)
  return _internal_block_hash();
}
inline void GetNewBlockResult::set_block_hash(const std::string& value) {
  _internal_set_block_hash(value);
  // @@protoc_insertion_point(field_set:tari.rpc.GetNewBlockResult.block_hash)
}
inline std::string* GetNewBlockResult::mutable_block_hash() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.GetNewBlockResult.block_hash)
  return _internal_mutable_block_hash();
}
inline const std::string& GetNewBlockResult::_internal_block_hash() const {
  return block_hash_.Get();
}
inline void GetNewBlockResult::_internal_set_block_hash(const std::string& value) {

  block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetNewBlockResult::set_block_hash(std::string&& value) {

  block_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.GetNewBlockResult.block_hash)
}
inline void GetNewBlockResult::set_block_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.GetNewBlockResult.block_hash)
}
inline void GetNewBlockResult::set_block_hash(const void* value,
    size_t size) {

  block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.GetNewBlockResult.block_hash)
}
inline std::string* GetNewBlockResult::_internal_mutable_block_hash() {

  return block_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetNewBlockResult::release_block_hash() {
  // @@protoc_insertion_point(field_release:tari.rpc.GetNewBlockResult.block_hash)
  return block_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetNewBlockResult::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {

  } else {

  }
  block_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.GetNewBlockResult.block_hash)
}

// .tari.rpc.Block block = 2;
inline bool GetNewBlockResult::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool GetNewBlockResult::has_block() const {
  return _internal_has_block();
}
inline const ::tari::rpc::Block& GetNewBlockResult::_internal_block() const {
  const ::tari::rpc::Block* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::Block*>(
      &::tari::rpc::_Block_default_instance_);
}
inline const ::tari::rpc::Block& GetNewBlockResult::block() const {
  // @@protoc_insertion_point(field_get:tari.rpc.GetNewBlockResult.block)
  return _internal_block();
}
inline void GetNewBlockResult::unsafe_arena_set_allocated_block(
    ::tari::rpc::Block* block) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.GetNewBlockResult.block)
}
inline ::tari::rpc::Block* GetNewBlockResult::release_block() {

  ::tari::rpc::Block* temp = block_;
  block_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::Block* GetNewBlockResult::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:tari.rpc.GetNewBlockResult.block)

  ::tari::rpc::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::tari::rpc::Block* GetNewBlockResult::_internal_mutable_block() {

  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::Block>(GetArena());
    block_ = p;
  }
  return block_;
}
inline ::tari::rpc::Block* GetNewBlockResult::mutable_block() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.GetNewBlockResult.block)
  return _internal_mutable_block();
}
inline void GetNewBlockResult::set_allocated_block(::tari::rpc::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block)->GetArena();
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }

  } else {

  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.GetNewBlockResult.block)
}

// .tari.rpc.MinerData miner_data = 3;
inline bool GetNewBlockResult::_internal_has_miner_data() const {
  return this != internal_default_instance() && miner_data_ != nullptr;
}
inline bool GetNewBlockResult::has_miner_data() const {
  return _internal_has_miner_data();
}
inline void GetNewBlockResult::clear_miner_data() {
  if (GetArena() == nullptr && miner_data_ != nullptr) {
    delete miner_data_;
  }
  miner_data_ = nullptr;
}
inline const ::tari::rpc::MinerData& GetNewBlockResult::_internal_miner_data() const {
  const ::tari::rpc::MinerData* p = miner_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::MinerData*>(
      &::tari::rpc::_MinerData_default_instance_);
}
inline const ::tari::rpc::MinerData& GetNewBlockResult::miner_data() const {
  // @@protoc_insertion_point(field_get:tari.rpc.GetNewBlockResult.miner_data)
  return _internal_miner_data();
}
inline void GetNewBlockResult::unsafe_arena_set_allocated_miner_data(
    ::tari::rpc::MinerData* miner_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(miner_data_);
  }
  miner_data_ = miner_data;
  if (miner_data) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.GetNewBlockResult.miner_data)
}
inline ::tari::rpc::MinerData* GetNewBlockResult::release_miner_data() {

  ::tari::rpc::MinerData* temp = miner_data_;
  miner_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::MinerData* GetNewBlockResult::unsafe_arena_release_miner_data() {
  // @@protoc_insertion_point(field_release:tari.rpc.GetNewBlockResult.miner_data)

  ::tari::rpc::MinerData* temp = miner_data_;
  miner_data_ = nullptr;
  return temp;
}
inline ::tari::rpc::MinerData* GetNewBlockResult::_internal_mutable_miner_data() {

  if (miner_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::MinerData>(GetArena());
    miner_data_ = p;
  }
  return miner_data_;
}
inline ::tari::rpc::MinerData* GetNewBlockResult::mutable_miner_data() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.GetNewBlockResult.miner_data)
  return _internal_mutable_miner_data();
}
inline void GetNewBlockResult::set_allocated_miner_data(::tari::rpc::MinerData* miner_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete miner_data_;
  }
  if (miner_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(miner_data);
    if (message_arena != submessage_arena) {
      miner_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, miner_data, submessage_arena);
    }

  } else {

  }
  miner_data_ = miner_data;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.GetNewBlockResult.miner_data)
}

// -------------------------------------------------------------------

// MinerData

// .tari.rpc.PowAlgo algo = 1;
inline bool MinerData::_internal_has_algo() const {
  return this != internal_default_instance() && algo_ != nullptr;
}
inline bool MinerData::has_algo() const {
  return _internal_has_algo();
}
inline const ::tari::rpc::PowAlgo& MinerData::_internal_algo() const {
  const ::tari::rpc::PowAlgo* p = algo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::PowAlgo*>(
      &::tari::rpc::_PowAlgo_default_instance_);
}
inline const ::tari::rpc::PowAlgo& MinerData::algo() const {
  // @@protoc_insertion_point(field_get:tari.rpc.MinerData.algo)
  return _internal_algo();
}
inline void MinerData::unsafe_arena_set_allocated_algo(
    ::tari::rpc::PowAlgo* algo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(algo_);
  }
  algo_ = algo;
  if (algo) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.MinerData.algo)
}
inline ::tari::rpc::PowAlgo* MinerData::release_algo() {

  ::tari::rpc::PowAlgo* temp = algo_;
  algo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::PowAlgo* MinerData::unsafe_arena_release_algo() {
  // @@protoc_insertion_point(field_release:tari.rpc.MinerData.algo)

  ::tari::rpc::PowAlgo* temp = algo_;
  algo_ = nullptr;
  return temp;
}
inline ::tari::rpc::PowAlgo* MinerData::_internal_mutable_algo() {

  if (algo_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::PowAlgo>(GetArena());
    algo_ = p;
  }
  return algo_;
}
inline ::tari::rpc::PowAlgo* MinerData::mutable_algo() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.MinerData.algo)
  return _internal_mutable_algo();
}
inline void MinerData::set_allocated_algo(::tari::rpc::PowAlgo* algo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(algo_);
  }
  if (algo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(algo)->GetArena();
    if (message_arena != submessage_arena) {
      algo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algo, submessage_arena);
    }

  } else {

  }
  algo_ = algo;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.MinerData.algo)
}

// uint64 target_difficulty = 2;
inline void MinerData::clear_target_difficulty() {
  target_difficulty_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MinerData::_internal_target_difficulty() const {
  return target_difficulty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MinerData::target_difficulty() const {
  // @@protoc_insertion_point(field_get:tari.rpc.MinerData.target_difficulty)
  return _internal_target_difficulty();
}
inline void MinerData::_internal_set_target_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  target_difficulty_ = value;
}
inline void MinerData::set_target_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_target_difficulty(value);
  // @@protoc_insertion_point(field_set:tari.rpc.MinerData.target_difficulty)
}

// uint64 reward = 3;
inline void MinerData::clear_reward() {
  reward_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MinerData::_internal_reward() const {
  return reward_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MinerData::reward() const {
  // @@protoc_insertion_point(field_get:tari.rpc.MinerData.reward)
  return _internal_reward();
}
inline void MinerData::_internal_set_reward(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  reward_ = value;
}
inline void MinerData::set_reward(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reward(value);
  // @@protoc_insertion_point(field_set:tari.rpc.MinerData.reward)
}

// bytes merge_mining_hash = 4;
inline void MinerData::clear_merge_mining_hash() {
  merge_mining_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MinerData::merge_mining_hash() const {
  // @@protoc_insertion_point(field_get:tari.rpc.MinerData.merge_mining_hash)
  return _internal_merge_mining_hash();
}
inline void MinerData::set_merge_mining_hash(const std::string& value) {
  _internal_set_merge_mining_hash(value);
  // @@protoc_insertion_point(field_set:tari.rpc.MinerData.merge_mining_hash)
}
inline std::string* MinerData::mutable_merge_mining_hash() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.MinerData.merge_mining_hash)
  return _internal_mutable_merge_mining_hash();
}
inline const std::string& MinerData::_internal_merge_mining_hash() const {
  return merge_mining_hash_.Get();
}
inline void MinerData::_internal_set_merge_mining_hash(const std::string& value) {

  merge_mining_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MinerData::set_merge_mining_hash(std::string&& value) {

  merge_mining_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.MinerData.merge_mining_hash)
}
inline void MinerData::set_merge_mining_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  merge_mining_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.MinerData.merge_mining_hash)
}
inline void MinerData::set_merge_mining_hash(const void* value,
    size_t size) {

  merge_mining_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.MinerData.merge_mining_hash)
}
inline std::string* MinerData::_internal_mutable_merge_mining_hash() {

  return merge_mining_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MinerData::release_merge_mining_hash() {
  // @@protoc_insertion_point(field_release:tari.rpc.MinerData.merge_mining_hash)
  return merge_mining_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MinerData::set_allocated_merge_mining_hash(std::string* merge_mining_hash) {
  if (merge_mining_hash != nullptr) {

  } else {

  }
  merge_mining_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), merge_mining_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.MinerData.merge_mining_hash)
}

// -------------------------------------------------------------------

// SearchKernelsRequest

// repeated .tari.rpc.Signature signatures = 1;
inline int SearchKernelsRequest::_internal_signatures_size() const {
  return signatures_.size();
}
inline int SearchKernelsRequest::signatures_size() const {
  return _internal_signatures_size();
}
inline ::tari::rpc::Signature* SearchKernelsRequest::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:tari.rpc.SearchKernelsRequest.signatures)
  return signatures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::Signature >*
SearchKernelsRequest::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:tari.rpc.SearchKernelsRequest.signatures)
  return &signatures_;
}
inline const ::tari::rpc::Signature& SearchKernelsRequest::_internal_signatures(int index) const {
  return signatures_.Get(index);
}
inline const ::tari::rpc::Signature& SearchKernelsRequest::signatures(int index) const {
  // @@protoc_insertion_point(field_get:tari.rpc.SearchKernelsRequest.signatures)
  return _internal_signatures(index);
}
inline ::tari::rpc::Signature* SearchKernelsRequest::_internal_add_signatures() {
  return signatures_.Add();
}
inline ::tari::rpc::Signature* SearchKernelsRequest::add_signatures() {
  // @@protoc_insertion_point(field_add:tari.rpc.SearchKernelsRequest.signatures)
  return _internal_add_signatures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::Signature >&
SearchKernelsRequest::signatures() const {
  // @@protoc_insertion_point(field_list:tari.rpc.SearchKernelsRequest.signatures)
  return signatures_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace tari

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tari::rpc::CalcType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tari::rpc::CalcType>() {
  return ::tari::rpc::CalcType_descriptor();
}
template <> struct is_proto_enum< ::tari::rpc::Sorting> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tari::rpc::Sorting>() {
  return ::tari::rpc::Sorting_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_5fnode_2eproto
