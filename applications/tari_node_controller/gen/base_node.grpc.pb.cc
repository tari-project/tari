// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: base_node.proto

#include "base_node.pb.h"
#include "base_node.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tari {
namespace rpc {

static const char* BaseNode_method_names[] = {
  "/tari.rpc.BaseNode/ListHeaders",
  "/tari.rpc.BaseNode/GetBlocks",
  "/tari.rpc.BaseNode/GetCalcTiming",
  "/tari.rpc.BaseNode/GetConstants",
  "/tari.rpc.BaseNode/GetBlockSize",
  "/tari.rpc.BaseNode/GetBlockFees",
  "/tari.rpc.BaseNode/GetVersion",
  "/tari.rpc.BaseNode/GetTokensInCirculation",
  "/tari.rpc.BaseNode/GetNetworkDifficulty",
  "/tari.rpc.BaseNode/GetNewBlockTemplate",
  "/tari.rpc.BaseNode/GetNewBlock",
  "/tari.rpc.BaseNode/SubmitBlock",
  "/tari.rpc.BaseNode/GetSyncInfo",
  "/tari.rpc.BaseNode/GetTipInfo",
  "/tari.rpc.BaseNode/SearchKernels",
};

std::unique_ptr< BaseNode::Stub> BaseNode::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BaseNode::Stub> stub(new BaseNode::Stub(channel));
  return stub;
}

BaseNode::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListHeaders_(BaseNode_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetBlocks_(BaseNode_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetCalcTiming_(BaseNode_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConstants_(BaseNode_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockSize_(BaseNode_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockFees_(BaseNode_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVersion_(BaseNode_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTokensInCirculation_(BaseNode_method_names[7], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetNetworkDifficulty_(BaseNode_method_names[8], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetNewBlockTemplate_(BaseNode_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNewBlock_(BaseNode_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitBlock_(BaseNode_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSyncInfo_(BaseNode_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTipInfo_(BaseNode_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SearchKernels_(BaseNode_method_names[14], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::tari::rpc::BlockHeader>* BaseNode::Stub::ListHeadersRaw(::grpc::ClientContext* context, const ::tari::rpc::ListHeadersRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::tari::rpc::BlockHeader>::Create(channel_.get(), rpcmethod_ListHeaders_, context, request);
}

void BaseNode::Stub::experimental_async::ListHeaders(::grpc::ClientContext* context, ::tari::rpc::ListHeadersRequest* request, ::grpc::experimental::ClientReadReactor< ::tari::rpc::BlockHeader>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::tari::rpc::BlockHeader>::Create(stub_->channel_.get(), stub_->rpcmethod_ListHeaders_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::tari::rpc::BlockHeader>* BaseNode::Stub::AsyncListHeadersRaw(::grpc::ClientContext* context, const ::tari::rpc::ListHeadersRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::tari::rpc::BlockHeader>::Create(channel_.get(), cq, rpcmethod_ListHeaders_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::tari::rpc::BlockHeader>* BaseNode::Stub::PrepareAsyncListHeadersRaw(::grpc::ClientContext* context, const ::tari::rpc::ListHeadersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::tari::rpc::BlockHeader>::Create(channel_.get(), cq, rpcmethod_ListHeaders_, context, request, false, nullptr);
}

::grpc::ClientReader< ::tari::rpc::HistoricalBlock>* BaseNode::Stub::GetBlocksRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::tari::rpc::HistoricalBlock>::Create(channel_.get(), rpcmethod_GetBlocks_, context, request);
}

void BaseNode::Stub::experimental_async::GetBlocks(::grpc::ClientContext* context, ::tari::rpc::GetBlocksRequest* request, ::grpc::experimental::ClientReadReactor< ::tari::rpc::HistoricalBlock>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::tari::rpc::HistoricalBlock>::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlocks_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>* BaseNode::Stub::AsyncGetBlocksRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::tari::rpc::HistoricalBlock>::Create(channel_.get(), cq, rpcmethod_GetBlocks_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>* BaseNode::Stub::PrepareAsyncGetBlocksRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::tari::rpc::HistoricalBlock>::Create(channel_.get(), cq, rpcmethod_GetBlocks_, context, request, false, nullptr);
}

::grpc::Status BaseNode::Stub::GetCalcTiming(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::tari::rpc::CalcTimingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCalcTiming_, context, request, response);
}

void BaseNode::Stub::experimental_async::GetCalcTiming(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest* request, ::tari::rpc::CalcTimingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCalcTiming_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetCalcTiming(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::CalcTimingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCalcTiming_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetCalcTiming(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest* request, ::tari::rpc::CalcTimingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCalcTiming_, context, request, response, reactor);
}

void BaseNode::Stub::experimental_async::GetCalcTiming(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::CalcTimingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCalcTiming_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::CalcTimingResponse>* BaseNode::Stub::AsyncGetCalcTimingRaw(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::CalcTimingResponse>::Create(channel_.get(), cq, rpcmethod_GetCalcTiming_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::CalcTimingResponse>* BaseNode::Stub::PrepareAsyncGetCalcTimingRaw(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::CalcTimingResponse>::Create(channel_.get(), cq, rpcmethod_GetCalcTiming_, context, request, false);
}

::grpc::Status BaseNode::Stub::GetConstants(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::tari::rpc::ConsensusConstants* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetConstants_, context, request, response);
}

void BaseNode::Stub::experimental_async::GetConstants(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::ConsensusConstants* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConstants_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetConstants(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::ConsensusConstants* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConstants_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetConstants(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::ConsensusConstants* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConstants_, context, request, response, reactor);
}

void BaseNode::Stub::experimental_async::GetConstants(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::ConsensusConstants* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConstants_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::ConsensusConstants>* BaseNode::Stub::AsyncGetConstantsRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::ConsensusConstants>::Create(channel_.get(), cq, rpcmethod_GetConstants_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::ConsensusConstants>* BaseNode::Stub::PrepareAsyncGetConstantsRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::ConsensusConstants>::Create(channel_.get(), cq, rpcmethod_GetConstants_, context, request, false);
}

::grpc::Status BaseNode::Stub::GetBlockSize(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::tari::rpc::BlockGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlockSize_, context, request, response);
}

void BaseNode::Stub::experimental_async::GetBlockSize(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlockSize_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetBlockSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlockSize_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetBlockSize(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlockSize_, context, request, response, reactor);
}

void BaseNode::Stub::experimental_async::GetBlockSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlockSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>* BaseNode::Stub::AsyncGetBlockSizeRaw(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::BlockGroupResponse>::Create(channel_.get(), cq, rpcmethod_GetBlockSize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>* BaseNode::Stub::PrepareAsyncGetBlockSizeRaw(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::BlockGroupResponse>::Create(channel_.get(), cq, rpcmethod_GetBlockSize_, context, request, false);
}

::grpc::Status BaseNode::Stub::GetBlockFees(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::tari::rpc::BlockGroupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlockFees_, context, request, response);
}

void BaseNode::Stub::experimental_async::GetBlockFees(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlockFees_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetBlockFees(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlockFees_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetBlockFees(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlockFees_, context, request, response, reactor);
}

void BaseNode::Stub::experimental_async::GetBlockFees(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::BlockGroupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlockFees_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>* BaseNode::Stub::AsyncGetBlockFeesRaw(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::BlockGroupResponse>::Create(channel_.get(), cq, rpcmethod_GetBlockFees_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::BlockGroupResponse>* BaseNode::Stub::PrepareAsyncGetBlockFeesRaw(::grpc::ClientContext* context, const ::tari::rpc::BlockGroupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::BlockGroupResponse>::Create(channel_.get(), cq, rpcmethod_GetBlockFees_, context, request, false);
}

::grpc::Status BaseNode::Stub::GetVersion(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::tari::rpc::StringValue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVersion_, context, request, response);
}

void BaseNode::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::StringValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::StringValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::StringValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, reactor);
}

void BaseNode::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::StringValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::StringValue>* BaseNode::Stub::AsyncGetVersionRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::StringValue>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::StringValue>* BaseNode::Stub::PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::StringValue>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, false);
}

::grpc::ClientReader< ::tari::rpc::ValueAtHeightResponse>* BaseNode::Stub::GetTokensInCirculationRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::tari::rpc::ValueAtHeightResponse>::Create(channel_.get(), rpcmethod_GetTokensInCirculation_, context, request);
}

void BaseNode::Stub::experimental_async::GetTokensInCirculation(::grpc::ClientContext* context, ::tari::rpc::GetBlocksRequest* request, ::grpc::experimental::ClientReadReactor< ::tari::rpc::ValueAtHeightResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::tari::rpc::ValueAtHeightResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetTokensInCirculation_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::tari::rpc::ValueAtHeightResponse>* BaseNode::Stub::AsyncGetTokensInCirculationRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::tari::rpc::ValueAtHeightResponse>::Create(channel_.get(), cq, rpcmethod_GetTokensInCirculation_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::tari::rpc::ValueAtHeightResponse>* BaseNode::Stub::PrepareAsyncGetTokensInCirculationRaw(::grpc::ClientContext* context, const ::tari::rpc::GetBlocksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::tari::rpc::ValueAtHeightResponse>::Create(channel_.get(), cq, rpcmethod_GetTokensInCirculation_, context, request, false, nullptr);
}

::grpc::ClientReader< ::tari::rpc::NetworkDifficultyResponse>* BaseNode::Stub::GetNetworkDifficultyRaw(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::tari::rpc::NetworkDifficultyResponse>::Create(channel_.get(), rpcmethod_GetNetworkDifficulty_, context, request);
}

void BaseNode::Stub::experimental_async::GetNetworkDifficulty(::grpc::ClientContext* context, ::tari::rpc::HeightRequest* request, ::grpc::experimental::ClientReadReactor< ::tari::rpc::NetworkDifficultyResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::tari::rpc::NetworkDifficultyResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetNetworkDifficulty_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::tari::rpc::NetworkDifficultyResponse>* BaseNode::Stub::AsyncGetNetworkDifficultyRaw(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::tari::rpc::NetworkDifficultyResponse>::Create(channel_.get(), cq, rpcmethod_GetNetworkDifficulty_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::tari::rpc::NetworkDifficultyResponse>* BaseNode::Stub::PrepareAsyncGetNetworkDifficultyRaw(::grpc::ClientContext* context, const ::tari::rpc::HeightRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::tari::rpc::NetworkDifficultyResponse>::Create(channel_.get(), cq, rpcmethod_GetNetworkDifficulty_, context, request, false, nullptr);
}

::grpc::Status BaseNode::Stub::GetNewBlockTemplate(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo& request, ::tari::rpc::NewBlockTemplateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNewBlockTemplate_, context, request, response);
}

void BaseNode::Stub::experimental_async::GetNewBlockTemplate(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo* request, ::tari::rpc::NewBlockTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNewBlockTemplate_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetNewBlockTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::NewBlockTemplateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNewBlockTemplate_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetNewBlockTemplate(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo* request, ::tari::rpc::NewBlockTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNewBlockTemplate_, context, request, response, reactor);
}

void BaseNode::Stub::experimental_async::GetNewBlockTemplate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::NewBlockTemplateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNewBlockTemplate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::NewBlockTemplateResponse>* BaseNode::Stub::AsyncGetNewBlockTemplateRaw(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::NewBlockTemplateResponse>::Create(channel_.get(), cq, rpcmethod_GetNewBlockTemplate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::NewBlockTemplateResponse>* BaseNode::Stub::PrepareAsyncGetNewBlockTemplateRaw(::grpc::ClientContext* context, const ::tari::rpc::PowAlgo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::NewBlockTemplateResponse>::Create(channel_.get(), cq, rpcmethod_GetNewBlockTemplate_, context, request, false);
}

::grpc::Status BaseNode::Stub::GetNewBlock(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate& request, ::tari::rpc::GetNewBlockResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNewBlock_, context, request, response);
}

void BaseNode::Stub::experimental_async::GetNewBlock(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate* request, ::tari::rpc::GetNewBlockResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNewBlock_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetNewBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::GetNewBlockResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNewBlock_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetNewBlock(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate* request, ::tari::rpc::GetNewBlockResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNewBlock_, context, request, response, reactor);
}

void BaseNode::Stub::experimental_async::GetNewBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::GetNewBlockResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNewBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::GetNewBlockResult>* BaseNode::Stub::AsyncGetNewBlockRaw(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::GetNewBlockResult>::Create(channel_.get(), cq, rpcmethod_GetNewBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::GetNewBlockResult>* BaseNode::Stub::PrepareAsyncGetNewBlockRaw(::grpc::ClientContext* context, const ::tari::rpc::NewBlockTemplate& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::GetNewBlockResult>::Create(channel_.get(), cq, rpcmethod_GetNewBlock_, context, request, false);
}

::grpc::Status BaseNode::Stub::SubmitBlock(::grpc::ClientContext* context, const ::tari::rpc::Block& request, ::tari::rpc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SubmitBlock_, context, request, response);
}

void BaseNode::Stub::experimental_async::SubmitBlock(::grpc::ClientContext* context, const ::tari::rpc::Block* request, ::tari::rpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SubmitBlock_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::SubmitBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SubmitBlock_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::SubmitBlock(::grpc::ClientContext* context, const ::tari::rpc::Block* request, ::tari::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SubmitBlock_, context, request, response, reactor);
}

void BaseNode::Stub::experimental_async::SubmitBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SubmitBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::Empty>* BaseNode::Stub::AsyncSubmitBlockRaw(::grpc::ClientContext* context, const ::tari::rpc::Block& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::Empty>::Create(channel_.get(), cq, rpcmethod_SubmitBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::Empty>* BaseNode::Stub::PrepareAsyncSubmitBlockRaw(::grpc::ClientContext* context, const ::tari::rpc::Block& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::Empty>::Create(channel_.get(), cq, rpcmethod_SubmitBlock_, context, request, false);
}

::grpc::Status BaseNode::Stub::GetSyncInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::tari::rpc::SyncInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSyncInfo_, context, request, response);
}

void BaseNode::Stub::experimental_async::GetSyncInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::SyncInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSyncInfo_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetSyncInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::SyncInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSyncInfo_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetSyncInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::SyncInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSyncInfo_, context, request, response, reactor);
}

void BaseNode::Stub::experimental_async::GetSyncInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::SyncInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSyncInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::SyncInfoResponse>* BaseNode::Stub::AsyncGetSyncInfoRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::SyncInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetSyncInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::SyncInfoResponse>* BaseNode::Stub::PrepareAsyncGetSyncInfoRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::SyncInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetSyncInfo_, context, request, false);
}

::grpc::Status BaseNode::Stub::GetTipInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::tari::rpc::TipInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTipInfo_, context, request, response);
}

void BaseNode::Stub::experimental_async::GetTipInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::TipInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTipInfo_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetTipInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::TipInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTipInfo_, context, request, response, std::move(f));
}

void BaseNode::Stub::experimental_async::GetTipInfo(::grpc::ClientContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::TipInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTipInfo_, context, request, response, reactor);
}

void BaseNode::Stub::experimental_async::GetTipInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tari::rpc::TipInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTipInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::TipInfoResponse>* BaseNode::Stub::AsyncGetTipInfoRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::TipInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetTipInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tari::rpc::TipInfoResponse>* BaseNode::Stub::PrepareAsyncGetTipInfoRaw(::grpc::ClientContext* context, const ::tari::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::tari::rpc::TipInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetTipInfo_, context, request, false);
}

::grpc::ClientReader< ::tari::rpc::HistoricalBlock>* BaseNode::Stub::SearchKernelsRaw(::grpc::ClientContext* context, const ::tari::rpc::SearchKernelsRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::tari::rpc::HistoricalBlock>::Create(channel_.get(), rpcmethod_SearchKernels_, context, request);
}

void BaseNode::Stub::experimental_async::SearchKernels(::grpc::ClientContext* context, ::tari::rpc::SearchKernelsRequest* request, ::grpc::experimental::ClientReadReactor< ::tari::rpc::HistoricalBlock>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::tari::rpc::HistoricalBlock>::Create(stub_->channel_.get(), stub_->rpcmethod_SearchKernels_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>* BaseNode::Stub::AsyncSearchKernelsRaw(::grpc::ClientContext* context, const ::tari::rpc::SearchKernelsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::tari::rpc::HistoricalBlock>::Create(channel_.get(), cq, rpcmethod_SearchKernels_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::tari::rpc::HistoricalBlock>* BaseNode::Stub::PrepareAsyncSearchKernelsRaw(::grpc::ClientContext* context, const ::tari::rpc::SearchKernelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::tari::rpc::HistoricalBlock>::Create(channel_.get(), cq, rpcmethod_SearchKernels_, context, request, false, nullptr);
}

BaseNode::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseNode_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BaseNode::Service, ::tari::rpc::ListHeadersRequest, ::tari::rpc::BlockHeader>(
          [](BaseNode::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tari::rpc::ListHeadersRequest* req,
             ::grpc_impl::ServerWriter<::tari::rpc::BlockHeader>* writer) {
               return service->ListHeaders(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseNode_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BaseNode::Service, ::tari::rpc::GetBlocksRequest, ::tari::rpc::HistoricalBlock>(
          [](BaseNode::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tari::rpc::GetBlocksRequest* req,
             ::grpc_impl::ServerWriter<::tari::rpc::HistoricalBlock>* writer) {
               return service->GetBlocks(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseNode_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BaseNode::Service, ::tari::rpc::HeightRequest, ::tari::rpc::CalcTimingResponse>(
          [](BaseNode::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tari::rpc::HeightRequest* req,
             ::tari::rpc::CalcTimingResponse* resp) {
               return service->GetCalcTiming(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseNode_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BaseNode::Service, ::tari::rpc::Empty, ::tari::rpc::ConsensusConstants>(
          [](BaseNode::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tari::rpc::Empty* req,
             ::tari::rpc::ConsensusConstants* resp) {
               return service->GetConstants(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseNode_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BaseNode::Service, ::tari::rpc::BlockGroupRequest, ::tari::rpc::BlockGroupResponse>(
          [](BaseNode::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tari::rpc::BlockGroupRequest* req,
             ::tari::rpc::BlockGroupResponse* resp) {
               return service->GetBlockSize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseNode_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BaseNode::Service, ::tari::rpc::BlockGroupRequest, ::tari::rpc::BlockGroupResponse>(
          [](BaseNode::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tari::rpc::BlockGroupRequest* req,
             ::tari::rpc::BlockGroupResponse* resp) {
               return service->GetBlockFees(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseNode_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BaseNode::Service, ::tari::rpc::Empty, ::tari::rpc::StringValue>(
          [](BaseNode::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tari::rpc::Empty* req,
             ::tari::rpc::StringValue* resp) {
               return service->GetVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseNode_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BaseNode::Service, ::tari::rpc::GetBlocksRequest, ::tari::rpc::ValueAtHeightResponse>(
          [](BaseNode::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tari::rpc::GetBlocksRequest* req,
             ::grpc_impl::ServerWriter<::tari::rpc::ValueAtHeightResponse>* writer) {
               return service->GetTokensInCirculation(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseNode_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BaseNode::Service, ::tari::rpc::HeightRequest, ::tari::rpc::NetworkDifficultyResponse>(
          [](BaseNode::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tari::rpc::HeightRequest* req,
             ::grpc_impl::ServerWriter<::tari::rpc::NetworkDifficultyResponse>* writer) {
               return service->GetNetworkDifficulty(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseNode_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BaseNode::Service, ::tari::rpc::PowAlgo, ::tari::rpc::NewBlockTemplateResponse>(
          [](BaseNode::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tari::rpc::PowAlgo* req,
             ::tari::rpc::NewBlockTemplateResponse* resp) {
               return service->GetNewBlockTemplate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseNode_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BaseNode::Service, ::tari::rpc::NewBlockTemplate, ::tari::rpc::GetNewBlockResult>(
          [](BaseNode::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tari::rpc::NewBlockTemplate* req,
             ::tari::rpc::GetNewBlockResult* resp) {
               return service->GetNewBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseNode_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BaseNode::Service, ::tari::rpc::Block, ::tari::rpc::Empty>(
          [](BaseNode::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tari::rpc::Block* req,
             ::tari::rpc::Empty* resp) {
               return service->SubmitBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseNode_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BaseNode::Service, ::tari::rpc::Empty, ::tari::rpc::SyncInfoResponse>(
          [](BaseNode::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tari::rpc::Empty* req,
             ::tari::rpc::SyncInfoResponse* resp) {
               return service->GetSyncInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseNode_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BaseNode::Service, ::tari::rpc::Empty, ::tari::rpc::TipInfoResponse>(
          [](BaseNode::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tari::rpc::Empty* req,
             ::tari::rpc::TipInfoResponse* resp) {
               return service->GetTipInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BaseNode_method_names[14],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BaseNode::Service, ::tari::rpc::SearchKernelsRequest, ::tari::rpc::HistoricalBlock>(
          [](BaseNode::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::tari::rpc::SearchKernelsRequest* req,
             ::grpc_impl::ServerWriter<::tari::rpc::HistoricalBlock>* writer) {
               return service->SearchKernels(ctx, req, writer);
             }, this)));
}

BaseNode::Service::~Service() {
}

::grpc::Status BaseNode::Service::ListHeaders(::grpc::ServerContext* context, const ::tari::rpc::ListHeadersRequest* request, ::grpc::ServerWriter< ::tari::rpc::BlockHeader>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseNode::Service::GetBlocks(::grpc::ServerContext* context, const ::tari::rpc::GetBlocksRequest* request, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseNode::Service::GetCalcTiming(::grpc::ServerContext* context, const ::tari::rpc::HeightRequest* request, ::tari::rpc::CalcTimingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseNode::Service::GetConstants(::grpc::ServerContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::ConsensusConstants* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseNode::Service::GetBlockSize(::grpc::ServerContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseNode::Service::GetBlockFees(::grpc::ServerContext* context, const ::tari::rpc::BlockGroupRequest* request, ::tari::rpc::BlockGroupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseNode::Service::GetVersion(::grpc::ServerContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::StringValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseNode::Service::GetTokensInCirculation(::grpc::ServerContext* context, const ::tari::rpc::GetBlocksRequest* request, ::grpc::ServerWriter< ::tari::rpc::ValueAtHeightResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseNode::Service::GetNetworkDifficulty(::grpc::ServerContext* context, const ::tari::rpc::HeightRequest* request, ::grpc::ServerWriter< ::tari::rpc::NetworkDifficultyResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseNode::Service::GetNewBlockTemplate(::grpc::ServerContext* context, const ::tari::rpc::PowAlgo* request, ::tari::rpc::NewBlockTemplateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseNode::Service::GetNewBlock(::grpc::ServerContext* context, const ::tari::rpc::NewBlockTemplate* request, ::tari::rpc::GetNewBlockResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseNode::Service::SubmitBlock(::grpc::ServerContext* context, const ::tari::rpc::Block* request, ::tari::rpc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseNode::Service::GetSyncInfo(::grpc::ServerContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::SyncInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseNode::Service::GetTipInfo(::grpc::ServerContext* context, const ::tari::rpc::Empty* request, ::tari::rpc::TipInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BaseNode::Service::SearchKernels(::grpc::ServerContext* context, const ::tari::rpc::SearchKernelsRequest* request, ::grpc::ServerWriter< ::tari::rpc::HistoricalBlock>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tari
}  // namespace rpc
