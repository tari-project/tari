// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_node.proto

#include "base_node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Block_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HistoricalBlock_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetaData_base_5fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fnode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MinerData_base_5fnode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NewBlockTemplate_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowAlgo_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Signature_types_2eproto;
namespace tari {
namespace rpc {
class TipInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TipInfoResponse> _instance;
} _TipInfoResponse_default_instance_;
class NewBlockTemplateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewBlockTemplateResponse> _instance;
} _NewBlockTemplateResponse_default_instance_;
class EmptyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Empty> _instance;
} _Empty_default_instance_;
class NetworkDifficultyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkDifficultyResponse> _instance;
} _NetworkDifficultyResponse_default_instance_;
class ValueAtHeightResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValueAtHeightResponse> _instance;
} _ValueAtHeightResponse_default_instance_;
class IntegerValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntegerValue> _instance;
} _IntegerValue_default_instance_;
class StringValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringValue> _instance;
} _StringValue_default_instance_;
class BlockGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockGroupRequest> _instance;
} _BlockGroupRequest_default_instance_;
class BlockGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockGroupResponse> _instance;
} _BlockGroupResponse_default_instance_;
class HeightRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeightRequest> _instance;
} _HeightRequest_default_instance_;
class CalcTimingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CalcTimingResponse> _instance;
} _CalcTimingResponse_default_instance_;
class ListHeadersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListHeadersRequest> _instance;
} _ListHeadersRequest_default_instance_;
class GetBlocksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlocksRequest> _instance;
} _GetBlocksRequest_default_instance_;
class GetBlocksResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlocksResponse> _instance;
} _GetBlocksResponse_default_instance_;
class MetaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaData> _instance;
} _MetaData_default_instance_;
class SyncInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncInfoResponse> _instance;
} _SyncInfoResponse_default_instance_;
class GetNewBlockResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNewBlockResult> _instance;
} _GetNewBlockResult_default_instance_;
class MinerDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MinerData> _instance;
} _MinerData_default_instance_;
class SearchKernelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchKernelsRequest> _instance;
} _SearchKernelsRequest_default_instance_;
}  // namespace rpc
}  // namespace tari
static void InitDefaultsscc_info_BlockGroupRequest_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_BlockGroupRequest_default_instance_;
    new (ptr) ::tari::rpc::BlockGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::BlockGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockGroupRequest_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockGroupRequest_base_5fnode_2eproto}, {}};

static void InitDefaultsscc_info_BlockGroupResponse_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_BlockGroupResponse_default_instance_;
    new (ptr) ::tari::rpc::BlockGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::BlockGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockGroupResponse_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockGroupResponse_base_5fnode_2eproto}, {}};

static void InitDefaultsscc_info_CalcTimingResponse_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_CalcTimingResponse_default_instance_;
    new (ptr) ::tari::rpc::CalcTimingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::CalcTimingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CalcTimingResponse_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CalcTimingResponse_base_5fnode_2eproto}, {}};

static void InitDefaultsscc_info_Empty_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_Empty_default_instance_;
    new (ptr) ::tari::rpc::Empty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::Empty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Empty_base_5fnode_2eproto}, {}};

static void InitDefaultsscc_info_GetBlocksRequest_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_GetBlocksRequest_default_instance_;
    new (ptr) ::tari::rpc::GetBlocksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::GetBlocksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlocksRequest_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlocksRequest_base_5fnode_2eproto}, {}};

static void InitDefaultsscc_info_GetBlocksResponse_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_GetBlocksResponse_default_instance_;
    new (ptr) ::tari::rpc::GetBlocksResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::GetBlocksResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBlocksResponse_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBlocksResponse_base_5fnode_2eproto}, {
      &scc_info_HistoricalBlock_types_2eproto.base,}};

static void InitDefaultsscc_info_GetNewBlockResult_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_GetNewBlockResult_default_instance_;
    new (ptr) ::tari::rpc::GetNewBlockResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::GetNewBlockResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetNewBlockResult_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetNewBlockResult_base_5fnode_2eproto}, {
      &scc_info_Block_types_2eproto.base,
      &scc_info_MinerData_base_5fnode_2eproto.base,}};

static void InitDefaultsscc_info_HeightRequest_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_HeightRequest_default_instance_;
    new (ptr) ::tari::rpc::HeightRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::HeightRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeightRequest_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeightRequest_base_5fnode_2eproto}, {}};

static void InitDefaultsscc_info_IntegerValue_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_IntegerValue_default_instance_;
    new (ptr) ::tari::rpc::IntegerValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::IntegerValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntegerValue_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IntegerValue_base_5fnode_2eproto}, {}};

static void InitDefaultsscc_info_ListHeadersRequest_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_ListHeadersRequest_default_instance_;
    new (ptr) ::tari::rpc::ListHeadersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::ListHeadersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListHeadersRequest_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListHeadersRequest_base_5fnode_2eproto}, {}};

static void InitDefaultsscc_info_MetaData_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_MetaData_default_instance_;
    new (ptr) ::tari::rpc::MetaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::MetaData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetaData_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MetaData_base_5fnode_2eproto}, {}};

static void InitDefaultsscc_info_MinerData_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_MinerData_default_instance_;
    new (ptr) ::tari::rpc::MinerData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::MinerData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MinerData_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MinerData_base_5fnode_2eproto}, {
      &scc_info_PowAlgo_types_2eproto.base,}};

static void InitDefaultsscc_info_NetworkDifficultyResponse_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_NetworkDifficultyResponse_default_instance_;
    new (ptr) ::tari::rpc::NetworkDifficultyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::NetworkDifficultyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkDifficultyResponse_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkDifficultyResponse_base_5fnode_2eproto}, {}};

static void InitDefaultsscc_info_NewBlockTemplateResponse_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_NewBlockTemplateResponse_default_instance_;
    new (ptr) ::tari::rpc::NewBlockTemplateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::NewBlockTemplateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NewBlockTemplateResponse_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NewBlockTemplateResponse_base_5fnode_2eproto}, {
      &scc_info_NewBlockTemplate_types_2eproto.base,}};

static void InitDefaultsscc_info_SearchKernelsRequest_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_SearchKernelsRequest_default_instance_;
    new (ptr) ::tari::rpc::SearchKernelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::SearchKernelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchKernelsRequest_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SearchKernelsRequest_base_5fnode_2eproto}, {
      &scc_info_Signature_types_2eproto.base,}};

static void InitDefaultsscc_info_StringValue_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_StringValue_default_instance_;
    new (ptr) ::tari::rpc::StringValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::StringValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringValue_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StringValue_base_5fnode_2eproto}, {}};

static void InitDefaultsscc_info_SyncInfoResponse_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_SyncInfoResponse_default_instance_;
    new (ptr) ::tari::rpc::SyncInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::SyncInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncInfoResponse_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SyncInfoResponse_base_5fnode_2eproto}, {}};

static void InitDefaultsscc_info_TipInfoResponse_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_TipInfoResponse_default_instance_;
    new (ptr) ::tari::rpc::TipInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::TipInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TipInfoResponse_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TipInfoResponse_base_5fnode_2eproto}, {
      &scc_info_MetaData_base_5fnode_2eproto.base,}};

static void InitDefaultsscc_info_ValueAtHeightResponse_base_5fnode_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tari::rpc::_ValueAtHeightResponse_default_instance_;
    new (ptr) ::tari::rpc::ValueAtHeightResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tari::rpc::ValueAtHeightResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValueAtHeightResponse_base_5fnode_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValueAtHeightResponse_base_5fnode_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_base_5fnode_2eproto[19];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_base_5fnode_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_base_5fnode_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_base_5fnode_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TipInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::TipInfoResponse, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NewBlockTemplateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NewBlockTemplateResponse, new_block_template_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NewBlockTemplateResponse, block_reward_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NetworkDifficultyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NetworkDifficultyResponse, difficulty_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NetworkDifficultyResponse, estimated_hash_rate_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NetworkDifficultyResponse, height_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::NetworkDifficultyResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ValueAtHeightResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ValueAtHeightResponse, value_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ValueAtHeightResponse, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::IntegerValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::IntegerValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::StringValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::StringValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockGroupRequest, from_tip_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockGroupRequest, start_height_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockGroupRequest, end_height_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockGroupRequest, calc_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockGroupResponse, value_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::BlockGroupResponse, calc_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::HeightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::HeightRequest, from_tip_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::HeightRequest, start_height_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::HeightRequest, end_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::CalcTimingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::CalcTimingResponse, max_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::CalcTimingResponse, min_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::CalcTimingResponse, avg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ListHeadersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ListHeadersRequest, from_height_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ListHeadersRequest, num_headers_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::ListHeadersRequest, sorting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::GetBlocksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::GetBlocksRequest, heights_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::GetBlocksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::GetBlocksResponse, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::MetaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::MetaData, height_of_longest_chain_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::MetaData, best_block_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::MetaData, pruning_horizon_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::MetaData, accumulated_difficulty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::SyncInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::SyncInfoResponse, tip_height_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::SyncInfoResponse, local_height_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::SyncInfoResponse, peer_node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::GetNewBlockResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::GetNewBlockResult, block_hash_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::GetNewBlockResult, block_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::GetNewBlockResult, miner_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::MinerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::MinerData, algo_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::MinerData, target_difficulty_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::MinerData, reward_),
  PROTOBUF_FIELD_OFFSET(::tari::rpc::MinerData, merge_mining_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::SearchKernelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tari::rpc::SearchKernelsRequest, signatures_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tari::rpc::TipInfoResponse)},
  { 6, -1, sizeof(::tari::rpc::NewBlockTemplateResponse)},
  { 13, -1, sizeof(::tari::rpc::Empty)},
  { 18, -1, sizeof(::tari::rpc::NetworkDifficultyResponse)},
  { 27, -1, sizeof(::tari::rpc::ValueAtHeightResponse)},
  { 34, -1, sizeof(::tari::rpc::IntegerValue)},
  { 40, -1, sizeof(::tari::rpc::StringValue)},
  { 46, -1, sizeof(::tari::rpc::BlockGroupRequest)},
  { 55, -1, sizeof(::tari::rpc::BlockGroupResponse)},
  { 62, -1, sizeof(::tari::rpc::HeightRequest)},
  { 70, -1, sizeof(::tari::rpc::CalcTimingResponse)},
  { 78, -1, sizeof(::tari::rpc::ListHeadersRequest)},
  { 86, -1, sizeof(::tari::rpc::GetBlocksRequest)},
  { 92, -1, sizeof(::tari::rpc::GetBlocksResponse)},
  { 98, -1, sizeof(::tari::rpc::MetaData)},
  { 107, -1, sizeof(::tari::rpc::SyncInfoResponse)},
  { 115, -1, sizeof(::tari::rpc::GetNewBlockResult)},
  { 123, -1, sizeof(::tari::rpc::MinerData)},
  { 132, -1, sizeof(::tari::rpc::SearchKernelsRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_TipInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_NewBlockTemplateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_Empty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_NetworkDifficultyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_ValueAtHeightResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_IntegerValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_StringValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_BlockGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_BlockGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_HeightRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_CalcTimingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_ListHeadersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_GetBlocksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_GetBlocksResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_MetaData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_SyncInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_GetNewBlockResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_MinerData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tari::rpc::_SearchKernelsRequest_default_instance_),
};

const char descriptor_table_protodef_base_5fnode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017base_node.proto\022\010tari.rpc\032\036google/prot"
  "obuf/wrappers.proto\032\037google/protobuf/tim"
  "estamp.proto\032\013types.proto\"7\n\017TipInfoResp"
  "onse\022$\n\010metadata\030\001 \001(\0132\022.tari.rpc.MetaDa"
  "ta\"h\n\030NewBlockTemplateResponse\0226\n\022new_bl"
  "ock_template\030\001 \001(\0132\032.tari.rpc.NewBlockTe"
  "mplate\022\024\n\014block_reward\030\002 \001(\004\"\007\n\005Empty\"o\n"
  "\031NetworkDifficultyResponse\022\022\n\ndifficulty"
  "\030\001 \001(\004\022\033\n\023estimated_hash_rate\030\002 \001(\004\022\016\n\006h"
  "eight\030\003 \001(\004\022\021\n\ttimestamp\030\004 \001(\004\"6\n\025ValueA"
  "tHeightResponse\022\r\n\005value\030\001 \001(\004\022\016\n\006height"
  "\030\002 \001(\004\"\035\n\014IntegerValue\022\r\n\005value\030\001 \001(\004\"\034\n"
  "\013StringValue\022\r\n\005value\030\001 \001(\t\"v\n\021BlockGrou"
  "pRequest\022\020\n\010from_tip\030\001 \001(\004\022\024\n\014start_heig"
  "ht\030\002 \001(\004\022\022\n\nend_height\030\003 \001(\004\022%\n\tcalc_typ"
  "e\030\004 \001(\0162\022.tari.rpc.CalcType\"J\n\022BlockGrou"
  "pResponse\022\r\n\005value\030\001 \003(\001\022%\n\tcalc_type\030\002 "
  "\001(\0162\022.tari.rpc.CalcType\"K\n\rHeightRequest"
  "\022\020\n\010from_tip\030\001 \001(\004\022\024\n\014start_height\030\002 \001(\004"
  "\022\022\n\nend_height\030\003 \001(\004\";\n\022CalcTimingRespon"
  "se\022\013\n\003max\030\001 \001(\004\022\013\n\003min\030\002 \001(\004\022\013\n\003avg\030\003 \001("
  "\001\"b\n\022ListHeadersRequest\022\023\n\013from_height\030\001"
  " \001(\004\022\023\n\013num_headers\030\002 \001(\004\022\"\n\007sorting\030\003 \001"
  "(\0162\021.tari.rpc.Sorting\"#\n\020GetBlocksReques"
  "t\022\017\n\007heights\030\001 \003(\004\">\n\021GetBlocksResponse\022"
  ")\n\006blocks\030\001 \003(\0132\031.tari.rpc.HistoricalBlo"
  "ck\"x\n\010MetaData\022\037\n\027height_of_longest_chai"
  "n\030\001 \001(\004\022\022\n\nbest_block\030\002 \001(\014\022\027\n\017pruning_h"
  "orizon\030\004 \001(\004\022\036\n\026accumulated_difficulty\030\005"
  " \001(\004\"R\n\020SyncInfoResponse\022\022\n\ntip_height\030\001"
  " \001(\004\022\024\n\014local_height\030\002 \001(\004\022\024\n\014peer_node_"
  "id\030\003 \003(\014\"p\n\021GetNewBlockResult\022\022\n\nblock_h"
  "ash\030\001 \001(\014\022\036\n\005block\030\002 \001(\0132\017.tari.rpc.Bloc"
  "k\022\'\n\nminer_data\030\003 \001(\0132\023.tari.rpc.MinerDa"
  "ta\"r\n\tMinerData\022\037\n\004algo\030\001 \001(\0132\021.tari.rpc"
  ".PowAlgo\022\031\n\021target_difficulty\030\002 \001(\004\022\016\n\006r"
  "eward\030\003 \001(\004\022\031\n\021merge_mining_hash\030\004 \001(\014\"\?"
  "\n\024SearchKernelsRequest\022\'\n\nsignatures\030\001 \003"
  "(\0132\023.tari.rpc.Signature*<\n\010CalcType\022\010\n\004M"
  "EAN\020\000\022\n\n\006MEDIAN\020\001\022\014\n\010QUANTILE\020\002\022\014\n\010QUART"
  "ILE\020\003*,\n\007Sorting\022\020\n\014SORTING_DESC\020\000\022\017\n\013SO"
  "RTING_ASC\020\0012\245\010\n\010BaseNode\022D\n\013ListHeaders\022"
  "\034.tari.rpc.ListHeadersRequest\032\025.tari.rpc"
  ".BlockHeader0\001\022D\n\tGetBlocks\022\032.tari.rpc.G"
  "etBlocksRequest\032\031.tari.rpc.HistoricalBlo"
  "ck0\001\022F\n\rGetCalcTiming\022\027.tari.rpc.HeightR"
  "equest\032\034.tari.rpc.CalcTimingResponse\022=\n\014"
  "GetConstants\022\017.tari.rpc.Empty\032\034.tari.rpc"
  ".ConsensusConstants\022I\n\014GetBlockSize\022\033.ta"
  "ri.rpc.BlockGroupRequest\032\034.tari.rpc.Bloc"
  "kGroupResponse\022I\n\014GetBlockFees\022\033.tari.rp"
  "c.BlockGroupRequest\032\034.tari.rpc.BlockGrou"
  "pResponse\0224\n\nGetVersion\022\017.tari.rpc.Empty"
  "\032\025.tari.rpc.StringValue\022W\n\026GetTokensInCi"
  "rculation\022\032.tari.rpc.GetBlocksRequest\032\037."
  "tari.rpc.ValueAtHeightResponse0\001\022V\n\024GetN"
  "etworkDifficulty\022\027.tari.rpc.HeightReques"
  "t\032#.tari.rpc.NetworkDifficultyResponse0\001"
  "\022L\n\023GetNewBlockTemplate\022\021.tari.rpc.PowAl"
  "go\032\".tari.rpc.NewBlockTemplateResponse\022F"
  "\n\013GetNewBlock\022\032.tari.rpc.NewBlockTemplat"
  "e\032\033.tari.rpc.GetNewBlockResult\022/\n\013Submit"
  "Block\022\017.tari.rpc.Block\032\017.tari.rpc.Empty\022"
  ":\n\013GetSyncInfo\022\017.tari.rpc.Empty\032\032.tari.r"
  "pc.SyncInfoResponse\0228\n\nGetTipInfo\022\017.tari"
  ".rpc.Empty\032\031.tari.rpc.TipInfoResponse\022L\n"
  "\rSearchKernels\022\036.tari.rpc.SearchKernelsR"
  "equest\032\031.tari.rpc.HistoricalBlock0\001b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_base_5fnode_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_types_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_base_5fnode_2eproto_sccs[19] = {
  &scc_info_BlockGroupRequest_base_5fnode_2eproto.base,
  &scc_info_BlockGroupResponse_base_5fnode_2eproto.base,
  &scc_info_CalcTimingResponse_base_5fnode_2eproto.base,
  &scc_info_Empty_base_5fnode_2eproto.base,
  &scc_info_GetBlocksRequest_base_5fnode_2eproto.base,
  &scc_info_GetBlocksResponse_base_5fnode_2eproto.base,
  &scc_info_GetNewBlockResult_base_5fnode_2eproto.base,
  &scc_info_HeightRequest_base_5fnode_2eproto.base,
  &scc_info_IntegerValue_base_5fnode_2eproto.base,
  &scc_info_ListHeadersRequest_base_5fnode_2eproto.base,
  &scc_info_MetaData_base_5fnode_2eproto.base,
  &scc_info_MinerData_base_5fnode_2eproto.base,
  &scc_info_NetworkDifficultyResponse_base_5fnode_2eproto.base,
  &scc_info_NewBlockTemplateResponse_base_5fnode_2eproto.base,
  &scc_info_SearchKernelsRequest_base_5fnode_2eproto.base,
  &scc_info_StringValue_base_5fnode_2eproto.base,
  &scc_info_SyncInfoResponse_base_5fnode_2eproto.base,
  &scc_info_TipInfoResponse_base_5fnode_2eproto.base,
  &scc_info_ValueAtHeightResponse_base_5fnode_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_base_5fnode_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_5fnode_2eproto = {
  false, false, descriptor_table_protodef_base_5fnode_2eproto, "base_node.proto", 2723,
  &descriptor_table_base_5fnode_2eproto_once, descriptor_table_base_5fnode_2eproto_sccs, descriptor_table_base_5fnode_2eproto_deps, 19, 3,
  schemas, file_default_instances, TableStruct_base_5fnode_2eproto::offsets,
  file_level_metadata_base_5fnode_2eproto, 19, file_level_enum_descriptors_base_5fnode_2eproto, file_level_service_descriptors_base_5fnode_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_base_5fnode_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_base_5fnode_2eproto)), true);
namespace tari {
namespace rpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalcType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fnode_2eproto);
  return file_level_enum_descriptors_base_5fnode_2eproto[0];
}
bool CalcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sorting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_base_5fnode_2eproto);
  return file_level_enum_descriptors_base_5fnode_2eproto[1];
}
bool Sorting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TipInfoResponse::InitAsDefaultInstance() {
  ::tari::rpc::_TipInfoResponse_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::tari::rpc::MetaData*>(
      ::tari::rpc::MetaData::internal_default_instance());
}
class TipInfoResponse::_Internal {
 public:
  static const ::tari::rpc::MetaData& metadata(const TipInfoResponse* msg);
};

const ::tari::rpc::MetaData&
TipInfoResponse::_Internal::metadata(const TipInfoResponse* msg) {
  return *msg->metadata_;
}
TipInfoResponse::TipInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.TipInfoResponse)
}
TipInfoResponse::TipInfoResponse(const TipInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::tari::rpc::MetaData(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tari.rpc.TipInfoResponse)
}

void TipInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TipInfoResponse_base_5fnode_2eproto.base);
  metadata_ = nullptr;
}

TipInfoResponse::~TipInfoResponse() {
  // @@protoc_insertion_point(destructor:tari.rpc.TipInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TipInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void TipInfoResponse::ArenaDtor(void* object) {
  TipInfoResponse* _this = reinterpret_cast< TipInfoResponse* >(object);
  (void)_this;
}
void TipInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TipInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TipInfoResponse& TipInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TipInfoResponse_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void TipInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.TipInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TipInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tari.rpc.MetaData metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TipInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.TipInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tari.rpc.MetaData metadata = 1;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.TipInfoResponse)
  return target;
}

size_t TipInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.TipInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tari.rpc.MetaData metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TipInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.TipInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TipInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TipInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.TipInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.TipInfoResponse)
    MergeFrom(*source);
  }
}

void TipInfoResponse::MergeFrom(const TipInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.TipInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_metadata()) {
    _internal_mutable_metadata()->::tari::rpc::MetaData::MergeFrom(from._internal_metadata());
  }
}

void TipInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.TipInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TipInfoResponse::CopyFrom(const TipInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.TipInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TipInfoResponse::IsInitialized() const {
  return true;
}

void TipInfoResponse::InternalSwap(TipInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TipInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewBlockTemplateResponse::InitAsDefaultInstance() {
  ::tari::rpc::_NewBlockTemplateResponse_default_instance_._instance.get_mutable()->new_block_template_ = const_cast< ::tari::rpc::NewBlockTemplate*>(
      ::tari::rpc::NewBlockTemplate::internal_default_instance());
}
class NewBlockTemplateResponse::_Internal {
 public:
  static const ::tari::rpc::NewBlockTemplate& new_block_template(const NewBlockTemplateResponse* msg);
};

const ::tari::rpc::NewBlockTemplate&
NewBlockTemplateResponse::_Internal::new_block_template(const NewBlockTemplateResponse* msg) {
  return *msg->new_block_template_;
}
void NewBlockTemplateResponse::clear_new_block_template() {
  if (GetArena() == nullptr && new_block_template_ != nullptr) {
    delete new_block_template_;
  }
  new_block_template_ = nullptr;
}
NewBlockTemplateResponse::NewBlockTemplateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.NewBlockTemplateResponse)
}
NewBlockTemplateResponse::NewBlockTemplateResponse(const NewBlockTemplateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_new_block_template()) {
    new_block_template_ = new ::tari::rpc::NewBlockTemplate(*from.new_block_template_);
  } else {
    new_block_template_ = nullptr;
  }
  block_reward_ = from.block_reward_;
  // @@protoc_insertion_point(copy_constructor:tari.rpc.NewBlockTemplateResponse)
}

void NewBlockTemplateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewBlockTemplateResponse_base_5fnode_2eproto.base);
  ::memset(&new_block_template_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&block_reward_) -
      reinterpret_cast<char*>(&new_block_template_)) + sizeof(block_reward_));
}

NewBlockTemplateResponse::~NewBlockTemplateResponse() {
  // @@protoc_insertion_point(destructor:tari.rpc.NewBlockTemplateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewBlockTemplateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete new_block_template_;
}

void NewBlockTemplateResponse::ArenaDtor(void* object) {
  NewBlockTemplateResponse* _this = reinterpret_cast< NewBlockTemplateResponse* >(object);
  (void)_this;
}
void NewBlockTemplateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewBlockTemplateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewBlockTemplateResponse& NewBlockTemplateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewBlockTemplateResponse_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void NewBlockTemplateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.NewBlockTemplateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && new_block_template_ != nullptr) {
    delete new_block_template_;
  }
  new_block_template_ = nullptr;
  block_reward_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewBlockTemplateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tari.rpc.NewBlockTemplate new_block_template = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_block_template(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 block_reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewBlockTemplateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.NewBlockTemplateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tari.rpc.NewBlockTemplate new_block_template = 1;
  if (this->has_new_block_template()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::new_block_template(this), target, stream);
  }

  // uint64 block_reward = 2;
  if (this->block_reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_block_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.NewBlockTemplateResponse)
  return target;
}

size_t NewBlockTemplateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.NewBlockTemplateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tari.rpc.NewBlockTemplate new_block_template = 1;
  if (this->has_new_block_template()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_block_template_);
  }

  // uint64 block_reward = 2;
  if (this->block_reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_block_reward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewBlockTemplateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.NewBlockTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewBlockTemplateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewBlockTemplateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.NewBlockTemplateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.NewBlockTemplateResponse)
    MergeFrom(*source);
  }
}

void NewBlockTemplateResponse::MergeFrom(const NewBlockTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.NewBlockTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_new_block_template()) {
    _internal_mutable_new_block_template()->::tari::rpc::NewBlockTemplate::MergeFrom(from._internal_new_block_template());
  }
  if (from.block_reward() != 0) {
    _internal_set_block_reward(from._internal_block_reward());
  }
}

void NewBlockTemplateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.NewBlockTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewBlockTemplateResponse::CopyFrom(const NewBlockTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.NewBlockTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewBlockTemplateResponse::IsInitialized() const {
  return true;
}

void NewBlockTemplateResponse::InternalSwap(NewBlockTemplateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewBlockTemplateResponse, block_reward_)
      + sizeof(NewBlockTemplateResponse::block_reward_)
      - PROTOBUF_FIELD_OFFSET(NewBlockTemplateResponse, new_block_template_)>(
          reinterpret_cast<char*>(&new_block_template_),
          reinterpret_cast<char*>(&other->new_block_template_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewBlockTemplateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Empty::InitAsDefaultInstance() {
}
class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tari.rpc.Empty)
}

void Empty::SharedCtor() {
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:tari.rpc.Empty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Empty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Empty::ArenaDtor(void* object) {
  Empty* _this = reinterpret_cast< Empty* >(object);
  (void)_this;
}
void Empty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Empty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Empty& Empty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Empty_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Empty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Empty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.Empty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.Empty)
  return target;
}

size_t Empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.Empty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Empty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  const Empty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Empty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.Empty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.Empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Empty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {
  return true;
}

void Empty::InternalSwap(Empty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkDifficultyResponse::InitAsDefaultInstance() {
}
class NetworkDifficultyResponse::_Internal {
 public:
};

NetworkDifficultyResponse::NetworkDifficultyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.NetworkDifficultyResponse)
}
NetworkDifficultyResponse::NetworkDifficultyResponse(const NetworkDifficultyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&difficulty_, &from.difficulty_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&difficulty_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:tari.rpc.NetworkDifficultyResponse)
}

void NetworkDifficultyResponse::SharedCtor() {
  ::memset(&difficulty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&difficulty_)) + sizeof(timestamp_));
}

NetworkDifficultyResponse::~NetworkDifficultyResponse() {
  // @@protoc_insertion_point(destructor:tari.rpc.NetworkDifficultyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkDifficultyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetworkDifficultyResponse::ArenaDtor(void* object) {
  NetworkDifficultyResponse* _this = reinterpret_cast< NetworkDifficultyResponse* >(object);
  (void)_this;
}
void NetworkDifficultyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkDifficultyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkDifficultyResponse& NetworkDifficultyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkDifficultyResponse_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void NetworkDifficultyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.NetworkDifficultyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&difficulty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&difficulty_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkDifficultyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 difficulty = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 estimated_hash_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          estimated_hash_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkDifficultyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.NetworkDifficultyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 difficulty = 1;
  if (this->difficulty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_difficulty(), target);
  }

  // uint64 estimated_hash_rate = 2;
  if (this->estimated_hash_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_estimated_hash_rate(), target);
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_height(), target);
  }

  // uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.NetworkDifficultyResponse)
  return target;
}

size_t NetworkDifficultyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.NetworkDifficultyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 difficulty = 1;
  if (this->difficulty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_difficulty());
  }

  // uint64 estimated_hash_rate = 2;
  if (this->estimated_hash_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_estimated_hash_rate());
  }

  // uint64 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  // uint64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkDifficultyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.NetworkDifficultyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkDifficultyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkDifficultyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.NetworkDifficultyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.NetworkDifficultyResponse)
    MergeFrom(*source);
  }
}

void NetworkDifficultyResponse::MergeFrom(const NetworkDifficultyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.NetworkDifficultyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.difficulty() != 0) {
    _internal_set_difficulty(from._internal_difficulty());
  }
  if (from.estimated_hash_rate() != 0) {
    _internal_set_estimated_hash_rate(from._internal_estimated_hash_rate());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void NetworkDifficultyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.NetworkDifficultyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkDifficultyResponse::CopyFrom(const NetworkDifficultyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.NetworkDifficultyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkDifficultyResponse::IsInitialized() const {
  return true;
}

void NetworkDifficultyResponse::InternalSwap(NetworkDifficultyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkDifficultyResponse, timestamp_)
      + sizeof(NetworkDifficultyResponse::timestamp_)
      - PROTOBUF_FIELD_OFFSET(NetworkDifficultyResponse, difficulty_)>(
          reinterpret_cast<char*>(&difficulty_),
          reinterpret_cast<char*>(&other->difficulty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkDifficultyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValueAtHeightResponse::InitAsDefaultInstance() {
}
class ValueAtHeightResponse::_Internal {
 public:
};

ValueAtHeightResponse::ValueAtHeightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.ValueAtHeightResponse)
}
ValueAtHeightResponse::ValueAtHeightResponse(const ValueAtHeightResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&value_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:tari.rpc.ValueAtHeightResponse)
}

void ValueAtHeightResponse::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&value_)) + sizeof(height_));
}

ValueAtHeightResponse::~ValueAtHeightResponse() {
  // @@protoc_insertion_point(destructor:tari.rpc.ValueAtHeightResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ValueAtHeightResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ValueAtHeightResponse::ArenaDtor(void* object) {
  ValueAtHeightResponse* _this = reinterpret_cast< ValueAtHeightResponse* >(object);
  (void)_this;
}
void ValueAtHeightResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValueAtHeightResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValueAtHeightResponse& ValueAtHeightResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValueAtHeightResponse_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void ValueAtHeightResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.ValueAtHeightResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&value_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueAtHeightResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValueAtHeightResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.ValueAtHeightResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  // uint64 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.ValueAtHeightResponse)
  return target;
}

size_t ValueAtHeightResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.ValueAtHeightResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  // uint64 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValueAtHeightResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.ValueAtHeightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ValueAtHeightResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValueAtHeightResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.ValueAtHeightResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.ValueAtHeightResponse)
    MergeFrom(*source);
  }
}

void ValueAtHeightResponse::MergeFrom(const ValueAtHeightResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.ValueAtHeightResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void ValueAtHeightResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.ValueAtHeightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueAtHeightResponse::CopyFrom(const ValueAtHeightResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.ValueAtHeightResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueAtHeightResponse::IsInitialized() const {
  return true;
}

void ValueAtHeightResponse::InternalSwap(ValueAtHeightResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ValueAtHeightResponse, height_)
      + sizeof(ValueAtHeightResponse::height_)
      - PROTOBUF_FIELD_OFFSET(ValueAtHeightResponse, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueAtHeightResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntegerValue::InitAsDefaultInstance() {
}
class IntegerValue::_Internal {
 public:
};

IntegerValue::IntegerValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.IntegerValue)
}
IntegerValue::IntegerValue(const IntegerValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:tari.rpc.IntegerValue)
}

void IntegerValue::SharedCtor() {
  value_ = PROTOBUF_ULONGLONG(0);
}

IntegerValue::~IntegerValue() {
  // @@protoc_insertion_point(destructor:tari.rpc.IntegerValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntegerValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntegerValue::ArenaDtor(void* object) {
  IntegerValue* _this = reinterpret_cast< IntegerValue* >(object);
  (void)_this;
}
void IntegerValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntegerValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntegerValue& IntegerValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntegerValue_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void IntegerValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.IntegerValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntegerValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntegerValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.IntegerValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.IntegerValue)
  return target;
}

size_t IntegerValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.IntegerValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.IntegerValue)
  GOOGLE_DCHECK_NE(&from, this);
  const IntegerValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntegerValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.IntegerValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.IntegerValue)
    MergeFrom(*source);
  }
}

void IntegerValue::MergeFrom(const IntegerValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.IntegerValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void IntegerValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.IntegerValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegerValue::CopyFrom(const IntegerValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.IntegerValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerValue::IsInitialized() const {
  return true;
}

void IntegerValue::InternalSwap(IntegerValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntegerValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StringValue::InitAsDefaultInstance() {
}
class StringValue::_Internal {
 public:
};

StringValue::StringValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.StringValue)
}
StringValue::StringValue(const StringValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:tari.rpc.StringValue)
}

void StringValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringValue_base_5fnode_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StringValue::~StringValue() {
  // @@protoc_insertion_point(destructor:tari.rpc.StringValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StringValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringValue::ArenaDtor(void* object) {
  StringValue* _this = reinterpret_cast< StringValue* >(object);
  (void)_this;
}
void StringValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringValue& StringValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringValue_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void StringValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.StringValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tari.rpc.StringValue.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.StringValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tari.rpc.StringValue.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.StringValue)
  return target;
}

size_t StringValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.StringValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.StringValue)
  GOOGLE_DCHECK_NE(&from, this);
  const StringValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.StringValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.StringValue)
    MergeFrom(*source);
  }
}

void StringValue::MergeFrom(const StringValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.StringValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void StringValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.StringValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringValue::CopyFrom(const StringValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.StringValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringValue::IsInitialized() const {
  return true;
}

void StringValue::InternalSwap(StringValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StringValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockGroupRequest::InitAsDefaultInstance() {
}
class BlockGroupRequest::_Internal {
 public:
};

BlockGroupRequest::BlockGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.BlockGroupRequest)
}
BlockGroupRequest::BlockGroupRequest(const BlockGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_tip_, &from.from_tip_,
    static_cast<size_t>(reinterpret_cast<char*>(&calc_type_) -
    reinterpret_cast<char*>(&from_tip_)) + sizeof(calc_type_));
  // @@protoc_insertion_point(copy_constructor:tari.rpc.BlockGroupRequest)
}

void BlockGroupRequest::SharedCtor() {
  ::memset(&from_tip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calc_type_) -
      reinterpret_cast<char*>(&from_tip_)) + sizeof(calc_type_));
}

BlockGroupRequest::~BlockGroupRequest() {
  // @@protoc_insertion_point(destructor:tari.rpc.BlockGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlockGroupRequest::ArenaDtor(void* object) {
  BlockGroupRequest* _this = reinterpret_cast< BlockGroupRequest* >(object);
  (void)_this;
}
void BlockGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockGroupRequest& BlockGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockGroupRequest_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void BlockGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.BlockGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_tip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&calc_type_) -
      reinterpret_cast<char*>(&from_tip_)) + sizeof(calc_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 from_tip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_tip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tari.rpc.CalcType calc_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_calc_type(static_cast<::tari::rpc::CalcType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.BlockGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 from_tip = 1;
  if (this->from_tip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_from_tip(), target);
  }

  // uint64 start_height = 2;
  if (this->start_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_start_height(), target);
  }

  // uint64 end_height = 3;
  if (this->end_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_end_height(), target);
  }

  // .tari.rpc.CalcType calc_type = 4;
  if (this->calc_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_calc_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.BlockGroupRequest)
  return target;
}

size_t BlockGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.BlockGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 from_tip = 1;
  if (this->from_tip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_from_tip());
  }

  // uint64 start_height = 2;
  if (this->start_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_height());
  }

  // uint64 end_height = 3;
  if (this->end_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_height());
  }

  // .tari.rpc.CalcType calc_type = 4;
  if (this->calc_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_calc_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.BlockGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.BlockGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.BlockGroupRequest)
    MergeFrom(*source);
  }
}

void BlockGroupRequest::MergeFrom(const BlockGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.BlockGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_tip() != 0) {
    _internal_set_from_tip(from._internal_from_tip());
  }
  if (from.start_height() != 0) {
    _internal_set_start_height(from._internal_start_height());
  }
  if (from.end_height() != 0) {
    _internal_set_end_height(from._internal_end_height());
  }
  if (from.calc_type() != 0) {
    _internal_set_calc_type(from._internal_calc_type());
  }
}

void BlockGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.BlockGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockGroupRequest::CopyFrom(const BlockGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.BlockGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockGroupRequest::IsInitialized() const {
  return true;
}

void BlockGroupRequest::InternalSwap(BlockGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockGroupRequest, calc_type_)
      + sizeof(BlockGroupRequest::calc_type_)
      - PROTOBUF_FIELD_OFFSET(BlockGroupRequest, from_tip_)>(
          reinterpret_cast<char*>(&from_tip_),
          reinterpret_cast<char*>(&other->from_tip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockGroupResponse::InitAsDefaultInstance() {
}
class BlockGroupResponse::_Internal {
 public:
};

BlockGroupResponse::BlockGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  value_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.BlockGroupResponse)
}
BlockGroupResponse::BlockGroupResponse(const BlockGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  calc_type_ = from.calc_type_;
  // @@protoc_insertion_point(copy_constructor:tari.rpc.BlockGroupResponse)
}

void BlockGroupResponse::SharedCtor() {
  calc_type_ = 0;
}

BlockGroupResponse::~BlockGroupResponse() {
  // @@protoc_insertion_point(destructor:tari.rpc.BlockGroupResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlockGroupResponse::ArenaDtor(void* object) {
  BlockGroupResponse* _this = reinterpret_cast< BlockGroupResponse* >(object);
  (void)_this;
}
void BlockGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockGroupResponse& BlockGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockGroupResponse_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void BlockGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.BlockGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  calc_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .tari.rpc.CalcType calc_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_calc_type(static_cast<::tari::rpc::CalcType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.BlockGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double value = 1;
  if (this->_internal_value_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_value(), target);
  }

  // .tari.rpc.CalcType calc_type = 2;
  if (this->calc_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_calc_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.BlockGroupResponse)
  return target;
}

size_t BlockGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.BlockGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .tari.rpc.CalcType calc_type = 2;
  if (this->calc_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_calc_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.BlockGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.BlockGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.BlockGroupResponse)
    MergeFrom(*source);
  }
}

void BlockGroupResponse::MergeFrom(const BlockGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.BlockGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  if (from.calc_type() != 0) {
    _internal_set_calc_type(from._internal_calc_type());
  }
}

void BlockGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.BlockGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockGroupResponse::CopyFrom(const BlockGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.BlockGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockGroupResponse::IsInitialized() const {
  return true;
}

void BlockGroupResponse::InternalSwap(BlockGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
  swap(calc_type_, other->calc_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeightRequest::InitAsDefaultInstance() {
}
class HeightRequest::_Internal {
 public:
};

HeightRequest::HeightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.HeightRequest)
}
HeightRequest::HeightRequest(const HeightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_tip_, &from.from_tip_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_height_) -
    reinterpret_cast<char*>(&from_tip_)) + sizeof(end_height_));
  // @@protoc_insertion_point(copy_constructor:tari.rpc.HeightRequest)
}

void HeightRequest::SharedCtor() {
  ::memset(&from_tip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_height_) -
      reinterpret_cast<char*>(&from_tip_)) + sizeof(end_height_));
}

HeightRequest::~HeightRequest() {
  // @@protoc_insertion_point(destructor:tari.rpc.HeightRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HeightRequest::ArenaDtor(void* object) {
  HeightRequest* _this = reinterpret_cast< HeightRequest* >(object);
  (void)_this;
}
void HeightRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeightRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeightRequest& HeightRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeightRequest_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void HeightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.HeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_tip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_height_) -
      reinterpret_cast<char*>(&from_tip_)) + sizeof(end_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeightRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 from_tip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_tip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeightRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.HeightRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 from_tip = 1;
  if (this->from_tip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_from_tip(), target);
  }

  // uint64 start_height = 2;
  if (this->start_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_start_height(), target);
  }

  // uint64 end_height = 3;
  if (this->end_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_end_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.HeightRequest)
  return target;
}

size_t HeightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.HeightRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 from_tip = 1;
  if (this->from_tip() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_from_tip());
  }

  // uint64 start_height = 2;
  if (this->start_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_height());
  }

  // uint64 end_height = 3;
  if (this->end_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeightRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.HeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeightRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeightRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.HeightRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.HeightRequest)
    MergeFrom(*source);
  }
}

void HeightRequest::MergeFrom(const HeightRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.HeightRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_tip() != 0) {
    _internal_set_from_tip(from._internal_from_tip());
  }
  if (from.start_height() != 0) {
    _internal_set_start_height(from._internal_start_height());
  }
  if (from.end_height() != 0) {
    _internal_set_end_height(from._internal_end_height());
  }
}

void HeightRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.HeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightRequest::CopyFrom(const HeightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.HeightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightRequest::IsInitialized() const {
  return true;
}

void HeightRequest::InternalSwap(HeightRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeightRequest, end_height_)
      + sizeof(HeightRequest::end_height_)
      - PROTOBUF_FIELD_OFFSET(HeightRequest, from_tip_)>(
          reinterpret_cast<char*>(&from_tip_),
          reinterpret_cast<char*>(&other->from_tip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeightRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CalcTimingResponse::InitAsDefaultInstance() {
}
class CalcTimingResponse::_Internal {
 public:
};

CalcTimingResponse::CalcTimingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.CalcTimingResponse)
}
CalcTimingResponse::CalcTimingResponse(const CalcTimingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_, &from.max_,
    static_cast<size_t>(reinterpret_cast<char*>(&avg_) -
    reinterpret_cast<char*>(&max_)) + sizeof(avg_));
  // @@protoc_insertion_point(copy_constructor:tari.rpc.CalcTimingResponse)
}

void CalcTimingResponse::SharedCtor() {
  ::memset(&max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avg_) -
      reinterpret_cast<char*>(&max_)) + sizeof(avg_));
}

CalcTimingResponse::~CalcTimingResponse() {
  // @@protoc_insertion_point(destructor:tari.rpc.CalcTimingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalcTimingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CalcTimingResponse::ArenaDtor(void* object) {
  CalcTimingResponse* _this = reinterpret_cast< CalcTimingResponse* >(object);
  (void)_this;
}
void CalcTimingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalcTimingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CalcTimingResponse& CalcTimingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CalcTimingResponse_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void CalcTimingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.CalcTimingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avg_) -
      reinterpret_cast<char*>(&max_)) + sizeof(avg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalcTimingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 max = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 min = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double avg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          avg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalcTimingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.CalcTimingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 max = 1;
  if (this->max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_max(), target);
  }

  // uint64 min = 2;
  if (this->min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_min(), target);
  }

  // double avg = 3;
  if (!(this->avg() <= 0 && this->avg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_avg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.CalcTimingResponse)
  return target;
}

size_t CalcTimingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.CalcTimingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 max = 1;
  if (this->max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max());
  }

  // uint64 min = 2;
  if (this->min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min());
  }

  // double avg = 3;
  if (!(this->avg() <= 0 && this->avg() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalcTimingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.CalcTimingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CalcTimingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalcTimingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.CalcTimingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.CalcTimingResponse)
    MergeFrom(*source);
  }
}

void CalcTimingResponse::MergeFrom(const CalcTimingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.CalcTimingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max() != 0) {
    _internal_set_max(from._internal_max());
  }
  if (from.min() != 0) {
    _internal_set_min(from._internal_min());
  }
  if (!(from.avg() <= 0 && from.avg() >= 0)) {
    _internal_set_avg(from._internal_avg());
  }
}

void CalcTimingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.CalcTimingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalcTimingResponse::CopyFrom(const CalcTimingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.CalcTimingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalcTimingResponse::IsInitialized() const {
  return true;
}

void CalcTimingResponse::InternalSwap(CalcTimingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalcTimingResponse, avg_)
      + sizeof(CalcTimingResponse::avg_)
      - PROTOBUF_FIELD_OFFSET(CalcTimingResponse, max_)>(
          reinterpret_cast<char*>(&max_),
          reinterpret_cast<char*>(&other->max_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CalcTimingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListHeadersRequest::InitAsDefaultInstance() {
}
class ListHeadersRequest::_Internal {
 public:
};

ListHeadersRequest::ListHeadersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.ListHeadersRequest)
}
ListHeadersRequest::ListHeadersRequest(const ListHeadersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_height_, &from.from_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&sorting_) -
    reinterpret_cast<char*>(&from_height_)) + sizeof(sorting_));
  // @@protoc_insertion_point(copy_constructor:tari.rpc.ListHeadersRequest)
}

void ListHeadersRequest::SharedCtor() {
  ::memset(&from_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sorting_) -
      reinterpret_cast<char*>(&from_height_)) + sizeof(sorting_));
}

ListHeadersRequest::~ListHeadersRequest() {
  // @@protoc_insertion_point(destructor:tari.rpc.ListHeadersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListHeadersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListHeadersRequest::ArenaDtor(void* object) {
  ListHeadersRequest* _this = reinterpret_cast< ListHeadersRequest* >(object);
  (void)_this;
}
void ListHeadersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListHeadersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListHeadersRequest& ListHeadersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListHeadersRequest_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void ListHeadersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.ListHeadersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sorting_) -
      reinterpret_cast<char*>(&from_height_)) + sizeof(sorting_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListHeadersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 from_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_headers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tari.rpc.Sorting sorting = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sorting(static_cast<::tari::rpc::Sorting>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListHeadersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.ListHeadersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 from_height = 1;
  if (this->from_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_from_height(), target);
  }

  // uint64 num_headers = 2;
  if (this->num_headers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_num_headers(), target);
  }

  // .tari.rpc.Sorting sorting = 3;
  if (this->sorting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_sorting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.ListHeadersRequest)
  return target;
}

size_t ListHeadersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.ListHeadersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 from_height = 1;
  if (this->from_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_from_height());
  }

  // uint64 num_headers = 2;
  if (this->num_headers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_headers());
  }

  // .tari.rpc.Sorting sorting = 3;
  if (this->sorting() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sorting());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListHeadersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.ListHeadersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListHeadersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListHeadersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.ListHeadersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.ListHeadersRequest)
    MergeFrom(*source);
  }
}

void ListHeadersRequest::MergeFrom(const ListHeadersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.ListHeadersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_height() != 0) {
    _internal_set_from_height(from._internal_from_height());
  }
  if (from.num_headers() != 0) {
    _internal_set_num_headers(from._internal_num_headers());
  }
  if (from.sorting() != 0) {
    _internal_set_sorting(from._internal_sorting());
  }
}

void ListHeadersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.ListHeadersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListHeadersRequest::CopyFrom(const ListHeadersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.ListHeadersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListHeadersRequest::IsInitialized() const {
  return true;
}

void ListHeadersRequest::InternalSwap(ListHeadersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListHeadersRequest, sorting_)
      + sizeof(ListHeadersRequest::sorting_)
      - PROTOBUF_FIELD_OFFSET(ListHeadersRequest, from_height_)>(
          reinterpret_cast<char*>(&from_height_),
          reinterpret_cast<char*>(&other->from_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListHeadersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlocksRequest::InitAsDefaultInstance() {
}
class GetBlocksRequest::_Internal {
 public:
};

GetBlocksRequest::GetBlocksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  heights_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.GetBlocksRequest)
}
GetBlocksRequest::GetBlocksRequest(const GetBlocksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      heights_(from.heights_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tari.rpc.GetBlocksRequest)
}

void GetBlocksRequest::SharedCtor() {
}

GetBlocksRequest::~GetBlocksRequest() {
  // @@protoc_insertion_point(destructor:tari.rpc.GetBlocksRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlocksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBlocksRequest::ArenaDtor(void* object) {
  GetBlocksRequest* _this = reinterpret_cast< GetBlocksRequest* >(object);
  (void)_this;
}
void GetBlocksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlocksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlocksRequest& GetBlocksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlocksRequest_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void GetBlocksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.GetBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heights_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlocksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 heights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_heights(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_heights(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlocksRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.GetBlocksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 heights = 1;
  {
    int byte_size = _heights_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_heights(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.GetBlocksRequest)
  return target;
}

size_t GetBlocksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.GetBlocksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 heights = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->heights_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _heights_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlocksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.GetBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlocksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlocksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.GetBlocksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.GetBlocksRequest)
    MergeFrom(*source);
  }
}

void GetBlocksRequest::MergeFrom(const GetBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.GetBlocksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heights_.MergeFrom(from.heights_);
}

void GetBlocksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.GetBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlocksRequest::CopyFrom(const GetBlocksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.GetBlocksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlocksRequest::IsInitialized() const {
  return true;
}

void GetBlocksRequest::InternalSwap(GetBlocksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  heights_.InternalSwap(&other->heights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlocksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlocksResponse::InitAsDefaultInstance() {
}
class GetBlocksResponse::_Internal {
 public:
};

void GetBlocksResponse::clear_blocks() {
  blocks_.Clear();
}
GetBlocksResponse::GetBlocksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blocks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.GetBlocksResponse)
}
GetBlocksResponse::GetBlocksResponse(const GetBlocksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tari.rpc.GetBlocksResponse)
}

void GetBlocksResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBlocksResponse_base_5fnode_2eproto.base);
}

GetBlocksResponse::~GetBlocksResponse() {
  // @@protoc_insertion_point(destructor:tari.rpc.GetBlocksResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetBlocksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetBlocksResponse::ArenaDtor(void* object) {
  GetBlocksResponse* _this = reinterpret_cast< GetBlocksResponse* >(object);
  (void)_this;
}
void GetBlocksResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetBlocksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlocksResponse& GetBlocksResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlocksResponse_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void GetBlocksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.GetBlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBlocksResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tari.rpc.HistoricalBlock blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlocksResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.GetBlocksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tari.rpc.HistoricalBlock blocks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.GetBlocksResponse)
  return target;
}

size_t GetBlocksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.GetBlocksResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tari.rpc.HistoricalBlock blocks = 1;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlocksResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.GetBlocksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlocksResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlocksResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.GetBlocksResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.GetBlocksResponse)
    MergeFrom(*source);
  }
}

void GetBlocksResponse::MergeFrom(const GetBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.GetBlocksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
}

void GetBlocksResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.GetBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlocksResponse::CopyFrom(const GetBlocksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.GetBlocksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlocksResponse::IsInitialized() const {
  return true;
}

void GetBlocksResponse::InternalSwap(GetBlocksResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blocks_.InternalSwap(&other->blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlocksResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MetaData::InitAsDefaultInstance() {
}
class MetaData::_Internal {
 public:
};

MetaData::MetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.MetaData)
}
MetaData::MetaData(const MetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  best_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_best_block().empty()) {
    best_block_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_best_block(),
      GetArena());
  }
  ::memcpy(&height_of_longest_chain_, &from.height_of_longest_chain_,
    static_cast<size_t>(reinterpret_cast<char*>(&accumulated_difficulty_) -
    reinterpret_cast<char*>(&height_of_longest_chain_)) + sizeof(accumulated_difficulty_));
  // @@protoc_insertion_point(copy_constructor:tari.rpc.MetaData)
}

void MetaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetaData_base_5fnode_2eproto.base);
  best_block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_of_longest_chain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accumulated_difficulty_) -
      reinterpret_cast<char*>(&height_of_longest_chain_)) + sizeof(accumulated_difficulty_));
}

MetaData::~MetaData() {
  // @@protoc_insertion_point(destructor:tari.rpc.MetaData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetaData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  best_block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetaData::ArenaDtor(void* object) {
  MetaData* _this = reinterpret_cast< MetaData* >(object);
  (void)_this;
}
void MetaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetaData& MetaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetaData_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void MetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.MetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  best_block_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&height_of_longest_chain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accumulated_difficulty_) -
      reinterpret_cast<char*>(&height_of_longest_chain_)) + sizeof(accumulated_difficulty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 height_of_longest_chain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_of_longest_chain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes best_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_best_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 pruning_horizon = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pruning_horizon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 accumulated_difficulty = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          accumulated_difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetaData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.MetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height_of_longest_chain = 1;
  if (this->height_of_longest_chain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_height_of_longest_chain(), target);
  }

  // bytes best_block = 2;
  if (this->best_block().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_best_block(), target);
  }

  // uint64 pruning_horizon = 4;
  if (this->pruning_horizon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_pruning_horizon(), target);
  }

  // uint64 accumulated_difficulty = 5;
  if (this->accumulated_difficulty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_accumulated_difficulty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.MetaData)
  return target;
}

size_t MetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.MetaData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes best_block = 2;
  if (this->best_block().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_best_block());
  }

  // uint64 height_of_longest_chain = 1;
  if (this->height_of_longest_chain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_height_of_longest_chain());
  }

  // uint64 pruning_horizon = 4;
  if (this->pruning_horizon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_pruning_horizon());
  }

  // uint64 accumulated_difficulty = 5;
  if (this->accumulated_difficulty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_accumulated_difficulty());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.MetaData)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetaData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.MetaData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.MetaData)
    MergeFrom(*source);
  }
}

void MetaData::MergeFrom(const MetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.MetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.best_block().size() > 0) {
    _internal_set_best_block(from._internal_best_block());
  }
  if (from.height_of_longest_chain() != 0) {
    _internal_set_height_of_longest_chain(from._internal_height_of_longest_chain());
  }
  if (from.pruning_horizon() != 0) {
    _internal_set_pruning_horizon(from._internal_pruning_horizon());
  }
  if (from.accumulated_difficulty() != 0) {
    _internal_set_accumulated_difficulty(from._internal_accumulated_difficulty());
  }
}

void MetaData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaData::CopyFrom(const MetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.MetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaData::IsInitialized() const {
  return true;
}

void MetaData::InternalSwap(MetaData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  best_block_.Swap(&other->best_block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetaData, accumulated_difficulty_)
      + sizeof(MetaData::accumulated_difficulty_)
      - PROTOBUF_FIELD_OFFSET(MetaData, height_of_longest_chain_)>(
          reinterpret_cast<char*>(&height_of_longest_chain_),
          reinterpret_cast<char*>(&other->height_of_longest_chain_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncInfoResponse::InitAsDefaultInstance() {
}
class SyncInfoResponse::_Internal {
 public:
};

SyncInfoResponse::SyncInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  peer_node_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.SyncInfoResponse)
}
SyncInfoResponse::SyncInfoResponse(const SyncInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peer_node_id_(from.peer_node_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tip_height_, &from.tip_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_height_) -
    reinterpret_cast<char*>(&tip_height_)) + sizeof(local_height_));
  // @@protoc_insertion_point(copy_constructor:tari.rpc.SyncInfoResponse)
}

void SyncInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncInfoResponse_base_5fnode_2eproto.base);
  ::memset(&tip_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_height_) -
      reinterpret_cast<char*>(&tip_height_)) + sizeof(local_height_));
}

SyncInfoResponse::~SyncInfoResponse() {
  // @@protoc_insertion_point(destructor:tari.rpc.SyncInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SyncInfoResponse::ArenaDtor(void* object) {
  SyncInfoResponse* _this = reinterpret_cast< SyncInfoResponse* >(object);
  (void)_this;
}
void SyncInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncInfoResponse& SyncInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncInfoResponse_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void SyncInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.SyncInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_node_id_.Clear();
  ::memset(&tip_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_height_) -
      reinterpret_cast<char*>(&tip_height_)) + sizeof(local_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 tip_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tip_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 local_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes peer_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_peer_node_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.SyncInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tip_height = 1;
  if (this->tip_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tip_height(), target);
  }

  // uint64 local_height = 2;
  if (this->local_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_local_height(), target);
  }

  // repeated bytes peer_node_id = 3;
  for (int i = 0, n = this->_internal_peer_node_id_size(); i < n; i++) {
    const auto& s = this->_internal_peer_node_id(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.SyncInfoResponse)
  return target;
}

size_t SyncInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.SyncInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes peer_node_id = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(peer_node_id_.size());
  for (int i = 0, n = peer_node_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      peer_node_id_.Get(i));
  }

  // uint64 tip_height = 1;
  if (this->tip_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tip_height());
  }

  // uint64 local_height = 2;
  if (this->local_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_local_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.SyncInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.SyncInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.SyncInfoResponse)
    MergeFrom(*source);
  }
}

void SyncInfoResponse::MergeFrom(const SyncInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.SyncInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peer_node_id_.MergeFrom(from.peer_node_id_);
  if (from.tip_height() != 0) {
    _internal_set_tip_height(from._internal_tip_height());
  }
  if (from.local_height() != 0) {
    _internal_set_local_height(from._internal_local_height());
  }
}

void SyncInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.SyncInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncInfoResponse::CopyFrom(const SyncInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.SyncInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncInfoResponse::IsInitialized() const {
  return true;
}

void SyncInfoResponse::InternalSwap(SyncInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  peer_node_id_.InternalSwap(&other->peer_node_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncInfoResponse, local_height_)
      + sizeof(SyncInfoResponse::local_height_)
      - PROTOBUF_FIELD_OFFSET(SyncInfoResponse, tip_height_)>(
          reinterpret_cast<char*>(&tip_height_),
          reinterpret_cast<char*>(&other->tip_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNewBlockResult::InitAsDefaultInstance() {
  ::tari::rpc::_GetNewBlockResult_default_instance_._instance.get_mutable()->block_ = const_cast< ::tari::rpc::Block*>(
      ::tari::rpc::Block::internal_default_instance());
  ::tari::rpc::_GetNewBlockResult_default_instance_._instance.get_mutable()->miner_data_ = const_cast< ::tari::rpc::MinerData*>(
      ::tari::rpc::MinerData::internal_default_instance());
}
class GetNewBlockResult::_Internal {
 public:
  static const ::tari::rpc::Block& block(const GetNewBlockResult* msg);
  static const ::tari::rpc::MinerData& miner_data(const GetNewBlockResult* msg);
};

const ::tari::rpc::Block&
GetNewBlockResult::_Internal::block(const GetNewBlockResult* msg) {
  return *msg->block_;
}
const ::tari::rpc::MinerData&
GetNewBlockResult::_Internal::miner_data(const GetNewBlockResult* msg) {
  return *msg->miner_data_;
}
void GetNewBlockResult::clear_block() {
  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
GetNewBlockResult::GetNewBlockResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.GetNewBlockResult)
}
GetNewBlockResult::GetNewBlockResult(const GetNewBlockResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_block_hash(),
      GetArena());
  }
  if (from._internal_has_block()) {
    block_ = new ::tari::rpc::Block(*from.block_);
  } else {
    block_ = nullptr;
  }
  if (from._internal_has_miner_data()) {
    miner_data_ = new ::tari::rpc::MinerData(*from.miner_data_);
  } else {
    miner_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tari.rpc.GetNewBlockResult)
}

void GetNewBlockResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNewBlockResult_base_5fnode_2eproto.base);
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&miner_data_) -
      reinterpret_cast<char*>(&block_)) + sizeof(miner_data_));
}

GetNewBlockResult::~GetNewBlockResult() {
  // @@protoc_insertion_point(destructor:tari.rpc.GetNewBlockResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNewBlockResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete block_;
  if (this != internal_default_instance()) delete miner_data_;
}

void GetNewBlockResult::ArenaDtor(void* object) {
  GetNewBlockResult* _this = reinterpret_cast< GetNewBlockResult* >(object);
  (void)_this;
}
void GetNewBlockResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNewBlockResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNewBlockResult& GetNewBlockResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNewBlockResult_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void GetNewBlockResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.GetNewBlockResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
  if (GetArena() == nullptr && miner_data_ != nullptr) {
    delete miner_data_;
  }
  miner_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNewBlockResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tari.rpc.Block block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .tari.rpc.MinerData miner_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_miner_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNewBlockResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.GetNewBlockResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_hash = 1;
  if (this->block_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_hash(), target);
  }

  // .tari.rpc.Block block = 2;
  if (this->has_block()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::block(this), target, stream);
  }

  // .tari.rpc.MinerData miner_data = 3;
  if (this->has_miner_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::miner_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.GetNewBlockResult)
  return target;
}

size_t GetNewBlockResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.GetNewBlockResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_hash = 1;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_hash());
  }

  // .tari.rpc.Block block = 2;
  if (this->has_block()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_);
  }

  // .tari.rpc.MinerData miner_data = 3;
  if (this->has_miner_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *miner_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNewBlockResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.GetNewBlockResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNewBlockResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNewBlockResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.GetNewBlockResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.GetNewBlockResult)
    MergeFrom(*source);
  }
}

void GetNewBlockResult::MergeFrom(const GetNewBlockResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.GetNewBlockResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_hash().size() > 0) {
    _internal_set_block_hash(from._internal_block_hash());
  }
  if (from.has_block()) {
    _internal_mutable_block()->::tari::rpc::Block::MergeFrom(from._internal_block());
  }
  if (from.has_miner_data()) {
    _internal_mutable_miner_data()->::tari::rpc::MinerData::MergeFrom(from._internal_miner_data());
  }
}

void GetNewBlockResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.GetNewBlockResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNewBlockResult::CopyFrom(const GetNewBlockResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.GetNewBlockResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNewBlockResult::IsInitialized() const {
  return true;
}

void GetNewBlockResult::InternalSwap(GetNewBlockResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetNewBlockResult, miner_data_)
      + sizeof(GetNewBlockResult::miner_data_)
      - PROTOBUF_FIELD_OFFSET(GetNewBlockResult, block_)>(
          reinterpret_cast<char*>(&block_),
          reinterpret_cast<char*>(&other->block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNewBlockResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MinerData::InitAsDefaultInstance() {
  ::tari::rpc::_MinerData_default_instance_._instance.get_mutable()->algo_ = const_cast< ::tari::rpc::PowAlgo*>(
      ::tari::rpc::PowAlgo::internal_default_instance());
}
class MinerData::_Internal {
 public:
  static const ::tari::rpc::PowAlgo& algo(const MinerData* msg);
};

const ::tari::rpc::PowAlgo&
MinerData::_Internal::algo(const MinerData* msg) {
  return *msg->algo_;
}
void MinerData::clear_algo() {
  if (GetArena() == nullptr && algo_ != nullptr) {
    delete algo_;
  }
  algo_ = nullptr;
}
MinerData::MinerData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.MinerData)
}
MinerData::MinerData(const MinerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  merge_mining_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_merge_mining_hash().empty()) {
    merge_mining_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_merge_mining_hash(),
      GetArena());
  }
  if (from._internal_has_algo()) {
    algo_ = new ::tari::rpc::PowAlgo(*from.algo_);
  } else {
    algo_ = nullptr;
  }
  ::memcpy(&target_difficulty_, &from.target_difficulty_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
    reinterpret_cast<char*>(&target_difficulty_)) + sizeof(reward_));
  // @@protoc_insertion_point(copy_constructor:tari.rpc.MinerData)
}

void MinerData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MinerData_base_5fnode_2eproto.base);
  merge_mining_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&algo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&algo_)) + sizeof(reward_));
}

MinerData::~MinerData() {
  // @@protoc_insertion_point(destructor:tari.rpc.MinerData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MinerData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  merge_mining_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete algo_;
}

void MinerData::ArenaDtor(void* object) {
  MinerData* _this = reinterpret_cast< MinerData* >(object);
  (void)_this;
}
void MinerData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MinerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MinerData& MinerData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MinerData_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void MinerData::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.MinerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  merge_mining_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && algo_ != nullptr) {
    delete algo_;
  }
  algo_ = nullptr;
  ::memset(&target_difficulty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_) -
      reinterpret_cast<char*>(&target_difficulty_)) + sizeof(reward_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MinerData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .tari.rpc.PowAlgo algo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_algo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 target_difficulty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 reward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes merge_mining_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_merge_mining_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MinerData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.MinerData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tari.rpc.PowAlgo algo = 1;
  if (this->has_algo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::algo(this), target, stream);
  }

  // uint64 target_difficulty = 2;
  if (this->target_difficulty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_target_difficulty(), target);
  }

  // uint64 reward = 3;
  if (this->reward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_reward(), target);
  }

  // bytes merge_mining_hash = 4;
  if (this->merge_mining_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_merge_mining_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.MinerData)
  return target;
}

size_t MinerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.MinerData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes merge_mining_hash = 4;
  if (this->merge_mining_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_merge_mining_hash());
  }

  // .tari.rpc.PowAlgo algo = 1;
  if (this->has_algo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *algo_);
  }

  // uint64 target_difficulty = 2;
  if (this->target_difficulty() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_target_difficulty());
  }

  // uint64 reward = 3;
  if (this->reward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_reward());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MinerData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.MinerData)
  GOOGLE_DCHECK_NE(&from, this);
  const MinerData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MinerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.MinerData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.MinerData)
    MergeFrom(*source);
  }
}

void MinerData::MergeFrom(const MinerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.MinerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.merge_mining_hash().size() > 0) {
    _internal_set_merge_mining_hash(from._internal_merge_mining_hash());
  }
  if (from.has_algo()) {
    _internal_mutable_algo()->::tari::rpc::PowAlgo::MergeFrom(from._internal_algo());
  }
  if (from.target_difficulty() != 0) {
    _internal_set_target_difficulty(from._internal_target_difficulty());
  }
  if (from.reward() != 0) {
    _internal_set_reward(from._internal_reward());
  }
}

void MinerData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.MinerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MinerData::CopyFrom(const MinerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.MinerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MinerData::IsInitialized() const {
  return true;
}

void MinerData::InternalSwap(MinerData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  merge_mining_hash_.Swap(&other->merge_mining_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MinerData, reward_)
      + sizeof(MinerData::reward_)
      - PROTOBUF_FIELD_OFFSET(MinerData, algo_)>(
          reinterpret_cast<char*>(&algo_),
          reinterpret_cast<char*>(&other->algo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MinerData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchKernelsRequest::InitAsDefaultInstance() {
}
class SearchKernelsRequest::_Internal {
 public:
};

void SearchKernelsRequest::clear_signatures() {
  signatures_.Clear();
}
SearchKernelsRequest::SearchKernelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  signatures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tari.rpc.SearchKernelsRequest)
}
SearchKernelsRequest::SearchKernelsRequest(const SearchKernelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tari.rpc.SearchKernelsRequest)
}

void SearchKernelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchKernelsRequest_base_5fnode_2eproto.base);
}

SearchKernelsRequest::~SearchKernelsRequest() {
  // @@protoc_insertion_point(destructor:tari.rpc.SearchKernelsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchKernelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SearchKernelsRequest::ArenaDtor(void* object) {
  SearchKernelsRequest* _this = reinterpret_cast< SearchKernelsRequest* >(object);
  (void)_this;
}
void SearchKernelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchKernelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchKernelsRequest& SearchKernelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchKernelsRequest_base_5fnode_2eproto.base);
  return *internal_default_instance();
}


void SearchKernelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tari.rpc.SearchKernelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchKernelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tari.rpc.Signature signatures = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchKernelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tari.rpc.SearchKernelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tari.rpc.Signature signatures = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signatures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_signatures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tari.rpc.SearchKernelsRequest)
  return target;
}

size_t SearchKernelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tari.rpc.SearchKernelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tari.rpc.Signature signatures = 1;
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchKernelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tari.rpc.SearchKernelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchKernelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchKernelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tari.rpc.SearchKernelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tari.rpc.SearchKernelsRequest)
    MergeFrom(*source);
  }
}

void SearchKernelsRequest::MergeFrom(const SearchKernelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tari.rpc.SearchKernelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
}

void SearchKernelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tari.rpc.SearchKernelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchKernelsRequest::CopyFrom(const SearchKernelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tari.rpc.SearchKernelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchKernelsRequest::IsInitialized() const {
  return true;
}

void SearchKernelsRequest::InternalSwap(SearchKernelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  signatures_.InternalSwap(&other->signatures_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchKernelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace tari
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tari::rpc::TipInfoResponse* Arena::CreateMaybeMessage< ::tari::rpc::TipInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::TipInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::NewBlockTemplateResponse* Arena::CreateMaybeMessage< ::tari::rpc::NewBlockTemplateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::NewBlockTemplateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::Empty* Arena::CreateMaybeMessage< ::tari::rpc::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::NetworkDifficultyResponse* Arena::CreateMaybeMessage< ::tari::rpc::NetworkDifficultyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::NetworkDifficultyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::ValueAtHeightResponse* Arena::CreateMaybeMessage< ::tari::rpc::ValueAtHeightResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::ValueAtHeightResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::IntegerValue* Arena::CreateMaybeMessage< ::tari::rpc::IntegerValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::IntegerValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::StringValue* Arena::CreateMaybeMessage< ::tari::rpc::StringValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::StringValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::BlockGroupRequest* Arena::CreateMaybeMessage< ::tari::rpc::BlockGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::BlockGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::BlockGroupResponse* Arena::CreateMaybeMessage< ::tari::rpc::BlockGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::BlockGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::HeightRequest* Arena::CreateMaybeMessage< ::tari::rpc::HeightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::HeightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::CalcTimingResponse* Arena::CreateMaybeMessage< ::tari::rpc::CalcTimingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::CalcTimingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::ListHeadersRequest* Arena::CreateMaybeMessage< ::tari::rpc::ListHeadersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::ListHeadersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::GetBlocksRequest* Arena::CreateMaybeMessage< ::tari::rpc::GetBlocksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::GetBlocksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::GetBlocksResponse* Arena::CreateMaybeMessage< ::tari::rpc::GetBlocksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::GetBlocksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::MetaData* Arena::CreateMaybeMessage< ::tari::rpc::MetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::MetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::SyncInfoResponse* Arena::CreateMaybeMessage< ::tari::rpc::SyncInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::SyncInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::GetNewBlockResult* Arena::CreateMaybeMessage< ::tari::rpc::GetNewBlockResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::GetNewBlockResult >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::MinerData* Arena::CreateMaybeMessage< ::tari::rpc::MinerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::MinerData >(arena);
}
template<> PROTOBUF_NOINLINE ::tari::rpc::SearchKernelsRequest* Arena::CreateMaybeMessage< ::tari::rpc::SearchKernelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tari::rpc::SearchKernelsRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
