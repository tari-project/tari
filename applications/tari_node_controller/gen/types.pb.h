// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_types_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_types_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_types_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_types_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2eproto;
namespace tari {
namespace rpc {
class AggregateBody;
class AggregateBodyDefaultTypeInternal;
extern AggregateBodyDefaultTypeInternal _AggregateBody_default_instance_;
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class BlockHeader;
class BlockHeaderDefaultTypeInternal;
extern BlockHeaderDefaultTypeInternal _BlockHeader_default_instance_;
class ConsensusConstants;
class ConsensusConstantsDefaultTypeInternal;
extern ConsensusConstantsDefaultTypeInternal _ConsensusConstants_default_instance_;
class HistoricalBlock;
class HistoricalBlockDefaultTypeInternal;
extern HistoricalBlockDefaultTypeInternal _HistoricalBlock_default_instance_;
class NewBlockHeaderTemplate;
class NewBlockHeaderTemplateDefaultTypeInternal;
extern NewBlockHeaderTemplateDefaultTypeInternal _NewBlockHeaderTemplate_default_instance_;
class NewBlockTemplate;
class NewBlockTemplateDefaultTypeInternal;
extern NewBlockTemplateDefaultTypeInternal _NewBlockTemplate_default_instance_;
class OutputFeatures;
class OutputFeaturesDefaultTypeInternal;
extern OutputFeaturesDefaultTypeInternal _OutputFeatures_default_instance_;
class PowAlgo;
class PowAlgoDefaultTypeInternal;
extern PowAlgoDefaultTypeInternal _PowAlgo_default_instance_;
class ProofOfWork;
class ProofOfWorkDefaultTypeInternal;
extern ProofOfWorkDefaultTypeInternal _ProofOfWork_default_instance_;
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransactionInput;
class TransactionInputDefaultTypeInternal;
extern TransactionInputDefaultTypeInternal _TransactionInput_default_instance_;
class TransactionKernel;
class TransactionKernelDefaultTypeInternal;
extern TransactionKernelDefaultTypeInternal _TransactionKernel_default_instance_;
class TransactionOutput;
class TransactionOutputDefaultTypeInternal;
extern TransactionOutputDefaultTypeInternal _TransactionOutput_default_instance_;
}  // namespace rpc
}  // namespace tari
PROTOBUF_NAMESPACE_OPEN
template<> ::tari::rpc::AggregateBody* Arena::CreateMaybeMessage<::tari::rpc::AggregateBody>(Arena*);
template<> ::tari::rpc::Block* Arena::CreateMaybeMessage<::tari::rpc::Block>(Arena*);
template<> ::tari::rpc::BlockHeader* Arena::CreateMaybeMessage<::tari::rpc::BlockHeader>(Arena*);
template<> ::tari::rpc::ConsensusConstants* Arena::CreateMaybeMessage<::tari::rpc::ConsensusConstants>(Arena*);
template<> ::tari::rpc::HistoricalBlock* Arena::CreateMaybeMessage<::tari::rpc::HistoricalBlock>(Arena*);
template<> ::tari::rpc::NewBlockHeaderTemplate* Arena::CreateMaybeMessage<::tari::rpc::NewBlockHeaderTemplate>(Arena*);
template<> ::tari::rpc::NewBlockTemplate* Arena::CreateMaybeMessage<::tari::rpc::NewBlockTemplate>(Arena*);
template<> ::tari::rpc::OutputFeatures* Arena::CreateMaybeMessage<::tari::rpc::OutputFeatures>(Arena*);
template<> ::tari::rpc::PowAlgo* Arena::CreateMaybeMessage<::tari::rpc::PowAlgo>(Arena*);
template<> ::tari::rpc::ProofOfWork* Arena::CreateMaybeMessage<::tari::rpc::ProofOfWork>(Arena*);
template<> ::tari::rpc::Signature* Arena::CreateMaybeMessage<::tari::rpc::Signature>(Arena*);
template<> ::tari::rpc::Transaction* Arena::CreateMaybeMessage<::tari::rpc::Transaction>(Arena*);
template<> ::tari::rpc::TransactionInput* Arena::CreateMaybeMessage<::tari::rpc::TransactionInput>(Arena*);
template<> ::tari::rpc::TransactionKernel* Arena::CreateMaybeMessage<::tari::rpc::TransactionKernel>(Arena*);
template<> ::tari::rpc::TransactionOutput* Arena::CreateMaybeMessage<::tari::rpc::TransactionOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tari {
namespace rpc {

enum PowAlgo_PowAlgos : int {
  PowAlgo_PowAlgos_POW_ALGOS_MONERO = 0,
  PowAlgo_PowAlgos_POW_ALGOS_BLAKE = 1,
  PowAlgo_PowAlgos_PowAlgo_PowAlgos_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PowAlgo_PowAlgos_PowAlgo_PowAlgos_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PowAlgo_PowAlgos_IsValid(int value);
constexpr PowAlgo_PowAlgos PowAlgo_PowAlgos_PowAlgos_MIN = PowAlgo_PowAlgos_POW_ALGOS_MONERO;
constexpr PowAlgo_PowAlgos PowAlgo_PowAlgos_PowAlgos_MAX = PowAlgo_PowAlgos_POW_ALGOS_BLAKE;
constexpr int PowAlgo_PowAlgos_PowAlgos_ARRAYSIZE = PowAlgo_PowAlgos_PowAlgos_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PowAlgo_PowAlgos_descriptor();
template<typename T>
inline const std::string& PowAlgo_PowAlgos_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PowAlgo_PowAlgos>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PowAlgo_PowAlgos_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PowAlgo_PowAlgos_descriptor(), enum_t_value);
}
inline bool PowAlgo_PowAlgos_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PowAlgo_PowAlgos* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PowAlgo_PowAlgos>(
    PowAlgo_PowAlgos_descriptor(), name, value);
}
// ===================================================================

class BlockHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.BlockHeader) */ {
 public:
  inline BlockHeader() : BlockHeader(nullptr) {}
  virtual ~BlockHeader();

  BlockHeader(const BlockHeader& from);
  BlockHeader(BlockHeader&& from) noexcept
    : BlockHeader() {
    *this = ::std::move(from);
  }

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockHeader& operator=(BlockHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockHeader* internal_default_instance() {
    return reinterpret_cast<const BlockHeader*>(
               &_BlockHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlockHeader& a, BlockHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockHeader* New() const final {
    return CreateMaybeMessage<BlockHeader>(nullptr);
  }

  BlockHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockHeader& from);
  void MergeFrom(const BlockHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.BlockHeader";
  }
  protected:
  explicit BlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kPrevHashFieldNumber = 4,
    kOutputMrFieldNumber = 6,
    kRangeProofMrFieldNumber = 7,
    kKernelMrFieldNumber = 8,
    kTotalKernelOffsetFieldNumber = 9,
    kTimestampFieldNumber = 5,
    kPowFieldNumber = 11,
    kHeightFieldNumber = 3,
    kNonceFieldNumber = 10,
    kVersionFieldNumber = 2,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes prev_hash = 4;
  void clear_prev_hash();
  const std::string& prev_hash() const;
  void set_prev_hash(const std::string& value);
  void set_prev_hash(std::string&& value);
  void set_prev_hash(const char* value);
  void set_prev_hash(const void* value, size_t size);
  std::string* mutable_prev_hash();
  std::string* release_prev_hash();
  void set_allocated_prev_hash(std::string* prev_hash);
  private:
  const std::string& _internal_prev_hash() const;
  void _internal_set_prev_hash(const std::string& value);
  std::string* _internal_mutable_prev_hash();
  public:

  // bytes output_mr = 6;
  void clear_output_mr();
  const std::string& output_mr() const;
  void set_output_mr(const std::string& value);
  void set_output_mr(std::string&& value);
  void set_output_mr(const char* value);
  void set_output_mr(const void* value, size_t size);
  std::string* mutable_output_mr();
  std::string* release_output_mr();
  void set_allocated_output_mr(std::string* output_mr);
  private:
  const std::string& _internal_output_mr() const;
  void _internal_set_output_mr(const std::string& value);
  std::string* _internal_mutable_output_mr();
  public:

  // bytes range_proof_mr = 7;
  void clear_range_proof_mr();
  const std::string& range_proof_mr() const;
  void set_range_proof_mr(const std::string& value);
  void set_range_proof_mr(std::string&& value);
  void set_range_proof_mr(const char* value);
  void set_range_proof_mr(const void* value, size_t size);
  std::string* mutable_range_proof_mr();
  std::string* release_range_proof_mr();
  void set_allocated_range_proof_mr(std::string* range_proof_mr);
  private:
  const std::string& _internal_range_proof_mr() const;
  void _internal_set_range_proof_mr(const std::string& value);
  std::string* _internal_mutable_range_proof_mr();
  public:

  // bytes kernel_mr = 8;
  void clear_kernel_mr();
  const std::string& kernel_mr() const;
  void set_kernel_mr(const std::string& value);
  void set_kernel_mr(std::string&& value);
  void set_kernel_mr(const char* value);
  void set_kernel_mr(const void* value, size_t size);
  std::string* mutable_kernel_mr();
  std::string* release_kernel_mr();
  void set_allocated_kernel_mr(std::string* kernel_mr);
  private:
  const std::string& _internal_kernel_mr() const;
  void _internal_set_kernel_mr(const std::string& value);
  std::string* _internal_mutable_kernel_mr();
  public:

  // bytes total_kernel_offset = 9;
  void clear_total_kernel_offset();
  const std::string& total_kernel_offset() const;
  void set_total_kernel_offset(const std::string& value);
  void set_total_kernel_offset(std::string&& value);
  void set_total_kernel_offset(const char* value);
  void set_total_kernel_offset(const void* value, size_t size);
  std::string* mutable_total_kernel_offset();
  std::string* release_total_kernel_offset();
  void set_allocated_total_kernel_offset(std::string* total_kernel_offset);
  private:
  const std::string& _internal_total_kernel_offset() const;
  void _internal_set_total_kernel_offset(const std::string& value);
  std::string* _internal_mutable_total_kernel_offset();
  public:

  // .google.protobuf.Timestamp timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .tari.rpc.ProofOfWork pow = 11;
  bool has_pow() const;
  private:
  bool _internal_has_pow() const;
  public:
  void clear_pow();
  const ::tari::rpc::ProofOfWork& pow() const;
  ::tari::rpc::ProofOfWork* release_pow();
  ::tari::rpc::ProofOfWork* mutable_pow();
  void set_allocated_pow(::tari::rpc::ProofOfWork* pow);
  private:
  const ::tari::rpc::ProofOfWork& _internal_pow() const;
  ::tari::rpc::ProofOfWork* _internal_mutable_pow();
  public:
  void unsafe_arena_set_allocated_pow(
      ::tari::rpc::ProofOfWork* pow);
  ::tari::rpc::ProofOfWork* unsafe_arena_release_pow();

  // uint64 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 nonce = 10;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_nonce() const;
  void _internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.BlockHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_mr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_proof_mr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kernel_mr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr total_kernel_offset_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::tari::rpc::ProofOfWork* pow_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class ProofOfWork PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.ProofOfWork) */ {
 public:
  inline ProofOfWork() : ProofOfWork(nullptr) {}
  virtual ~ProofOfWork();

  ProofOfWork(const ProofOfWork& from);
  ProofOfWork(ProofOfWork&& from) noexcept
    : ProofOfWork() {
    *this = ::std::move(from);
  }

  inline ProofOfWork& operator=(const ProofOfWork& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProofOfWork& operator=(ProofOfWork&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProofOfWork& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProofOfWork* internal_default_instance() {
    return reinterpret_cast<const ProofOfWork*>(
               &_ProofOfWork_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProofOfWork& a, ProofOfWork& b) {
    a.Swap(&b);
  }
  inline void Swap(ProofOfWork* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProofOfWork* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProofOfWork* New() const final {
    return CreateMaybeMessage<ProofOfWork>(nullptr);
  }

  ProofOfWork* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProofOfWork>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProofOfWork& from);
  void MergeFrom(const ProofOfWork& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProofOfWork* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.ProofOfWork";
  }
  protected:
  explicit ProofOfWork(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPowDataFieldNumber = 4,
    kPowAlgoFieldNumber = 1,
    kAccumulatedMoneroDifficultyFieldNumber = 2,
    kAccumulatedBlakeDifficultyFieldNumber = 3,
    kTargetDifficultyFieldNumber = 5,
  };
  // bytes pow_data = 4;
  void clear_pow_data();
  const std::string& pow_data() const;
  void set_pow_data(const std::string& value);
  void set_pow_data(std::string&& value);
  void set_pow_data(const char* value);
  void set_pow_data(const void* value, size_t size);
  std::string* mutable_pow_data();
  std::string* release_pow_data();
  void set_allocated_pow_data(std::string* pow_data);
  private:
  const std::string& _internal_pow_data() const;
  void _internal_set_pow_data(const std::string& value);
  std::string* _internal_mutable_pow_data();
  public:

  // uint64 pow_algo = 1;
  void clear_pow_algo();
  ::PROTOBUF_NAMESPACE_ID::uint64 pow_algo() const;
  void set_pow_algo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pow_algo() const;
  void _internal_set_pow_algo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 accumulated_monero_difficulty = 2;
  void clear_accumulated_monero_difficulty();
  ::PROTOBUF_NAMESPACE_ID::uint64 accumulated_monero_difficulty() const;
  void set_accumulated_monero_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accumulated_monero_difficulty() const;
  void _internal_set_accumulated_monero_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 accumulated_blake_difficulty = 3;
  void clear_accumulated_blake_difficulty();
  ::PROTOBUF_NAMESPACE_ID::uint64 accumulated_blake_difficulty() const;
  void set_accumulated_blake_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_accumulated_blake_difficulty() const;
  void _internal_set_accumulated_blake_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 target_difficulty = 5;
  void clear_target_difficulty();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_difficulty() const;
  void set_target_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_target_difficulty() const;
  void _internal_set_target_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.ProofOfWork)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pow_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pow_algo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accumulated_monero_difficulty_;
  ::PROTOBUF_NAMESPACE_ID::uint64 accumulated_blake_difficulty_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_difficulty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PowAlgo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.PowAlgo) */ {
 public:
  inline PowAlgo() : PowAlgo(nullptr) {}
  virtual ~PowAlgo();

  PowAlgo(const PowAlgo& from);
  PowAlgo(PowAlgo&& from) noexcept
    : PowAlgo() {
    *this = ::std::move(from);
  }

  inline PowAlgo& operator=(const PowAlgo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowAlgo& operator=(PowAlgo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PowAlgo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowAlgo* internal_default_instance() {
    return reinterpret_cast<const PowAlgo*>(
               &_PowAlgo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PowAlgo& a, PowAlgo& b) {
    a.Swap(&b);
  }
  inline void Swap(PowAlgo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowAlgo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowAlgo* New() const final {
    return CreateMaybeMessage<PowAlgo>(nullptr);
  }

  PowAlgo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowAlgo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PowAlgo& from);
  void MergeFrom(const PowAlgo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PowAlgo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.PowAlgo";
  }
  protected:
  explicit PowAlgo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PowAlgo_PowAlgos PowAlgos;
  static constexpr PowAlgos POW_ALGOS_MONERO =
    PowAlgo_PowAlgos_POW_ALGOS_MONERO;
  static constexpr PowAlgos POW_ALGOS_BLAKE =
    PowAlgo_PowAlgos_POW_ALGOS_BLAKE;
  static inline bool PowAlgos_IsValid(int value) {
    return PowAlgo_PowAlgos_IsValid(value);
  }
  static constexpr PowAlgos PowAlgos_MIN =
    PowAlgo_PowAlgos_PowAlgos_MIN;
  static constexpr PowAlgos PowAlgos_MAX =
    PowAlgo_PowAlgos_PowAlgos_MAX;
  static constexpr int PowAlgos_ARRAYSIZE =
    PowAlgo_PowAlgos_PowAlgos_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PowAlgos_descriptor() {
    return PowAlgo_PowAlgos_descriptor();
  }
  template<typename T>
  static inline const std::string& PowAlgos_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PowAlgos>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PowAlgos_Name.");
    return PowAlgo_PowAlgos_Name(enum_t_value);
  }
  static inline bool PowAlgos_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PowAlgos* value) {
    return PowAlgo_PowAlgos_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPowAlgoFieldNumber = 1,
  };
  // .tari.rpc.PowAlgo.PowAlgos pow_algo = 1;
  void clear_pow_algo();
  ::tari::rpc::PowAlgo_PowAlgos pow_algo() const;
  void set_pow_algo(::tari::rpc::PowAlgo_PowAlgos value);
  private:
  ::tari::rpc::PowAlgo_PowAlgos _internal_pow_algo() const;
  void _internal_set_pow_algo(::tari::rpc::PowAlgo_PowAlgos value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.PowAlgo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int pow_algo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Block PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  virtual ~Block();

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .tari.rpc.BlockHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::tari::rpc::BlockHeader& header() const;
  ::tari::rpc::BlockHeader* release_header();
  ::tari::rpc::BlockHeader* mutable_header();
  void set_allocated_header(::tari::rpc::BlockHeader* header);
  private:
  const ::tari::rpc::BlockHeader& _internal_header() const;
  ::tari::rpc::BlockHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::tari::rpc::BlockHeader* header);
  ::tari::rpc::BlockHeader* unsafe_arena_release_header();

  // .tari.rpc.AggregateBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::tari::rpc::AggregateBody& body() const;
  ::tari::rpc::AggregateBody* release_body();
  ::tari::rpc::AggregateBody* mutable_body();
  void set_allocated_body(::tari::rpc::AggregateBody* body);
  private:
  const ::tari::rpc::AggregateBody& _internal_body() const;
  ::tari::rpc::AggregateBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::tari::rpc::AggregateBody* body);
  ::tari::rpc::AggregateBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:tari.rpc.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tari::rpc::BlockHeader* header_;
  ::tari::rpc::AggregateBody* body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class HistoricalBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.HistoricalBlock) */ {
 public:
  inline HistoricalBlock() : HistoricalBlock(nullptr) {}
  virtual ~HistoricalBlock();

  HistoricalBlock(const HistoricalBlock& from);
  HistoricalBlock(HistoricalBlock&& from) noexcept
    : HistoricalBlock() {
    *this = ::std::move(from);
  }

  inline HistoricalBlock& operator=(const HistoricalBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoricalBlock& operator=(HistoricalBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HistoricalBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HistoricalBlock* internal_default_instance() {
    return reinterpret_cast<const HistoricalBlock*>(
               &_HistoricalBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HistoricalBlock& a, HistoricalBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoricalBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoricalBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoricalBlock* New() const final {
    return CreateMaybeMessage<HistoricalBlock>(nullptr);
  }

  HistoricalBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoricalBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoricalBlock& from);
  void MergeFrom(const HistoricalBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoricalBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.HistoricalBlock";
  }
  protected:
  explicit HistoricalBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpentCommitmentsFieldNumber = 2,
    kBlockFieldNumber = 3,
    kConfirmationsFieldNumber = 1,
  };
  // repeated bytes spent_commitments = 2;
  int spent_commitments_size() const;
  private:
  int _internal_spent_commitments_size() const;
  public:
  void clear_spent_commitments();
  const std::string& spent_commitments(int index) const;
  std::string* mutable_spent_commitments(int index);
  void set_spent_commitments(int index, const std::string& value);
  void set_spent_commitments(int index, std::string&& value);
  void set_spent_commitments(int index, const char* value);
  void set_spent_commitments(int index, const void* value, size_t size);
  std::string* add_spent_commitments();
  void add_spent_commitments(const std::string& value);
  void add_spent_commitments(std::string&& value);
  void add_spent_commitments(const char* value);
  void add_spent_commitments(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& spent_commitments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_spent_commitments();
  private:
  const std::string& _internal_spent_commitments(int index) const;
  std::string* _internal_add_spent_commitments();
  public:

  // .tari.rpc.Block block = 3;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::tari::rpc::Block& block() const;
  ::tari::rpc::Block* release_block();
  ::tari::rpc::Block* mutable_block();
  void set_allocated_block(::tari::rpc::Block* block);
  private:
  const ::tari::rpc::Block& _internal_block() const;
  ::tari::rpc::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::tari::rpc::Block* block);
  ::tari::rpc::Block* unsafe_arena_release_block();

  // uint64 confirmations = 1;
  void clear_confirmations();
  ::PROTOBUF_NAMESPACE_ID::uint64 confirmations() const;
  void set_confirmations(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_confirmations() const;
  void _internal_set_confirmations(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.HistoricalBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> spent_commitments_;
  ::tari::rpc::Block* block_;
  ::PROTOBUF_NAMESPACE_ID::uint64 confirmations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class NewBlockHeaderTemplate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.NewBlockHeaderTemplate) */ {
 public:
  inline NewBlockHeaderTemplate() : NewBlockHeaderTemplate(nullptr) {}
  virtual ~NewBlockHeaderTemplate();

  NewBlockHeaderTemplate(const NewBlockHeaderTemplate& from);
  NewBlockHeaderTemplate(NewBlockHeaderTemplate&& from) noexcept
    : NewBlockHeaderTemplate() {
    *this = ::std::move(from);
  }

  inline NewBlockHeaderTemplate& operator=(const NewBlockHeaderTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewBlockHeaderTemplate& operator=(NewBlockHeaderTemplate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewBlockHeaderTemplate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewBlockHeaderTemplate* internal_default_instance() {
    return reinterpret_cast<const NewBlockHeaderTemplate*>(
               &_NewBlockHeaderTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NewBlockHeaderTemplate& a, NewBlockHeaderTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(NewBlockHeaderTemplate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewBlockHeaderTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewBlockHeaderTemplate* New() const final {
    return CreateMaybeMessage<NewBlockHeaderTemplate>(nullptr);
  }

  NewBlockHeaderTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewBlockHeaderTemplate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewBlockHeaderTemplate& from);
  void MergeFrom(const NewBlockHeaderTemplate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewBlockHeaderTemplate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.NewBlockHeaderTemplate";
  }
  protected:
  explicit NewBlockHeaderTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrevHashFieldNumber = 3,
    kTotalKernelOffsetFieldNumber = 4,
    kPowFieldNumber = 5,
    kHeightFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // bytes prev_hash = 3;
  void clear_prev_hash();
  const std::string& prev_hash() const;
  void set_prev_hash(const std::string& value);
  void set_prev_hash(std::string&& value);
  void set_prev_hash(const char* value);
  void set_prev_hash(const void* value, size_t size);
  std::string* mutable_prev_hash();
  std::string* release_prev_hash();
  void set_allocated_prev_hash(std::string* prev_hash);
  private:
  const std::string& _internal_prev_hash() const;
  void _internal_set_prev_hash(const std::string& value);
  std::string* _internal_mutable_prev_hash();
  public:

  // bytes total_kernel_offset = 4;
  void clear_total_kernel_offset();
  const std::string& total_kernel_offset() const;
  void set_total_kernel_offset(const std::string& value);
  void set_total_kernel_offset(std::string&& value);
  void set_total_kernel_offset(const char* value);
  void set_total_kernel_offset(const void* value, size_t size);
  std::string* mutable_total_kernel_offset();
  std::string* release_total_kernel_offset();
  void set_allocated_total_kernel_offset(std::string* total_kernel_offset);
  private:
  const std::string& _internal_total_kernel_offset() const;
  void _internal_set_total_kernel_offset(const std::string& value);
  std::string* _internal_mutable_total_kernel_offset();
  public:

  // .tari.rpc.ProofOfWork pow = 5;
  bool has_pow() const;
  private:
  bool _internal_has_pow() const;
  public:
  void clear_pow();
  const ::tari::rpc::ProofOfWork& pow() const;
  ::tari::rpc::ProofOfWork* release_pow();
  ::tari::rpc::ProofOfWork* mutable_pow();
  void set_allocated_pow(::tari::rpc::ProofOfWork* pow);
  private:
  const ::tari::rpc::ProofOfWork& _internal_pow() const;
  ::tari::rpc::ProofOfWork* _internal_mutable_pow();
  public:
  void unsafe_arena_set_allocated_pow(
      ::tari::rpc::ProofOfWork* pow);
  ::tari::rpc::ProofOfWork* unsafe_arena_release_pow();

  // uint64 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.NewBlockHeaderTemplate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr total_kernel_offset_;
  ::tari::rpc::ProofOfWork* pow_;
  ::PROTOBUF_NAMESPACE_ID::uint64 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class NewBlockTemplate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.NewBlockTemplate) */ {
 public:
  inline NewBlockTemplate() : NewBlockTemplate(nullptr) {}
  virtual ~NewBlockTemplate();

  NewBlockTemplate(const NewBlockTemplate& from);
  NewBlockTemplate(NewBlockTemplate&& from) noexcept
    : NewBlockTemplate() {
    *this = ::std::move(from);
  }

  inline NewBlockTemplate& operator=(const NewBlockTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewBlockTemplate& operator=(NewBlockTemplate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewBlockTemplate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewBlockTemplate* internal_default_instance() {
    return reinterpret_cast<const NewBlockTemplate*>(
               &_NewBlockTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NewBlockTemplate& a, NewBlockTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(NewBlockTemplate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewBlockTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewBlockTemplate* New() const final {
    return CreateMaybeMessage<NewBlockTemplate>(nullptr);
  }

  NewBlockTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewBlockTemplate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewBlockTemplate& from);
  void MergeFrom(const NewBlockTemplate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewBlockTemplate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.NewBlockTemplate";
  }
  protected:
  explicit NewBlockTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // .tari.rpc.NewBlockHeaderTemplate header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::tari::rpc::NewBlockHeaderTemplate& header() const;
  ::tari::rpc::NewBlockHeaderTemplate* release_header();
  ::tari::rpc::NewBlockHeaderTemplate* mutable_header();
  void set_allocated_header(::tari::rpc::NewBlockHeaderTemplate* header);
  private:
  const ::tari::rpc::NewBlockHeaderTemplate& _internal_header() const;
  ::tari::rpc::NewBlockHeaderTemplate* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::tari::rpc::NewBlockHeaderTemplate* header);
  ::tari::rpc::NewBlockHeaderTemplate* unsafe_arena_release_header();

  // .tari.rpc.AggregateBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::tari::rpc::AggregateBody& body() const;
  ::tari::rpc::AggregateBody* release_body();
  ::tari::rpc::AggregateBody* mutable_body();
  void set_allocated_body(::tari::rpc::AggregateBody* body);
  private:
  const ::tari::rpc::AggregateBody& _internal_body() const;
  ::tari::rpc::AggregateBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::tari::rpc::AggregateBody* body);
  ::tari::rpc::AggregateBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:tari.rpc.NewBlockTemplate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tari::rpc::NewBlockHeaderTemplate* header_;
  ::tari::rpc::AggregateBody* body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class TransactionKernel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.TransactionKernel) */ {
 public:
  inline TransactionKernel() : TransactionKernel(nullptr) {}
  virtual ~TransactionKernel();

  TransactionKernel(const TransactionKernel& from);
  TransactionKernel(TransactionKernel&& from) noexcept
    : TransactionKernel() {
    *this = ::std::move(from);
  }

  inline TransactionKernel& operator=(const TransactionKernel& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionKernel& operator=(TransactionKernel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionKernel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionKernel* internal_default_instance() {
    return reinterpret_cast<const TransactionKernel*>(
               &_TransactionKernel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TransactionKernel& a, TransactionKernel& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionKernel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionKernel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionKernel* New() const final {
    return CreateMaybeMessage<TransactionKernel>(nullptr);
  }

  TransactionKernel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionKernel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionKernel& from);
  void MergeFrom(const TransactionKernel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionKernel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.TransactionKernel";
  }
  protected:
  explicit TransactionKernel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 4,
    kLinkedKernelFieldNumber = 5,
    kExcessFieldNumber = 6,
    kExcessSigFieldNumber = 7,
    kFeeFieldNumber = 2,
    kLockHeightFieldNumber = 3,
    kFeaturesFieldNumber = 1,
  };
  // bytes meta_info = 4;
  void clear_meta_info();
  const std::string& meta_info() const;
  void set_meta_info(const std::string& value);
  void set_meta_info(std::string&& value);
  void set_meta_info(const char* value);
  void set_meta_info(const void* value, size_t size);
  std::string* mutable_meta_info();
  std::string* release_meta_info();
  void set_allocated_meta_info(std::string* meta_info);
  private:
  const std::string& _internal_meta_info() const;
  void _internal_set_meta_info(const std::string& value);
  std::string* _internal_mutable_meta_info();
  public:

  // bytes linked_kernel = 5;
  void clear_linked_kernel();
  const std::string& linked_kernel() const;
  void set_linked_kernel(const std::string& value);
  void set_linked_kernel(std::string&& value);
  void set_linked_kernel(const char* value);
  void set_linked_kernel(const void* value, size_t size);
  std::string* mutable_linked_kernel();
  std::string* release_linked_kernel();
  void set_allocated_linked_kernel(std::string* linked_kernel);
  private:
  const std::string& _internal_linked_kernel() const;
  void _internal_set_linked_kernel(const std::string& value);
  std::string* _internal_mutable_linked_kernel();
  public:

  // bytes excess = 6;
  void clear_excess();
  const std::string& excess() const;
  void set_excess(const std::string& value);
  void set_excess(std::string&& value);
  void set_excess(const char* value);
  void set_excess(const void* value, size_t size);
  std::string* mutable_excess();
  std::string* release_excess();
  void set_allocated_excess(std::string* excess);
  private:
  const std::string& _internal_excess() const;
  void _internal_set_excess(const std::string& value);
  std::string* _internal_mutable_excess();
  public:

  // .tari.rpc.Signature excess_sig = 7;
  bool has_excess_sig() const;
  private:
  bool _internal_has_excess_sig() const;
  public:
  void clear_excess_sig();
  const ::tari::rpc::Signature& excess_sig() const;
  ::tari::rpc::Signature* release_excess_sig();
  ::tari::rpc::Signature* mutable_excess_sig();
  void set_allocated_excess_sig(::tari::rpc::Signature* excess_sig);
  private:
  const ::tari::rpc::Signature& _internal_excess_sig() const;
  ::tari::rpc::Signature* _internal_mutable_excess_sig();
  public:
  void unsafe_arena_set_allocated_excess_sig(
      ::tari::rpc::Signature* excess_sig);
  ::tari::rpc::Signature* unsafe_arena_release_excess_sig();

  // uint64 fee = 2;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lock_height = 3;
  void clear_lock_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_height() const;
  void set_lock_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lock_height() const;
  void _internal_set_lock_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 features = 1;
  void clear_features();
  ::PROTOBUF_NAMESPACE_ID::uint32 features() const;
  void set_features(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_features() const;
  void _internal_set_features(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.TransactionKernel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meta_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr linked_kernel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr excess_;
  ::tari::rpc::Signature* excess_sig_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lock_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 features_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class TransactionInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.TransactionInput) */ {
 public:
  inline TransactionInput() : TransactionInput(nullptr) {}
  virtual ~TransactionInput();

  TransactionInput(const TransactionInput& from);
  TransactionInput(TransactionInput&& from) noexcept
    : TransactionInput() {
    *this = ::std::move(from);
  }

  inline TransactionInput& operator=(const TransactionInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionInput& operator=(TransactionInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionInput* internal_default_instance() {
    return reinterpret_cast<const TransactionInput*>(
               &_TransactionInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TransactionInput& a, TransactionInput& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionInput* New() const final {
    return CreateMaybeMessage<TransactionInput>(nullptr);
  }

  TransactionInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionInput& from);
  void MergeFrom(const TransactionInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.TransactionInput";
  }
  protected:
  explicit TransactionInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitmentFieldNumber = 2,
    kFeaturesFieldNumber = 1,
  };
  // bytes commitment = 2;
  void clear_commitment();
  const std::string& commitment() const;
  void set_commitment(const std::string& value);
  void set_commitment(std::string&& value);
  void set_commitment(const char* value);
  void set_commitment(const void* value, size_t size);
  std::string* mutable_commitment();
  std::string* release_commitment();
  void set_allocated_commitment(std::string* commitment);
  private:
  const std::string& _internal_commitment() const;
  void _internal_set_commitment(const std::string& value);
  std::string* _internal_mutable_commitment();
  public:

  // .tari.rpc.OutputFeatures features = 1;
  bool has_features() const;
  private:
  bool _internal_has_features() const;
  public:
  void clear_features();
  const ::tari::rpc::OutputFeatures& features() const;
  ::tari::rpc::OutputFeatures* release_features();
  ::tari::rpc::OutputFeatures* mutable_features();
  void set_allocated_features(::tari::rpc::OutputFeatures* features);
  private:
  const ::tari::rpc::OutputFeatures& _internal_features() const;
  ::tari::rpc::OutputFeatures* _internal_mutable_features();
  public:
  void unsafe_arena_set_allocated_features(
      ::tari::rpc::OutputFeatures* features);
  ::tari::rpc::OutputFeatures* unsafe_arena_release_features();

  // @@protoc_insertion_point(class_scope:tari.rpc.TransactionInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commitment_;
  ::tari::rpc::OutputFeatures* features_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class TransactionOutput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.TransactionOutput) */ {
 public:
  inline TransactionOutput() : TransactionOutput(nullptr) {}
  virtual ~TransactionOutput();

  TransactionOutput(const TransactionOutput& from);
  TransactionOutput(TransactionOutput&& from) noexcept
    : TransactionOutput() {
    *this = ::std::move(from);
  }

  inline TransactionOutput& operator=(const TransactionOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionOutput& operator=(TransactionOutput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionOutput* internal_default_instance() {
    return reinterpret_cast<const TransactionOutput*>(
               &_TransactionOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TransactionOutput& a, TransactionOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionOutput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionOutput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionOutput* New() const final {
    return CreateMaybeMessage<TransactionOutput>(nullptr);
  }

  TransactionOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionOutput& from);
  void MergeFrom(const TransactionOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.TransactionOutput";
  }
  protected:
  explicit TransactionOutput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitmentFieldNumber = 2,
    kRangeProofFieldNumber = 3,
    kFeaturesFieldNumber = 1,
  };
  // bytes commitment = 2;
  void clear_commitment();
  const std::string& commitment() const;
  void set_commitment(const std::string& value);
  void set_commitment(std::string&& value);
  void set_commitment(const char* value);
  void set_commitment(const void* value, size_t size);
  std::string* mutable_commitment();
  std::string* release_commitment();
  void set_allocated_commitment(std::string* commitment);
  private:
  const std::string& _internal_commitment() const;
  void _internal_set_commitment(const std::string& value);
  std::string* _internal_mutable_commitment();
  public:

  // bytes range_proof = 3;
  void clear_range_proof();
  const std::string& range_proof() const;
  void set_range_proof(const std::string& value);
  void set_range_proof(std::string&& value);
  void set_range_proof(const char* value);
  void set_range_proof(const void* value, size_t size);
  std::string* mutable_range_proof();
  std::string* release_range_proof();
  void set_allocated_range_proof(std::string* range_proof);
  private:
  const std::string& _internal_range_proof() const;
  void _internal_set_range_proof(const std::string& value);
  std::string* _internal_mutable_range_proof();
  public:

  // .tari.rpc.OutputFeatures features = 1;
  bool has_features() const;
  private:
  bool _internal_has_features() const;
  public:
  void clear_features();
  const ::tari::rpc::OutputFeatures& features() const;
  ::tari::rpc::OutputFeatures* release_features();
  ::tari::rpc::OutputFeatures* mutable_features();
  void set_allocated_features(::tari::rpc::OutputFeatures* features);
  private:
  const ::tari::rpc::OutputFeatures& _internal_features() const;
  ::tari::rpc::OutputFeatures* _internal_mutable_features();
  public:
  void unsafe_arena_set_allocated_features(
      ::tari::rpc::OutputFeatures* features);
  ::tari::rpc::OutputFeatures* unsafe_arena_release_features();

  // @@protoc_insertion_point(class_scope:tari.rpc.TransactionOutput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commitment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr range_proof_;
  ::tari::rpc::OutputFeatures* features_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class OutputFeatures PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.OutputFeatures) */ {
 public:
  inline OutputFeatures() : OutputFeatures(nullptr) {}
  virtual ~OutputFeatures();

  OutputFeatures(const OutputFeatures& from);
  OutputFeatures(OutputFeatures&& from) noexcept
    : OutputFeatures() {
    *this = ::std::move(from);
  }

  inline OutputFeatures& operator=(const OutputFeatures& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputFeatures& operator=(OutputFeatures&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputFeatures& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputFeatures* internal_default_instance() {
    return reinterpret_cast<const OutputFeatures*>(
               &_OutputFeatures_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(OutputFeatures& a, OutputFeatures& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputFeatures* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OutputFeatures* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputFeatures* New() const final {
    return CreateMaybeMessage<OutputFeatures>(nullptr);
  }

  OutputFeatures* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputFeatures>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputFeatures& from);
  void MergeFrom(const OutputFeatures& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputFeatures* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.OutputFeatures";
  }
  protected:
  explicit OutputFeatures(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaturityFieldNumber = 2,
    kFlagsFieldNumber = 1,
  };
  // uint64 maturity = 2;
  void clear_maturity();
  ::PROTOBUF_NAMESPACE_ID::uint64 maturity() const;
  void set_maturity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_maturity() const;
  void _internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 flags = 1;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.OutputFeatures)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 maturity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class AggregateBody PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.AggregateBody) */ {
 public:
  inline AggregateBody() : AggregateBody(nullptr) {}
  virtual ~AggregateBody();

  AggregateBody(const AggregateBody& from);
  AggregateBody(AggregateBody&& from) noexcept
    : AggregateBody() {
    *this = ::std::move(from);
  }

  inline AggregateBody& operator=(const AggregateBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateBody& operator=(AggregateBody&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggregateBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregateBody* internal_default_instance() {
    return reinterpret_cast<const AggregateBody*>(
               &_AggregateBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AggregateBody& a, AggregateBody& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateBody* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregateBody* New() const final {
    return CreateMaybeMessage<AggregateBody>(nullptr);
  }

  AggregateBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregateBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregateBody& from);
  void MergeFrom(const AggregateBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.AggregateBody";
  }
  protected:
  explicit AggregateBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kOutputsFieldNumber = 2,
    kKernelsFieldNumber = 3,
  };
  // repeated .tari.rpc.TransactionInput inputs = 1;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::tari::rpc::TransactionInput* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::TransactionInput >*
      mutable_inputs();
  private:
  const ::tari::rpc::TransactionInput& _internal_inputs(int index) const;
  ::tari::rpc::TransactionInput* _internal_add_inputs();
  public:
  const ::tari::rpc::TransactionInput& inputs(int index) const;
  ::tari::rpc::TransactionInput* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::TransactionInput >&
      inputs() const;

  // repeated .tari.rpc.TransactionOutput outputs = 2;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::tari::rpc::TransactionOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::TransactionOutput >*
      mutable_outputs();
  private:
  const ::tari::rpc::TransactionOutput& _internal_outputs(int index) const;
  ::tari::rpc::TransactionOutput* _internal_add_outputs();
  public:
  const ::tari::rpc::TransactionOutput& outputs(int index) const;
  ::tari::rpc::TransactionOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::TransactionOutput >&
      outputs() const;

  // repeated .tari.rpc.TransactionKernel kernels = 3;
  int kernels_size() const;
  private:
  int _internal_kernels_size() const;
  public:
  void clear_kernels();
  ::tari::rpc::TransactionKernel* mutable_kernels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::TransactionKernel >*
      mutable_kernels();
  private:
  const ::tari::rpc::TransactionKernel& _internal_kernels(int index) const;
  ::tari::rpc::TransactionKernel* _internal_add_kernels();
  public:
  const ::tari::rpc::TransactionKernel& kernels(int index) const;
  ::tari::rpc::TransactionKernel* add_kernels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::TransactionKernel >&
      kernels() const;

  // @@protoc_insertion_point(class_scope:tari.rpc.AggregateBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::TransactionInput > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::TransactionOutput > outputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::TransactionKernel > kernels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Transaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {}
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // bytes offset = 1;
  void clear_offset();
  const std::string& offset() const;
  void set_offset(const std::string& value);
  void set_offset(std::string&& value);
  void set_offset(const char* value);
  void set_offset(const void* value, size_t size);
  std::string* mutable_offset();
  std::string* release_offset();
  void set_allocated_offset(std::string* offset);
  private:
  const std::string& _internal_offset() const;
  void _internal_set_offset(const std::string& value);
  std::string* _internal_mutable_offset();
  public:

  // .tari.rpc.AggregateBody body = 2;
  bool has_body() const;
  private:
  bool _internal_has_body() const;
  public:
  void clear_body();
  const ::tari::rpc::AggregateBody& body() const;
  ::tari::rpc::AggregateBody* release_body();
  ::tari::rpc::AggregateBody* mutable_body();
  void set_allocated_body(::tari::rpc::AggregateBody* body);
  private:
  const ::tari::rpc::AggregateBody& _internal_body() const;
  ::tari::rpc::AggregateBody* _internal_mutable_body();
  public:
  void unsafe_arena_set_allocated_body(
      ::tari::rpc::AggregateBody* body);
  ::tari::rpc::AggregateBody* unsafe_arena_release_body();

  // @@protoc_insertion_point(class_scope:tari.rpc.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_;
  ::tari::rpc::AggregateBody* body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Signature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.Signature) */ {
 public:
  inline Signature() : Signature(nullptr) {}
  virtual ~Signature();

  Signature(const Signature& from);
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signature& operator=(Signature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Signature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }
  inline void Swap(Signature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Signature* New() const final {
    return CreateMaybeMessage<Signature>(nullptr);
  }

  Signature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.Signature";
  }
  protected:
  explicit Signature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicNonceFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // bytes public_nonce = 1;
  void clear_public_nonce();
  const std::string& public_nonce() const;
  void set_public_nonce(const std::string& value);
  void set_public_nonce(std::string&& value);
  void set_public_nonce(const char* value);
  void set_public_nonce(const void* value, size_t size);
  std::string* mutable_public_nonce();
  std::string* release_public_nonce();
  void set_allocated_public_nonce(std::string* public_nonce);
  private:
  const std::string& _internal_public_nonce() const;
  void _internal_set_public_nonce(const std::string& value);
  std::string* _internal_mutable_public_nonce();
  public:

  // bytes signature = 2;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.Signature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class ConsensusConstants PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tari.rpc.ConsensusConstants) */ {
 public:
  inline ConsensusConstants() : ConsensusConstants(nullptr) {}
  virtual ~ConsensusConstants();

  ConsensusConstants(const ConsensusConstants& from);
  ConsensusConstants(ConsensusConstants&& from) noexcept
    : ConsensusConstants() {
    *this = ::std::move(from);
  }

  inline ConsensusConstants& operator=(const ConsensusConstants& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusConstants& operator=(ConsensusConstants&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConsensusConstants& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsensusConstants* internal_default_instance() {
    return reinterpret_cast<const ConsensusConstants*>(
               &_ConsensusConstants_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ConsensusConstants& a, ConsensusConstants& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusConstants* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusConstants* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConsensusConstants* New() const final {
    return CreateMaybeMessage<ConsensusConstants>(nullptr);
  }

  ConsensusConstants* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConsensusConstants>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConsensusConstants& from);
  void MergeFrom(const ConsensusConstants& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusConstants* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tari.rpc.ConsensusConstants";
  }
  protected:
  explicit ConsensusConstants(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinbaseLockHeightFieldNumber = 1,
    kFutureTimeLimitFieldNumber = 3,
    kDifficultyBlockWindowFieldNumber = 5,
    kDifficultyMaxBlockIntervalFieldNumber = 6,
    kMaxBlockTransactionWeightFieldNumber = 7,
    kPowAlgoCountFieldNumber = 8,
    kMedianTimestampCountFieldNumber = 9,
    kEmissionInitialFieldNumber = 10,
    kEmissionDecayFieldNumber = 11,
    kEmissionTailFieldNumber = 12,
    kMinBlakePowDifficultyFieldNumber = 13,
    kBlockWeightInputsFieldNumber = 14,
    kBlockWeightOutputsFieldNumber = 15,
    kBlockWeightKernelsFieldNumber = 16,
    kBlockchainVersionFieldNumber = 2,
  };
  // uint64 coinbase_lock_height = 1;
  void clear_coinbase_lock_height();
  ::PROTOBUF_NAMESPACE_ID::uint64 coinbase_lock_height() const;
  void set_coinbase_lock_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_coinbase_lock_height() const;
  void _internal_set_coinbase_lock_height(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 future_time_limit = 3;
  void clear_future_time_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 future_time_limit() const;
  void set_future_time_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_future_time_limit() const;
  void _internal_set_future_time_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 difficulty_block_window = 5;
  void clear_difficulty_block_window();
  ::PROTOBUF_NAMESPACE_ID::uint64 difficulty_block_window() const;
  void set_difficulty_block_window(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_difficulty_block_window() const;
  void _internal_set_difficulty_block_window(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 difficulty_max_block_interval = 6;
  void clear_difficulty_max_block_interval();
  ::PROTOBUF_NAMESPACE_ID::uint64 difficulty_max_block_interval() const;
  void set_difficulty_max_block_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_difficulty_max_block_interval() const;
  void _internal_set_difficulty_max_block_interval(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 max_block_transaction_weight = 7;
  void clear_max_block_transaction_weight();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_block_transaction_weight() const;
  void set_max_block_transaction_weight(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_block_transaction_weight() const;
  void _internal_set_max_block_transaction_weight(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pow_algo_count = 8;
  void clear_pow_algo_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 pow_algo_count() const;
  void set_pow_algo_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pow_algo_count() const;
  void _internal_set_pow_algo_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 median_timestamp_count = 9;
  void clear_median_timestamp_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 median_timestamp_count() const;
  void set_median_timestamp_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_median_timestamp_count() const;
  void _internal_set_median_timestamp_count(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 emission_initial = 10;
  void clear_emission_initial();
  ::PROTOBUF_NAMESPACE_ID::uint64 emission_initial() const;
  void set_emission_initial(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_emission_initial() const;
  void _internal_set_emission_initial(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double emission_decay = 11;
  void clear_emission_decay();
  double emission_decay() const;
  void set_emission_decay(double value);
  private:
  double _internal_emission_decay() const;
  void _internal_set_emission_decay(double value);
  public:

  // uint64 emission_tail = 12;
  void clear_emission_tail();
  ::PROTOBUF_NAMESPACE_ID::uint64 emission_tail() const;
  void set_emission_tail(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_emission_tail() const;
  void _internal_set_emission_tail(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 min_blake_pow_difficulty = 13;
  void clear_min_blake_pow_difficulty();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_blake_pow_difficulty() const;
  void set_min_blake_pow_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_blake_pow_difficulty() const;
  void _internal_set_min_blake_pow_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 block_weight_inputs = 14;
  void clear_block_weight_inputs();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_weight_inputs() const;
  void set_block_weight_inputs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_weight_inputs() const;
  void _internal_set_block_weight_inputs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 block_weight_outputs = 15;
  void clear_block_weight_outputs();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_weight_outputs() const;
  void set_block_weight_outputs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_weight_outputs() const;
  void _internal_set_block_weight_outputs(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 block_weight_kernels = 16;
  void clear_block_weight_kernels();
  ::PROTOBUF_NAMESPACE_ID::uint64 block_weight_kernels() const;
  void set_block_weight_kernels(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_block_weight_kernels() const;
  void _internal_set_block_weight_kernels(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 blockchain_version = 2;
  void clear_blockchain_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 blockchain_version() const;
  void set_blockchain_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blockchain_version() const;
  void _internal_set_blockchain_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:tari.rpc.ConsensusConstants)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 coinbase_lock_height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 future_time_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 difficulty_block_window_;
  ::PROTOBUF_NAMESPACE_ID::uint64 difficulty_max_block_interval_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_block_transaction_weight_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pow_algo_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 median_timestamp_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 emission_initial_;
  double emission_decay_;
  ::PROTOBUF_NAMESPACE_ID::uint64 emission_tail_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_blake_pow_difficulty_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_weight_inputs_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_weight_outputs_;
  ::PROTOBUF_NAMESPACE_ID::uint64 block_weight_kernels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blockchain_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockHeader

// bytes hash = 1;
inline void BlockHeader::clear_hash() {
  hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockHeader::hash() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockHeader.hash)
  return _internal_hash();
}
inline void BlockHeader::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:tari.rpc.BlockHeader.hash)
}
inline std::string* BlockHeader::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.BlockHeader.hash)
  return _internal_mutable_hash();
}
inline const std::string& BlockHeader::_internal_hash() const {
  return hash_.Get();
}
inline void BlockHeader::_internal_set_hash(const std::string& value) {

  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockHeader::set_hash(std::string&& value) {

  hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.BlockHeader.hash)
}
inline void BlockHeader::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.BlockHeader.hash)
}
inline void BlockHeader::set_hash(const void* value,
    size_t size) {

  hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.BlockHeader.hash)
}
inline std::string* BlockHeader::_internal_mutable_hash() {

  return hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockHeader::release_hash() {
  // @@protoc_insertion_point(field_release:tari.rpc.BlockHeader.hash)
  return hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockHeader::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {

  } else {

  }
  hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.BlockHeader.hash)
}

// uint32 version = 2;
inline void BlockHeader::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockHeader::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockHeader::version() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockHeader.version)
  return _internal_version();
}
inline void BlockHeader::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  version_ = value;
}
inline void BlockHeader::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:tari.rpc.BlockHeader.version)
}

// uint64 height = 3;
inline void BlockHeader::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::height() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockHeader.height)
  return _internal_height();
}
inline void BlockHeader::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  height_ = value;
}
inline void BlockHeader::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tari.rpc.BlockHeader.height)
}

// bytes prev_hash = 4;
inline void BlockHeader::clear_prev_hash() {
  prev_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockHeader::prev_hash() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockHeader.prev_hash)
  return _internal_prev_hash();
}
inline void BlockHeader::set_prev_hash(const std::string& value) {
  _internal_set_prev_hash(value);
  // @@protoc_insertion_point(field_set:tari.rpc.BlockHeader.prev_hash)
}
inline std::string* BlockHeader::mutable_prev_hash() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.BlockHeader.prev_hash)
  return _internal_mutable_prev_hash();
}
inline const std::string& BlockHeader::_internal_prev_hash() const {
  return prev_hash_.Get();
}
inline void BlockHeader::_internal_set_prev_hash(const std::string& value) {

  prev_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockHeader::set_prev_hash(std::string&& value) {

  prev_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.BlockHeader.prev_hash)
}
inline void BlockHeader::set_prev_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  prev_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.BlockHeader.prev_hash)
}
inline void BlockHeader::set_prev_hash(const void* value,
    size_t size) {

  prev_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.BlockHeader.prev_hash)
}
inline std::string* BlockHeader::_internal_mutable_prev_hash() {

  return prev_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockHeader::release_prev_hash() {
  // @@protoc_insertion_point(field_release:tari.rpc.BlockHeader.prev_hash)
  return prev_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockHeader::set_allocated_prev_hash(std::string* prev_hash) {
  if (prev_hash != nullptr) {

  } else {

  }
  prev_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.BlockHeader.prev_hash)
}

// .google.protobuf.Timestamp timestamp = 5;
inline bool BlockHeader::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool BlockHeader::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BlockHeader::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BlockHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockHeader.timestamp)
  return _internal_timestamp();
}
inline void BlockHeader::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.BlockHeader.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BlockHeader::release_timestamp() {

  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BlockHeader::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:tari.rpc.BlockHeader.timestamp)

  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BlockHeader::_internal_mutable_timestamp() {

  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BlockHeader::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.BlockHeader.timestamp)
  return _internal_mutable_timestamp();
}
inline void BlockHeader::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }

  } else {

  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.BlockHeader.timestamp)
}

// bytes output_mr = 6;
inline void BlockHeader::clear_output_mr() {
  output_mr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockHeader::output_mr() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockHeader.output_mr)
  return _internal_output_mr();
}
inline void BlockHeader::set_output_mr(const std::string& value) {
  _internal_set_output_mr(value);
  // @@protoc_insertion_point(field_set:tari.rpc.BlockHeader.output_mr)
}
inline std::string* BlockHeader::mutable_output_mr() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.BlockHeader.output_mr)
  return _internal_mutable_output_mr();
}
inline const std::string& BlockHeader::_internal_output_mr() const {
  return output_mr_.Get();
}
inline void BlockHeader::_internal_set_output_mr(const std::string& value) {

  output_mr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockHeader::set_output_mr(std::string&& value) {

  output_mr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.BlockHeader.output_mr)
}
inline void BlockHeader::set_output_mr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  output_mr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.BlockHeader.output_mr)
}
inline void BlockHeader::set_output_mr(const void* value,
    size_t size) {

  output_mr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.BlockHeader.output_mr)
}
inline std::string* BlockHeader::_internal_mutable_output_mr() {

  return output_mr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockHeader::release_output_mr() {
  // @@protoc_insertion_point(field_release:tari.rpc.BlockHeader.output_mr)
  return output_mr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockHeader::set_allocated_output_mr(std::string* output_mr) {
  if (output_mr != nullptr) {

  } else {

  }
  output_mr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_mr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.BlockHeader.output_mr)
}

// bytes range_proof_mr = 7;
inline void BlockHeader::clear_range_proof_mr() {
  range_proof_mr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockHeader::range_proof_mr() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockHeader.range_proof_mr)
  return _internal_range_proof_mr();
}
inline void BlockHeader::set_range_proof_mr(const std::string& value) {
  _internal_set_range_proof_mr(value);
  // @@protoc_insertion_point(field_set:tari.rpc.BlockHeader.range_proof_mr)
}
inline std::string* BlockHeader::mutable_range_proof_mr() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.BlockHeader.range_proof_mr)
  return _internal_mutable_range_proof_mr();
}
inline const std::string& BlockHeader::_internal_range_proof_mr() const {
  return range_proof_mr_.Get();
}
inline void BlockHeader::_internal_set_range_proof_mr(const std::string& value) {

  range_proof_mr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockHeader::set_range_proof_mr(std::string&& value) {

  range_proof_mr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.BlockHeader.range_proof_mr)
}
inline void BlockHeader::set_range_proof_mr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  range_proof_mr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.BlockHeader.range_proof_mr)
}
inline void BlockHeader::set_range_proof_mr(const void* value,
    size_t size) {

  range_proof_mr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.BlockHeader.range_proof_mr)
}
inline std::string* BlockHeader::_internal_mutable_range_proof_mr() {

  return range_proof_mr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockHeader::release_range_proof_mr() {
  // @@protoc_insertion_point(field_release:tari.rpc.BlockHeader.range_proof_mr)
  return range_proof_mr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockHeader::set_allocated_range_proof_mr(std::string* range_proof_mr) {
  if (range_proof_mr != nullptr) {

  } else {

  }
  range_proof_mr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range_proof_mr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.BlockHeader.range_proof_mr)
}

// bytes kernel_mr = 8;
inline void BlockHeader::clear_kernel_mr() {
  kernel_mr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockHeader::kernel_mr() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockHeader.kernel_mr)
  return _internal_kernel_mr();
}
inline void BlockHeader::set_kernel_mr(const std::string& value) {
  _internal_set_kernel_mr(value);
  // @@protoc_insertion_point(field_set:tari.rpc.BlockHeader.kernel_mr)
}
inline std::string* BlockHeader::mutable_kernel_mr() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.BlockHeader.kernel_mr)
  return _internal_mutable_kernel_mr();
}
inline const std::string& BlockHeader::_internal_kernel_mr() const {
  return kernel_mr_.Get();
}
inline void BlockHeader::_internal_set_kernel_mr(const std::string& value) {

  kernel_mr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockHeader::set_kernel_mr(std::string&& value) {

  kernel_mr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.BlockHeader.kernel_mr)
}
inline void BlockHeader::set_kernel_mr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  kernel_mr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.BlockHeader.kernel_mr)
}
inline void BlockHeader::set_kernel_mr(const void* value,
    size_t size) {

  kernel_mr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.BlockHeader.kernel_mr)
}
inline std::string* BlockHeader::_internal_mutable_kernel_mr() {

  return kernel_mr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockHeader::release_kernel_mr() {
  // @@protoc_insertion_point(field_release:tari.rpc.BlockHeader.kernel_mr)
  return kernel_mr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockHeader::set_allocated_kernel_mr(std::string* kernel_mr) {
  if (kernel_mr != nullptr) {

  } else {

  }
  kernel_mr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kernel_mr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.BlockHeader.kernel_mr)
}

// bytes total_kernel_offset = 9;
inline void BlockHeader::clear_total_kernel_offset() {
  total_kernel_offset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BlockHeader::total_kernel_offset() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockHeader.total_kernel_offset)
  return _internal_total_kernel_offset();
}
inline void BlockHeader::set_total_kernel_offset(const std::string& value) {
  _internal_set_total_kernel_offset(value);
  // @@protoc_insertion_point(field_set:tari.rpc.BlockHeader.total_kernel_offset)
}
inline std::string* BlockHeader::mutable_total_kernel_offset() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.BlockHeader.total_kernel_offset)
  return _internal_mutable_total_kernel_offset();
}
inline const std::string& BlockHeader::_internal_total_kernel_offset() const {
  return total_kernel_offset_.Get();
}
inline void BlockHeader::_internal_set_total_kernel_offset(const std::string& value) {

  total_kernel_offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BlockHeader::set_total_kernel_offset(std::string&& value) {

  total_kernel_offset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.BlockHeader.total_kernel_offset)
}
inline void BlockHeader::set_total_kernel_offset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  total_kernel_offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.BlockHeader.total_kernel_offset)
}
inline void BlockHeader::set_total_kernel_offset(const void* value,
    size_t size) {

  total_kernel_offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.BlockHeader.total_kernel_offset)
}
inline std::string* BlockHeader::_internal_mutable_total_kernel_offset() {

  return total_kernel_offset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BlockHeader::release_total_kernel_offset() {
  // @@protoc_insertion_point(field_release:tari.rpc.BlockHeader.total_kernel_offset)
  return total_kernel_offset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockHeader::set_allocated_total_kernel_offset(std::string* total_kernel_offset) {
  if (total_kernel_offset != nullptr) {

  } else {

  }
  total_kernel_offset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), total_kernel_offset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.BlockHeader.total_kernel_offset)
}

// uint64 nonce = 10;
inline void BlockHeader::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::_internal_nonce() const {
  return nonce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockHeader::nonce() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockHeader.nonce)
  return _internal_nonce();
}
inline void BlockHeader::_internal_set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  nonce_ = value;
}
inline void BlockHeader::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:tari.rpc.BlockHeader.nonce)
}

// .tari.rpc.ProofOfWork pow = 11;
inline bool BlockHeader::_internal_has_pow() const {
  return this != internal_default_instance() && pow_ != nullptr;
}
inline bool BlockHeader::has_pow() const {
  return _internal_has_pow();
}
inline void BlockHeader::clear_pow() {
  if (GetArena() == nullptr && pow_ != nullptr) {
    delete pow_;
  }
  pow_ = nullptr;
}
inline const ::tari::rpc::ProofOfWork& BlockHeader::_internal_pow() const {
  const ::tari::rpc::ProofOfWork* p = pow_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::ProofOfWork*>(
      &::tari::rpc::_ProofOfWork_default_instance_);
}
inline const ::tari::rpc::ProofOfWork& BlockHeader::pow() const {
  // @@protoc_insertion_point(field_get:tari.rpc.BlockHeader.pow)
  return _internal_pow();
}
inline void BlockHeader::unsafe_arena_set_allocated_pow(
    ::tari::rpc::ProofOfWork* pow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pow_);
  }
  pow_ = pow;
  if (pow) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.BlockHeader.pow)
}
inline ::tari::rpc::ProofOfWork* BlockHeader::release_pow() {

  ::tari::rpc::ProofOfWork* temp = pow_;
  pow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::ProofOfWork* BlockHeader::unsafe_arena_release_pow() {
  // @@protoc_insertion_point(field_release:tari.rpc.BlockHeader.pow)

  ::tari::rpc::ProofOfWork* temp = pow_;
  pow_ = nullptr;
  return temp;
}
inline ::tari::rpc::ProofOfWork* BlockHeader::_internal_mutable_pow() {

  if (pow_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::ProofOfWork>(GetArena());
    pow_ = p;
  }
  return pow_;
}
inline ::tari::rpc::ProofOfWork* BlockHeader::mutable_pow() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.BlockHeader.pow)
  return _internal_mutable_pow();
}
inline void BlockHeader::set_allocated_pow(::tari::rpc::ProofOfWork* pow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pow_;
  }
  if (pow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pow);
    if (message_arena != submessage_arena) {
      pow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pow, submessage_arena);
    }

  } else {

  }
  pow_ = pow;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.BlockHeader.pow)
}

// -------------------------------------------------------------------

// ProofOfWork

// uint64 pow_algo = 1;
inline void ProofOfWork::clear_pow_algo() {
  pow_algo_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProofOfWork::_internal_pow_algo() const {
  return pow_algo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProofOfWork::pow_algo() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ProofOfWork.pow_algo)
  return _internal_pow_algo();
}
inline void ProofOfWork::_internal_set_pow_algo(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  pow_algo_ = value;
}
inline void ProofOfWork::set_pow_algo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pow_algo(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ProofOfWork.pow_algo)
}

// uint64 accumulated_monero_difficulty = 2;
inline void ProofOfWork::clear_accumulated_monero_difficulty() {
  accumulated_monero_difficulty_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProofOfWork::_internal_accumulated_monero_difficulty() const {
  return accumulated_monero_difficulty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProofOfWork::accumulated_monero_difficulty() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ProofOfWork.accumulated_monero_difficulty)
  return _internal_accumulated_monero_difficulty();
}
inline void ProofOfWork::_internal_set_accumulated_monero_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  accumulated_monero_difficulty_ = value;
}
inline void ProofOfWork::set_accumulated_monero_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accumulated_monero_difficulty(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ProofOfWork.accumulated_monero_difficulty)
}

// uint64 accumulated_blake_difficulty = 3;
inline void ProofOfWork::clear_accumulated_blake_difficulty() {
  accumulated_blake_difficulty_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProofOfWork::_internal_accumulated_blake_difficulty() const {
  return accumulated_blake_difficulty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProofOfWork::accumulated_blake_difficulty() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ProofOfWork.accumulated_blake_difficulty)
  return _internal_accumulated_blake_difficulty();
}
inline void ProofOfWork::_internal_set_accumulated_blake_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  accumulated_blake_difficulty_ = value;
}
inline void ProofOfWork::set_accumulated_blake_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_accumulated_blake_difficulty(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ProofOfWork.accumulated_blake_difficulty)
}

// bytes pow_data = 4;
inline void ProofOfWork::clear_pow_data() {
  pow_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProofOfWork::pow_data() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ProofOfWork.pow_data)
  return _internal_pow_data();
}
inline void ProofOfWork::set_pow_data(const std::string& value) {
  _internal_set_pow_data(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ProofOfWork.pow_data)
}
inline std::string* ProofOfWork::mutable_pow_data() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.ProofOfWork.pow_data)
  return _internal_mutable_pow_data();
}
inline const std::string& ProofOfWork::_internal_pow_data() const {
  return pow_data_.Get();
}
inline void ProofOfWork::_internal_set_pow_data(const std::string& value) {

  pow_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProofOfWork::set_pow_data(std::string&& value) {

  pow_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.ProofOfWork.pow_data)
}
inline void ProofOfWork::set_pow_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  pow_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.ProofOfWork.pow_data)
}
inline void ProofOfWork::set_pow_data(const void* value,
    size_t size) {

  pow_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.ProofOfWork.pow_data)
}
inline std::string* ProofOfWork::_internal_mutable_pow_data() {

  return pow_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProofOfWork::release_pow_data() {
  // @@protoc_insertion_point(field_release:tari.rpc.ProofOfWork.pow_data)
  return pow_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProofOfWork::set_allocated_pow_data(std::string* pow_data) {
  if (pow_data != nullptr) {

  } else {

  }
  pow_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pow_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.ProofOfWork.pow_data)
}

// uint64 target_difficulty = 5;
inline void ProofOfWork::clear_target_difficulty() {
  target_difficulty_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProofOfWork::_internal_target_difficulty() const {
  return target_difficulty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ProofOfWork::target_difficulty() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ProofOfWork.target_difficulty)
  return _internal_target_difficulty();
}
inline void ProofOfWork::_internal_set_target_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  target_difficulty_ = value;
}
inline void ProofOfWork::set_target_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_target_difficulty(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ProofOfWork.target_difficulty)
}

// -------------------------------------------------------------------

// PowAlgo

// .tari.rpc.PowAlgo.PowAlgos pow_algo = 1;
inline void PowAlgo::clear_pow_algo() {
  pow_algo_ = 0;
}
inline ::tari::rpc::PowAlgo_PowAlgos PowAlgo::_internal_pow_algo() const {
  return static_cast< ::tari::rpc::PowAlgo_PowAlgos >(pow_algo_);
}
inline ::tari::rpc::PowAlgo_PowAlgos PowAlgo::pow_algo() const {
  // @@protoc_insertion_point(field_get:tari.rpc.PowAlgo.pow_algo)
  return _internal_pow_algo();
}
inline void PowAlgo::_internal_set_pow_algo(::tari::rpc::PowAlgo_PowAlgos value) {

  pow_algo_ = value;
}
inline void PowAlgo::set_pow_algo(::tari::rpc::PowAlgo_PowAlgos value) {
  _internal_set_pow_algo(value);
  // @@protoc_insertion_point(field_set:tari.rpc.PowAlgo.pow_algo)
}

// -------------------------------------------------------------------

// Block

// .tari.rpc.BlockHeader header = 1;
inline bool Block::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Block::has_header() const {
  return _internal_has_header();
}
inline void Block::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::tari::rpc::BlockHeader& Block::_internal_header() const {
  const ::tari::rpc::BlockHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::BlockHeader*>(
      &::tari::rpc::_BlockHeader_default_instance_);
}
inline const ::tari::rpc::BlockHeader& Block::header() const {
  // @@protoc_insertion_point(field_get:tari.rpc.Block.header)
  return _internal_header();
}
inline void Block::unsafe_arena_set_allocated_header(
    ::tari::rpc::BlockHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.Block.header)
}
inline ::tari::rpc::BlockHeader* Block::release_header() {

  ::tari::rpc::BlockHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::BlockHeader* Block::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:tari.rpc.Block.header)

  ::tari::rpc::BlockHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::tari::rpc::BlockHeader* Block::_internal_mutable_header() {

  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::BlockHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::tari::rpc::BlockHeader* Block::mutable_header() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.Block.header)
  return _internal_mutable_header();
}
inline void Block::set_allocated_header(::tari::rpc::BlockHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }

  } else {

  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.Block.header)
}

// .tari.rpc.AggregateBody body = 2;
inline bool Block::_internal_has_body() const {
  return this != internal_default_instance() && body_ != nullptr;
}
inline bool Block::has_body() const {
  return _internal_has_body();
}
inline void Block::clear_body() {
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
}
inline const ::tari::rpc::AggregateBody& Block::_internal_body() const {
  const ::tari::rpc::AggregateBody* p = body_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::AggregateBody*>(
      &::tari::rpc::_AggregateBody_default_instance_);
}
inline const ::tari::rpc::AggregateBody& Block::body() const {
  // @@protoc_insertion_point(field_get:tari.rpc.Block.body)
  return _internal_body();
}
inline void Block::unsafe_arena_set_allocated_body(
    ::tari::rpc::AggregateBody* body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.Block.body)
}
inline ::tari::rpc::AggregateBody* Block::release_body() {

  ::tari::rpc::AggregateBody* temp = body_;
  body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::AggregateBody* Block::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:tari.rpc.Block.body)

  ::tari::rpc::AggregateBody* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::tari::rpc::AggregateBody* Block::_internal_mutable_body() {

  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::AggregateBody>(GetArena());
    body_ = p;
  }
  return body_;
}
inline ::tari::rpc::AggregateBody* Block::mutable_body() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.Block.body)
  return _internal_mutable_body();
}
inline void Block::set_allocated_body(::tari::rpc::AggregateBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }

  } else {

  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.Block.body)
}

// -------------------------------------------------------------------

// HistoricalBlock

// uint64 confirmations = 1;
inline void HistoricalBlock::clear_confirmations() {
  confirmations_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistoricalBlock::_internal_confirmations() const {
  return confirmations_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HistoricalBlock::confirmations() const {
  // @@protoc_insertion_point(field_get:tari.rpc.HistoricalBlock.confirmations)
  return _internal_confirmations();
}
inline void HistoricalBlock::_internal_set_confirmations(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  confirmations_ = value;
}
inline void HistoricalBlock::set_confirmations(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_confirmations(value);
  // @@protoc_insertion_point(field_set:tari.rpc.HistoricalBlock.confirmations)
}

// repeated bytes spent_commitments = 2;
inline int HistoricalBlock::_internal_spent_commitments_size() const {
  return spent_commitments_.size();
}
inline int HistoricalBlock::spent_commitments_size() const {
  return _internal_spent_commitments_size();
}
inline void HistoricalBlock::clear_spent_commitments() {
  spent_commitments_.Clear();
}
inline std::string* HistoricalBlock::add_spent_commitments() {
  // @@protoc_insertion_point(field_add_mutable:tari.rpc.HistoricalBlock.spent_commitments)
  return _internal_add_spent_commitments();
}
inline const std::string& HistoricalBlock::_internal_spent_commitments(int index) const {
  return spent_commitments_.Get(index);
}
inline const std::string& HistoricalBlock::spent_commitments(int index) const {
  // @@protoc_insertion_point(field_get:tari.rpc.HistoricalBlock.spent_commitments)
  return _internal_spent_commitments(index);
}
inline std::string* HistoricalBlock::mutable_spent_commitments(int index) {
  // @@protoc_insertion_point(field_mutable:tari.rpc.HistoricalBlock.spent_commitments)
  return spent_commitments_.Mutable(index);
}
inline void HistoricalBlock::set_spent_commitments(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:tari.rpc.HistoricalBlock.spent_commitments)
  spent_commitments_.Mutable(index)->assign(value);
}
inline void HistoricalBlock::set_spent_commitments(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:tari.rpc.HistoricalBlock.spent_commitments)
  spent_commitments_.Mutable(index)->assign(std::move(value));
}
inline void HistoricalBlock::set_spent_commitments(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  spent_commitments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tari.rpc.HistoricalBlock.spent_commitments)
}
inline void HistoricalBlock::set_spent_commitments(int index, const void* value, size_t size) {
  spent_commitments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.HistoricalBlock.spent_commitments)
}
inline std::string* HistoricalBlock::_internal_add_spent_commitments() {
  return spent_commitments_.Add();
}
inline void HistoricalBlock::add_spent_commitments(const std::string& value) {
  spent_commitments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tari.rpc.HistoricalBlock.spent_commitments)
}
inline void HistoricalBlock::add_spent_commitments(std::string&& value) {
  spent_commitments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tari.rpc.HistoricalBlock.spent_commitments)
}
inline void HistoricalBlock::add_spent_commitments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  spent_commitments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tari.rpc.HistoricalBlock.spent_commitments)
}
inline void HistoricalBlock::add_spent_commitments(const void* value, size_t size) {
  spent_commitments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tari.rpc.HistoricalBlock.spent_commitments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HistoricalBlock::spent_commitments() const {
  // @@protoc_insertion_point(field_list:tari.rpc.HistoricalBlock.spent_commitments)
  return spent_commitments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HistoricalBlock::mutable_spent_commitments() {
  // @@protoc_insertion_point(field_mutable_list:tari.rpc.HistoricalBlock.spent_commitments)
  return &spent_commitments_;
}

// .tari.rpc.Block block = 3;
inline bool HistoricalBlock::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool HistoricalBlock::has_block() const {
  return _internal_has_block();
}
inline void HistoricalBlock::clear_block() {
  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::tari::rpc::Block& HistoricalBlock::_internal_block() const {
  const ::tari::rpc::Block* p = block_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::Block*>(
      &::tari::rpc::_Block_default_instance_);
}
inline const ::tari::rpc::Block& HistoricalBlock::block() const {
  // @@protoc_insertion_point(field_get:tari.rpc.HistoricalBlock.block)
  return _internal_block();
}
inline void HistoricalBlock::unsafe_arena_set_allocated_block(
    ::tari::rpc::Block* block) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.HistoricalBlock.block)
}
inline ::tari::rpc::Block* HistoricalBlock::release_block() {

  ::tari::rpc::Block* temp = block_;
  block_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::Block* HistoricalBlock::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:tari.rpc.HistoricalBlock.block)

  ::tari::rpc::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::tari::rpc::Block* HistoricalBlock::_internal_mutable_block() {

  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::Block>(GetArena());
    block_ = p;
  }
  return block_;
}
inline ::tari::rpc::Block* HistoricalBlock::mutable_block() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.HistoricalBlock.block)
  return _internal_mutable_block();
}
inline void HistoricalBlock::set_allocated_block(::tari::rpc::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }

  } else {

  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.HistoricalBlock.block)
}

// -------------------------------------------------------------------

// NewBlockHeaderTemplate

// uint32 version = 1;
inline void NewBlockHeaderTemplate::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewBlockHeaderTemplate::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewBlockHeaderTemplate::version() const {
  // @@protoc_insertion_point(field_get:tari.rpc.NewBlockHeaderTemplate.version)
  return _internal_version();
}
inline void NewBlockHeaderTemplate::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  version_ = value;
}
inline void NewBlockHeaderTemplate::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:tari.rpc.NewBlockHeaderTemplate.version)
}

// uint64 height = 2;
inline void NewBlockHeaderTemplate::clear_height() {
  height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewBlockHeaderTemplate::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NewBlockHeaderTemplate::height() const {
  // @@protoc_insertion_point(field_get:tari.rpc.NewBlockHeaderTemplate.height)
  return _internal_height();
}
inline void NewBlockHeaderTemplate::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  height_ = value;
}
inline void NewBlockHeaderTemplate::set_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tari.rpc.NewBlockHeaderTemplate.height)
}

// bytes prev_hash = 3;
inline void NewBlockHeaderTemplate::clear_prev_hash() {
  prev_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewBlockHeaderTemplate::prev_hash() const {
  // @@protoc_insertion_point(field_get:tari.rpc.NewBlockHeaderTemplate.prev_hash)
  return _internal_prev_hash();
}
inline void NewBlockHeaderTemplate::set_prev_hash(const std::string& value) {
  _internal_set_prev_hash(value);
  // @@protoc_insertion_point(field_set:tari.rpc.NewBlockHeaderTemplate.prev_hash)
}
inline std::string* NewBlockHeaderTemplate::mutable_prev_hash() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.NewBlockHeaderTemplate.prev_hash)
  return _internal_mutable_prev_hash();
}
inline const std::string& NewBlockHeaderTemplate::_internal_prev_hash() const {
  return prev_hash_.Get();
}
inline void NewBlockHeaderTemplate::_internal_set_prev_hash(const std::string& value) {

  prev_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewBlockHeaderTemplate::set_prev_hash(std::string&& value) {

  prev_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.NewBlockHeaderTemplate.prev_hash)
}
inline void NewBlockHeaderTemplate::set_prev_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  prev_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.NewBlockHeaderTemplate.prev_hash)
}
inline void NewBlockHeaderTemplate::set_prev_hash(const void* value,
    size_t size) {

  prev_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.NewBlockHeaderTemplate.prev_hash)
}
inline std::string* NewBlockHeaderTemplate::_internal_mutable_prev_hash() {

  return prev_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewBlockHeaderTemplate::release_prev_hash() {
  // @@protoc_insertion_point(field_release:tari.rpc.NewBlockHeaderTemplate.prev_hash)
  return prev_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewBlockHeaderTemplate::set_allocated_prev_hash(std::string* prev_hash) {
  if (prev_hash != nullptr) {

  } else {

  }
  prev_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev_hash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.NewBlockHeaderTemplate.prev_hash)
}

// bytes total_kernel_offset = 4;
inline void NewBlockHeaderTemplate::clear_total_kernel_offset() {
  total_kernel_offset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NewBlockHeaderTemplate::total_kernel_offset() const {
  // @@protoc_insertion_point(field_get:tari.rpc.NewBlockHeaderTemplate.total_kernel_offset)
  return _internal_total_kernel_offset();
}
inline void NewBlockHeaderTemplate::set_total_kernel_offset(const std::string& value) {
  _internal_set_total_kernel_offset(value);
  // @@protoc_insertion_point(field_set:tari.rpc.NewBlockHeaderTemplate.total_kernel_offset)
}
inline std::string* NewBlockHeaderTemplate::mutable_total_kernel_offset() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.NewBlockHeaderTemplate.total_kernel_offset)
  return _internal_mutable_total_kernel_offset();
}
inline const std::string& NewBlockHeaderTemplate::_internal_total_kernel_offset() const {
  return total_kernel_offset_.Get();
}
inline void NewBlockHeaderTemplate::_internal_set_total_kernel_offset(const std::string& value) {

  total_kernel_offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NewBlockHeaderTemplate::set_total_kernel_offset(std::string&& value) {

  total_kernel_offset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.NewBlockHeaderTemplate.total_kernel_offset)
}
inline void NewBlockHeaderTemplate::set_total_kernel_offset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  total_kernel_offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.NewBlockHeaderTemplate.total_kernel_offset)
}
inline void NewBlockHeaderTemplate::set_total_kernel_offset(const void* value,
    size_t size) {

  total_kernel_offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.NewBlockHeaderTemplate.total_kernel_offset)
}
inline std::string* NewBlockHeaderTemplate::_internal_mutable_total_kernel_offset() {

  return total_kernel_offset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NewBlockHeaderTemplate::release_total_kernel_offset() {
  // @@protoc_insertion_point(field_release:tari.rpc.NewBlockHeaderTemplate.total_kernel_offset)
  return total_kernel_offset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewBlockHeaderTemplate::set_allocated_total_kernel_offset(std::string* total_kernel_offset) {
  if (total_kernel_offset != nullptr) {

  } else {

  }
  total_kernel_offset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), total_kernel_offset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.NewBlockHeaderTemplate.total_kernel_offset)
}

// .tari.rpc.ProofOfWork pow = 5;
inline bool NewBlockHeaderTemplate::_internal_has_pow() const {
  return this != internal_default_instance() && pow_ != nullptr;
}
inline bool NewBlockHeaderTemplate::has_pow() const {
  return _internal_has_pow();
}
inline void NewBlockHeaderTemplate::clear_pow() {
  if (GetArena() == nullptr && pow_ != nullptr) {
    delete pow_;
  }
  pow_ = nullptr;
}
inline const ::tari::rpc::ProofOfWork& NewBlockHeaderTemplate::_internal_pow() const {
  const ::tari::rpc::ProofOfWork* p = pow_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::ProofOfWork*>(
      &::tari::rpc::_ProofOfWork_default_instance_);
}
inline const ::tari::rpc::ProofOfWork& NewBlockHeaderTemplate::pow() const {
  // @@protoc_insertion_point(field_get:tari.rpc.NewBlockHeaderTemplate.pow)
  return _internal_pow();
}
inline void NewBlockHeaderTemplate::unsafe_arena_set_allocated_pow(
    ::tari::rpc::ProofOfWork* pow) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pow_);
  }
  pow_ = pow;
  if (pow) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.NewBlockHeaderTemplate.pow)
}
inline ::tari::rpc::ProofOfWork* NewBlockHeaderTemplate::release_pow() {

  ::tari::rpc::ProofOfWork* temp = pow_;
  pow_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::ProofOfWork* NewBlockHeaderTemplate::unsafe_arena_release_pow() {
  // @@protoc_insertion_point(field_release:tari.rpc.NewBlockHeaderTemplate.pow)

  ::tari::rpc::ProofOfWork* temp = pow_;
  pow_ = nullptr;
  return temp;
}
inline ::tari::rpc::ProofOfWork* NewBlockHeaderTemplate::_internal_mutable_pow() {

  if (pow_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::ProofOfWork>(GetArena());
    pow_ = p;
  }
  return pow_;
}
inline ::tari::rpc::ProofOfWork* NewBlockHeaderTemplate::mutable_pow() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.NewBlockHeaderTemplate.pow)
  return _internal_mutable_pow();
}
inline void NewBlockHeaderTemplate::set_allocated_pow(::tari::rpc::ProofOfWork* pow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pow_;
  }
  if (pow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pow);
    if (message_arena != submessage_arena) {
      pow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pow, submessage_arena);
    }

  } else {

  }
  pow_ = pow;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.NewBlockHeaderTemplate.pow)
}

// -------------------------------------------------------------------

// NewBlockTemplate

// .tari.rpc.NewBlockHeaderTemplate header = 1;
inline bool NewBlockTemplate::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool NewBlockTemplate::has_header() const {
  return _internal_has_header();
}
inline void NewBlockTemplate::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::tari::rpc::NewBlockHeaderTemplate& NewBlockTemplate::_internal_header() const {
  const ::tari::rpc::NewBlockHeaderTemplate* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::NewBlockHeaderTemplate*>(
      &::tari::rpc::_NewBlockHeaderTemplate_default_instance_);
}
inline const ::tari::rpc::NewBlockHeaderTemplate& NewBlockTemplate::header() const {
  // @@protoc_insertion_point(field_get:tari.rpc.NewBlockTemplate.header)
  return _internal_header();
}
inline void NewBlockTemplate::unsafe_arena_set_allocated_header(
    ::tari::rpc::NewBlockHeaderTemplate* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.NewBlockTemplate.header)
}
inline ::tari::rpc::NewBlockHeaderTemplate* NewBlockTemplate::release_header() {

  ::tari::rpc::NewBlockHeaderTemplate* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::NewBlockHeaderTemplate* NewBlockTemplate::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:tari.rpc.NewBlockTemplate.header)

  ::tari::rpc::NewBlockHeaderTemplate* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::tari::rpc::NewBlockHeaderTemplate* NewBlockTemplate::_internal_mutable_header() {

  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::NewBlockHeaderTemplate>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::tari::rpc::NewBlockHeaderTemplate* NewBlockTemplate::mutable_header() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.NewBlockTemplate.header)
  return _internal_mutable_header();
}
inline void NewBlockTemplate::set_allocated_header(::tari::rpc::NewBlockHeaderTemplate* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }

  } else {

  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.NewBlockTemplate.header)
}

// .tari.rpc.AggregateBody body = 2;
inline bool NewBlockTemplate::_internal_has_body() const {
  return this != internal_default_instance() && body_ != nullptr;
}
inline bool NewBlockTemplate::has_body() const {
  return _internal_has_body();
}
inline void NewBlockTemplate::clear_body() {
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
}
inline const ::tari::rpc::AggregateBody& NewBlockTemplate::_internal_body() const {
  const ::tari::rpc::AggregateBody* p = body_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::AggregateBody*>(
      &::tari::rpc::_AggregateBody_default_instance_);
}
inline const ::tari::rpc::AggregateBody& NewBlockTemplate::body() const {
  // @@protoc_insertion_point(field_get:tari.rpc.NewBlockTemplate.body)
  return _internal_body();
}
inline void NewBlockTemplate::unsafe_arena_set_allocated_body(
    ::tari::rpc::AggregateBody* body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.NewBlockTemplate.body)
}
inline ::tari::rpc::AggregateBody* NewBlockTemplate::release_body() {

  ::tari::rpc::AggregateBody* temp = body_;
  body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::AggregateBody* NewBlockTemplate::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:tari.rpc.NewBlockTemplate.body)

  ::tari::rpc::AggregateBody* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::tari::rpc::AggregateBody* NewBlockTemplate::_internal_mutable_body() {

  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::AggregateBody>(GetArena());
    body_ = p;
  }
  return body_;
}
inline ::tari::rpc::AggregateBody* NewBlockTemplate::mutable_body() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.NewBlockTemplate.body)
  return _internal_mutable_body();
}
inline void NewBlockTemplate::set_allocated_body(::tari::rpc::AggregateBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }

  } else {

  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.NewBlockTemplate.body)
}

// -------------------------------------------------------------------

// TransactionKernel

// uint32 features = 1;
inline void TransactionKernel::clear_features() {
  features_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionKernel::_internal_features() const {
  return features_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionKernel::features() const {
  // @@protoc_insertion_point(field_get:tari.rpc.TransactionKernel.features)
  return _internal_features();
}
inline void TransactionKernel::_internal_set_features(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  features_ = value;
}
inline void TransactionKernel::set_features(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_features(value);
  // @@protoc_insertion_point(field_set:tari.rpc.TransactionKernel.features)
}

// uint64 fee = 2;
inline void TransactionKernel::clear_fee() {
  fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionKernel::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionKernel::fee() const {
  // @@protoc_insertion_point(field_get:tari.rpc.TransactionKernel.fee)
  return _internal_fee();
}
inline void TransactionKernel::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  fee_ = value;
}
inline void TransactionKernel::set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:tari.rpc.TransactionKernel.fee)
}

// uint64 lock_height = 3;
inline void TransactionKernel::clear_lock_height() {
  lock_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionKernel::_internal_lock_height() const {
  return lock_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TransactionKernel::lock_height() const {
  // @@protoc_insertion_point(field_get:tari.rpc.TransactionKernel.lock_height)
  return _internal_lock_height();
}
inline void TransactionKernel::_internal_set_lock_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  lock_height_ = value;
}
inline void TransactionKernel::set_lock_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lock_height(value);
  // @@protoc_insertion_point(field_set:tari.rpc.TransactionKernel.lock_height)
}

// bytes meta_info = 4;
inline void TransactionKernel::clear_meta_info() {
  meta_info_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransactionKernel::meta_info() const {
  // @@protoc_insertion_point(field_get:tari.rpc.TransactionKernel.meta_info)
  return _internal_meta_info();
}
inline void TransactionKernel::set_meta_info(const std::string& value) {
  _internal_set_meta_info(value);
  // @@protoc_insertion_point(field_set:tari.rpc.TransactionKernel.meta_info)
}
inline std::string* TransactionKernel::mutable_meta_info() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.TransactionKernel.meta_info)
  return _internal_mutable_meta_info();
}
inline const std::string& TransactionKernel::_internal_meta_info() const {
  return meta_info_.Get();
}
inline void TransactionKernel::_internal_set_meta_info(const std::string& value) {

  meta_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionKernel::set_meta_info(std::string&& value) {

  meta_info_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.TransactionKernel.meta_info)
}
inline void TransactionKernel::set_meta_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  meta_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.TransactionKernel.meta_info)
}
inline void TransactionKernel::set_meta_info(const void* value,
    size_t size) {

  meta_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.TransactionKernel.meta_info)
}
inline std::string* TransactionKernel::_internal_mutable_meta_info() {

  return meta_info_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionKernel::release_meta_info() {
  // @@protoc_insertion_point(field_release:tari.rpc.TransactionKernel.meta_info)
  return meta_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionKernel::set_allocated_meta_info(std::string* meta_info) {
  if (meta_info != nullptr) {

  } else {

  }
  meta_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), meta_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TransactionKernel.meta_info)
}

// bytes linked_kernel = 5;
inline void TransactionKernel::clear_linked_kernel() {
  linked_kernel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransactionKernel::linked_kernel() const {
  // @@protoc_insertion_point(field_get:tari.rpc.TransactionKernel.linked_kernel)
  return _internal_linked_kernel();
}
inline void TransactionKernel::set_linked_kernel(const std::string& value) {
  _internal_set_linked_kernel(value);
  // @@protoc_insertion_point(field_set:tari.rpc.TransactionKernel.linked_kernel)
}
inline std::string* TransactionKernel::mutable_linked_kernel() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.TransactionKernel.linked_kernel)
  return _internal_mutable_linked_kernel();
}
inline const std::string& TransactionKernel::_internal_linked_kernel() const {
  return linked_kernel_.Get();
}
inline void TransactionKernel::_internal_set_linked_kernel(const std::string& value) {

  linked_kernel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionKernel::set_linked_kernel(std::string&& value) {

  linked_kernel_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.TransactionKernel.linked_kernel)
}
inline void TransactionKernel::set_linked_kernel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  linked_kernel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.TransactionKernel.linked_kernel)
}
inline void TransactionKernel::set_linked_kernel(const void* value,
    size_t size) {

  linked_kernel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.TransactionKernel.linked_kernel)
}
inline std::string* TransactionKernel::_internal_mutable_linked_kernel() {

  return linked_kernel_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionKernel::release_linked_kernel() {
  // @@protoc_insertion_point(field_release:tari.rpc.TransactionKernel.linked_kernel)
  return linked_kernel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionKernel::set_allocated_linked_kernel(std::string* linked_kernel) {
  if (linked_kernel != nullptr) {

  } else {

  }
  linked_kernel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), linked_kernel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TransactionKernel.linked_kernel)
}

// bytes excess = 6;
inline void TransactionKernel::clear_excess() {
  excess_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransactionKernel::excess() const {
  // @@protoc_insertion_point(field_get:tari.rpc.TransactionKernel.excess)
  return _internal_excess();
}
inline void TransactionKernel::set_excess(const std::string& value) {
  _internal_set_excess(value);
  // @@protoc_insertion_point(field_set:tari.rpc.TransactionKernel.excess)
}
inline std::string* TransactionKernel::mutable_excess() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.TransactionKernel.excess)
  return _internal_mutable_excess();
}
inline const std::string& TransactionKernel::_internal_excess() const {
  return excess_.Get();
}
inline void TransactionKernel::_internal_set_excess(const std::string& value) {

  excess_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionKernel::set_excess(std::string&& value) {

  excess_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.TransactionKernel.excess)
}
inline void TransactionKernel::set_excess(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  excess_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.TransactionKernel.excess)
}
inline void TransactionKernel::set_excess(const void* value,
    size_t size) {

  excess_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.TransactionKernel.excess)
}
inline std::string* TransactionKernel::_internal_mutable_excess() {

  return excess_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionKernel::release_excess() {
  // @@protoc_insertion_point(field_release:tari.rpc.TransactionKernel.excess)
  return excess_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionKernel::set_allocated_excess(std::string* excess) {
  if (excess != nullptr) {

  } else {

  }
  excess_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), excess,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TransactionKernel.excess)
}

// .tari.rpc.Signature excess_sig = 7;
inline bool TransactionKernel::_internal_has_excess_sig() const {
  return this != internal_default_instance() && excess_sig_ != nullptr;
}
inline bool TransactionKernel::has_excess_sig() const {
  return _internal_has_excess_sig();
}
inline void TransactionKernel::clear_excess_sig() {
  if (GetArena() == nullptr && excess_sig_ != nullptr) {
    delete excess_sig_;
  }
  excess_sig_ = nullptr;
}
inline const ::tari::rpc::Signature& TransactionKernel::_internal_excess_sig() const {
  const ::tari::rpc::Signature* p = excess_sig_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::Signature*>(
      &::tari::rpc::_Signature_default_instance_);
}
inline const ::tari::rpc::Signature& TransactionKernel::excess_sig() const {
  // @@protoc_insertion_point(field_get:tari.rpc.TransactionKernel.excess_sig)
  return _internal_excess_sig();
}
inline void TransactionKernel::unsafe_arena_set_allocated_excess_sig(
    ::tari::rpc::Signature* excess_sig) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(excess_sig_);
  }
  excess_sig_ = excess_sig;
  if (excess_sig) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.TransactionKernel.excess_sig)
}
inline ::tari::rpc::Signature* TransactionKernel::release_excess_sig() {

  ::tari::rpc::Signature* temp = excess_sig_;
  excess_sig_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::Signature* TransactionKernel::unsafe_arena_release_excess_sig() {
  // @@protoc_insertion_point(field_release:tari.rpc.TransactionKernel.excess_sig)

  ::tari::rpc::Signature* temp = excess_sig_;
  excess_sig_ = nullptr;
  return temp;
}
inline ::tari::rpc::Signature* TransactionKernel::_internal_mutable_excess_sig() {

  if (excess_sig_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::Signature>(GetArena());
    excess_sig_ = p;
  }
  return excess_sig_;
}
inline ::tari::rpc::Signature* TransactionKernel::mutable_excess_sig() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.TransactionKernel.excess_sig)
  return _internal_mutable_excess_sig();
}
inline void TransactionKernel::set_allocated_excess_sig(::tari::rpc::Signature* excess_sig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete excess_sig_;
  }
  if (excess_sig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(excess_sig);
    if (message_arena != submessage_arena) {
      excess_sig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, excess_sig, submessage_arena);
    }

  } else {

  }
  excess_sig_ = excess_sig;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TransactionKernel.excess_sig)
}

// -------------------------------------------------------------------

// TransactionInput

// .tari.rpc.OutputFeatures features = 1;
inline bool TransactionInput::_internal_has_features() const {
  return this != internal_default_instance() && features_ != nullptr;
}
inline bool TransactionInput::has_features() const {
  return _internal_has_features();
}
inline void TransactionInput::clear_features() {
  if (GetArena() == nullptr && features_ != nullptr) {
    delete features_;
  }
  features_ = nullptr;
}
inline const ::tari::rpc::OutputFeatures& TransactionInput::_internal_features() const {
  const ::tari::rpc::OutputFeatures* p = features_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::OutputFeatures*>(
      &::tari::rpc::_OutputFeatures_default_instance_);
}
inline const ::tari::rpc::OutputFeatures& TransactionInput::features() const {
  // @@protoc_insertion_point(field_get:tari.rpc.TransactionInput.features)
  return _internal_features();
}
inline void TransactionInput::unsafe_arena_set_allocated_features(
    ::tari::rpc::OutputFeatures* features) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(features_);
  }
  features_ = features;
  if (features) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.TransactionInput.features)
}
inline ::tari::rpc::OutputFeatures* TransactionInput::release_features() {

  ::tari::rpc::OutputFeatures* temp = features_;
  features_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::OutputFeatures* TransactionInput::unsafe_arena_release_features() {
  // @@protoc_insertion_point(field_release:tari.rpc.TransactionInput.features)

  ::tari::rpc::OutputFeatures* temp = features_;
  features_ = nullptr;
  return temp;
}
inline ::tari::rpc::OutputFeatures* TransactionInput::_internal_mutable_features() {

  if (features_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::OutputFeatures>(GetArena());
    features_ = p;
  }
  return features_;
}
inline ::tari::rpc::OutputFeatures* TransactionInput::mutable_features() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.TransactionInput.features)
  return _internal_mutable_features();
}
inline void TransactionInput::set_allocated_features(::tari::rpc::OutputFeatures* features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete features_;
  }
  if (features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(features);
    if (message_arena != submessage_arena) {
      features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }

  } else {

  }
  features_ = features;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TransactionInput.features)
}

// bytes commitment = 2;
inline void TransactionInput::clear_commitment() {
  commitment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransactionInput::commitment() const {
  // @@protoc_insertion_point(field_get:tari.rpc.TransactionInput.commitment)
  return _internal_commitment();
}
inline void TransactionInput::set_commitment(const std::string& value) {
  _internal_set_commitment(value);
  // @@protoc_insertion_point(field_set:tari.rpc.TransactionInput.commitment)
}
inline std::string* TransactionInput::mutable_commitment() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.TransactionInput.commitment)
  return _internal_mutable_commitment();
}
inline const std::string& TransactionInput::_internal_commitment() const {
  return commitment_.Get();
}
inline void TransactionInput::_internal_set_commitment(const std::string& value) {

  commitment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionInput::set_commitment(std::string&& value) {

  commitment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.TransactionInput.commitment)
}
inline void TransactionInput::set_commitment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  commitment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.TransactionInput.commitment)
}
inline void TransactionInput::set_commitment(const void* value,
    size_t size) {

  commitment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.TransactionInput.commitment)
}
inline std::string* TransactionInput::_internal_mutable_commitment() {

  return commitment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionInput::release_commitment() {
  // @@protoc_insertion_point(field_release:tari.rpc.TransactionInput.commitment)
  return commitment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionInput::set_allocated_commitment(std::string* commitment) {
  if (commitment != nullptr) {

  } else {

  }
  commitment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commitment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TransactionInput.commitment)
}

// -------------------------------------------------------------------

// TransactionOutput

// .tari.rpc.OutputFeatures features = 1;
inline bool TransactionOutput::_internal_has_features() const {
  return this != internal_default_instance() && features_ != nullptr;
}
inline bool TransactionOutput::has_features() const {
  return _internal_has_features();
}
inline void TransactionOutput::clear_features() {
  if (GetArena() == nullptr && features_ != nullptr) {
    delete features_;
  }
  features_ = nullptr;
}
inline const ::tari::rpc::OutputFeatures& TransactionOutput::_internal_features() const {
  const ::tari::rpc::OutputFeatures* p = features_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::OutputFeatures*>(
      &::tari::rpc::_OutputFeatures_default_instance_);
}
inline const ::tari::rpc::OutputFeatures& TransactionOutput::features() const {
  // @@protoc_insertion_point(field_get:tari.rpc.TransactionOutput.features)
  return _internal_features();
}
inline void TransactionOutput::unsafe_arena_set_allocated_features(
    ::tari::rpc::OutputFeatures* features) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(features_);
  }
  features_ = features;
  if (features) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.TransactionOutput.features)
}
inline ::tari::rpc::OutputFeatures* TransactionOutput::release_features() {

  ::tari::rpc::OutputFeatures* temp = features_;
  features_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::OutputFeatures* TransactionOutput::unsafe_arena_release_features() {
  // @@protoc_insertion_point(field_release:tari.rpc.TransactionOutput.features)

  ::tari::rpc::OutputFeatures* temp = features_;
  features_ = nullptr;
  return temp;
}
inline ::tari::rpc::OutputFeatures* TransactionOutput::_internal_mutable_features() {

  if (features_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::OutputFeatures>(GetArena());
    features_ = p;
  }
  return features_;
}
inline ::tari::rpc::OutputFeatures* TransactionOutput::mutable_features() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.TransactionOutput.features)
  return _internal_mutable_features();
}
inline void TransactionOutput::set_allocated_features(::tari::rpc::OutputFeatures* features) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete features_;
  }
  if (features) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(features);
    if (message_arena != submessage_arena) {
      features = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }

  } else {

  }
  features_ = features;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TransactionOutput.features)
}

// bytes commitment = 2;
inline void TransactionOutput::clear_commitment() {
  commitment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransactionOutput::commitment() const {
  // @@protoc_insertion_point(field_get:tari.rpc.TransactionOutput.commitment)
  return _internal_commitment();
}
inline void TransactionOutput::set_commitment(const std::string& value) {
  _internal_set_commitment(value);
  // @@protoc_insertion_point(field_set:tari.rpc.TransactionOutput.commitment)
}
inline std::string* TransactionOutput::mutable_commitment() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.TransactionOutput.commitment)
  return _internal_mutable_commitment();
}
inline const std::string& TransactionOutput::_internal_commitment() const {
  return commitment_.Get();
}
inline void TransactionOutput::_internal_set_commitment(const std::string& value) {

  commitment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionOutput::set_commitment(std::string&& value) {

  commitment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.TransactionOutput.commitment)
}
inline void TransactionOutput::set_commitment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  commitment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.TransactionOutput.commitment)
}
inline void TransactionOutput::set_commitment(const void* value,
    size_t size) {

  commitment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.TransactionOutput.commitment)
}
inline std::string* TransactionOutput::_internal_mutable_commitment() {

  return commitment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionOutput::release_commitment() {
  // @@protoc_insertion_point(field_release:tari.rpc.TransactionOutput.commitment)
  return commitment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionOutput::set_allocated_commitment(std::string* commitment) {
  if (commitment != nullptr) {

  } else {

  }
  commitment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commitment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TransactionOutput.commitment)
}

// bytes range_proof = 3;
inline void TransactionOutput::clear_range_proof() {
  range_proof_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransactionOutput::range_proof() const {
  // @@protoc_insertion_point(field_get:tari.rpc.TransactionOutput.range_proof)
  return _internal_range_proof();
}
inline void TransactionOutput::set_range_proof(const std::string& value) {
  _internal_set_range_proof(value);
  // @@protoc_insertion_point(field_set:tari.rpc.TransactionOutput.range_proof)
}
inline std::string* TransactionOutput::mutable_range_proof() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.TransactionOutput.range_proof)
  return _internal_mutable_range_proof();
}
inline const std::string& TransactionOutput::_internal_range_proof() const {
  return range_proof_.Get();
}
inline void TransactionOutput::_internal_set_range_proof(const std::string& value) {

  range_proof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionOutput::set_range_proof(std::string&& value) {

  range_proof_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.TransactionOutput.range_proof)
}
inline void TransactionOutput::set_range_proof(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  range_proof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.TransactionOutput.range_proof)
}
inline void TransactionOutput::set_range_proof(const void* value,
    size_t size) {

  range_proof_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.TransactionOutput.range_proof)
}
inline std::string* TransactionOutput::_internal_mutable_range_proof() {

  return range_proof_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionOutput::release_range_proof() {
  // @@protoc_insertion_point(field_release:tari.rpc.TransactionOutput.range_proof)
  return range_proof_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionOutput::set_allocated_range_proof(std::string* range_proof) {
  if (range_proof != nullptr) {

  } else {

  }
  range_proof_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), range_proof,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.TransactionOutput.range_proof)
}

// -------------------------------------------------------------------

// OutputFeatures

// uint32 flags = 1;
inline void OutputFeatures::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputFeatures::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutputFeatures::flags() const {
  // @@protoc_insertion_point(field_get:tari.rpc.OutputFeatures.flags)
  return _internal_flags();
}
inline void OutputFeatures::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  flags_ = value;
}
inline void OutputFeatures::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:tari.rpc.OutputFeatures.flags)
}

// uint64 maturity = 2;
inline void OutputFeatures::clear_maturity() {
  maturity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OutputFeatures::_internal_maturity() const {
  return maturity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OutputFeatures::maturity() const {
  // @@protoc_insertion_point(field_get:tari.rpc.OutputFeatures.maturity)
  return _internal_maturity();
}
inline void OutputFeatures::_internal_set_maturity(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  maturity_ = value;
}
inline void OutputFeatures::set_maturity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_maturity(value);
  // @@protoc_insertion_point(field_set:tari.rpc.OutputFeatures.maturity)
}

// -------------------------------------------------------------------

// AggregateBody

// repeated .tari.rpc.TransactionInput inputs = 1;
inline int AggregateBody::_internal_inputs_size() const {
  return inputs_.size();
}
inline int AggregateBody::inputs_size() const {
  return _internal_inputs_size();
}
inline void AggregateBody::clear_inputs() {
  inputs_.Clear();
}
inline ::tari::rpc::TransactionInput* AggregateBody::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:tari.rpc.AggregateBody.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::TransactionInput >*
AggregateBody::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:tari.rpc.AggregateBody.inputs)
  return &inputs_;
}
inline const ::tari::rpc::TransactionInput& AggregateBody::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::tari::rpc::TransactionInput& AggregateBody::inputs(int index) const {
  // @@protoc_insertion_point(field_get:tari.rpc.AggregateBody.inputs)
  return _internal_inputs(index);
}
inline ::tari::rpc::TransactionInput* AggregateBody::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::tari::rpc::TransactionInput* AggregateBody::add_inputs() {
  // @@protoc_insertion_point(field_add:tari.rpc.AggregateBody.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::TransactionInput >&
AggregateBody::inputs() const {
  // @@protoc_insertion_point(field_list:tari.rpc.AggregateBody.inputs)
  return inputs_;
}

// repeated .tari.rpc.TransactionOutput outputs = 2;
inline int AggregateBody::_internal_outputs_size() const {
  return outputs_.size();
}
inline int AggregateBody::outputs_size() const {
  return _internal_outputs_size();
}
inline void AggregateBody::clear_outputs() {
  outputs_.Clear();
}
inline ::tari::rpc::TransactionOutput* AggregateBody::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:tari.rpc.AggregateBody.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::TransactionOutput >*
AggregateBody::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:tari.rpc.AggregateBody.outputs)
  return &outputs_;
}
inline const ::tari::rpc::TransactionOutput& AggregateBody::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::tari::rpc::TransactionOutput& AggregateBody::outputs(int index) const {
  // @@protoc_insertion_point(field_get:tari.rpc.AggregateBody.outputs)
  return _internal_outputs(index);
}
inline ::tari::rpc::TransactionOutput* AggregateBody::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::tari::rpc::TransactionOutput* AggregateBody::add_outputs() {
  // @@protoc_insertion_point(field_add:tari.rpc.AggregateBody.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::TransactionOutput >&
AggregateBody::outputs() const {
  // @@protoc_insertion_point(field_list:tari.rpc.AggregateBody.outputs)
  return outputs_;
}

// repeated .tari.rpc.TransactionKernel kernels = 3;
inline int AggregateBody::_internal_kernels_size() const {
  return kernels_.size();
}
inline int AggregateBody::kernels_size() const {
  return _internal_kernels_size();
}
inline void AggregateBody::clear_kernels() {
  kernels_.Clear();
}
inline ::tari::rpc::TransactionKernel* AggregateBody::mutable_kernels(int index) {
  // @@protoc_insertion_point(field_mutable:tari.rpc.AggregateBody.kernels)
  return kernels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::TransactionKernel >*
AggregateBody::mutable_kernels() {
  // @@protoc_insertion_point(field_mutable_list:tari.rpc.AggregateBody.kernels)
  return &kernels_;
}
inline const ::tari::rpc::TransactionKernel& AggregateBody::_internal_kernels(int index) const {
  return kernels_.Get(index);
}
inline const ::tari::rpc::TransactionKernel& AggregateBody::kernels(int index) const {
  // @@protoc_insertion_point(field_get:tari.rpc.AggregateBody.kernels)
  return _internal_kernels(index);
}
inline ::tari::rpc::TransactionKernel* AggregateBody::_internal_add_kernels() {
  return kernels_.Add();
}
inline ::tari::rpc::TransactionKernel* AggregateBody::add_kernels() {
  // @@protoc_insertion_point(field_add:tari.rpc.AggregateBody.kernels)
  return _internal_add_kernels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tari::rpc::TransactionKernel >&
AggregateBody::kernels() const {
  // @@protoc_insertion_point(field_list:tari.rpc.AggregateBody.kernels)
  return kernels_;
}

// -------------------------------------------------------------------

// Transaction

// bytes offset = 1;
inline void Transaction::clear_offset() {
  offset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Transaction::offset() const {
  // @@protoc_insertion_point(field_get:tari.rpc.Transaction.offset)
  return _internal_offset();
}
inline void Transaction::set_offset(const std::string& value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:tari.rpc.Transaction.offset)
}
inline std::string* Transaction::mutable_offset() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.Transaction.offset)
  return _internal_mutable_offset();
}
inline const std::string& Transaction::_internal_offset() const {
  return offset_.Get();
}
inline void Transaction::_internal_set_offset(const std::string& value) {

  offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction::set_offset(std::string&& value) {

  offset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.Transaction.offset)
}
inline void Transaction::set_offset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.Transaction.offset)
}
inline void Transaction::set_offset(const void* value,
    size_t size) {

  offset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.Transaction.offset)
}
inline std::string* Transaction::_internal_mutable_offset() {

  return offset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction::release_offset() {
  // @@protoc_insertion_point(field_release:tari.rpc.Transaction.offset)
  return offset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_offset(std::string* offset) {
  if (offset != nullptr) {

  } else {

  }
  offset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.Transaction.offset)
}

// .tari.rpc.AggregateBody body = 2;
inline bool Transaction::_internal_has_body() const {
  return this != internal_default_instance() && body_ != nullptr;
}
inline bool Transaction::has_body() const {
  return _internal_has_body();
}
inline void Transaction::clear_body() {
  if (GetArena() == nullptr && body_ != nullptr) {
    delete body_;
  }
  body_ = nullptr;
}
inline const ::tari::rpc::AggregateBody& Transaction::_internal_body() const {
  const ::tari::rpc::AggregateBody* p = body_;
  return p != nullptr ? *p : *reinterpret_cast<const ::tari::rpc::AggregateBody*>(
      &::tari::rpc::_AggregateBody_default_instance_);
}
inline const ::tari::rpc::AggregateBody& Transaction::body() const {
  // @@protoc_insertion_point(field_get:tari.rpc.Transaction.body)
  return _internal_body();
}
inline void Transaction::unsafe_arena_set_allocated_body(
    ::tari::rpc::AggregateBody* body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(body_);
  }
  body_ = body;
  if (body) {

  } else {

  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tari.rpc.Transaction.body)
}
inline ::tari::rpc::AggregateBody* Transaction::release_body() {

  ::tari::rpc::AggregateBody* temp = body_;
  body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::tari::rpc::AggregateBody* Transaction::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_release:tari.rpc.Transaction.body)

  ::tari::rpc::AggregateBody* temp = body_;
  body_ = nullptr;
  return temp;
}
inline ::tari::rpc::AggregateBody* Transaction::_internal_mutable_body() {

  if (body_ == nullptr) {
    auto* p = CreateMaybeMessage<::tari::rpc::AggregateBody>(GetArena());
    body_ = p;
  }
  return body_;
}
inline ::tari::rpc::AggregateBody* Transaction::mutable_body() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.Transaction.body)
  return _internal_mutable_body();
}
inline void Transaction::set_allocated_body(::tari::rpc::AggregateBody* body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete body_;
  }
  if (body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(body);
    if (message_arena != submessage_arena) {
      body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }

  } else {

  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.Transaction.body)
}

// -------------------------------------------------------------------

// Signature

// bytes public_nonce = 1;
inline void Signature::clear_public_nonce() {
  public_nonce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Signature::public_nonce() const {
  // @@protoc_insertion_point(field_get:tari.rpc.Signature.public_nonce)
  return _internal_public_nonce();
}
inline void Signature::set_public_nonce(const std::string& value) {
  _internal_set_public_nonce(value);
  // @@protoc_insertion_point(field_set:tari.rpc.Signature.public_nonce)
}
inline std::string* Signature::mutable_public_nonce() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.Signature.public_nonce)
  return _internal_mutable_public_nonce();
}
inline const std::string& Signature::_internal_public_nonce() const {
  return public_nonce_.Get();
}
inline void Signature::_internal_set_public_nonce(const std::string& value) {

  public_nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Signature::set_public_nonce(std::string&& value) {

  public_nonce_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.Signature.public_nonce)
}
inline void Signature::set_public_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  public_nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.Signature.public_nonce)
}
inline void Signature::set_public_nonce(const void* value,
    size_t size) {

  public_nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.Signature.public_nonce)
}
inline std::string* Signature::_internal_mutable_public_nonce() {

  return public_nonce_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Signature::release_public_nonce() {
  // @@protoc_insertion_point(field_release:tari.rpc.Signature.public_nonce)
  return public_nonce_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Signature::set_allocated_public_nonce(std::string* public_nonce) {
  if (public_nonce != nullptr) {

  } else {

  }
  public_nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.Signature.public_nonce)
}

// bytes signature = 2;
inline void Signature::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Signature::signature() const {
  // @@protoc_insertion_point(field_get:tari.rpc.Signature.signature)
  return _internal_signature();
}
inline void Signature::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:tari.rpc.Signature.signature)
}
inline std::string* Signature::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:tari.rpc.Signature.signature)
  return _internal_mutable_signature();
}
inline const std::string& Signature::_internal_signature() const {
  return signature_.Get();
}
inline void Signature::_internal_set_signature(const std::string& value) {

  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Signature::set_signature(std::string&& value) {

  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:tari.rpc.Signature.signature)
}
inline void Signature::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:tari.rpc.Signature.signature)
}
inline void Signature::set_signature(const void* value,
    size_t size) {

  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:tari.rpc.Signature.signature)
}
inline std::string* Signature::_internal_mutable_signature() {

  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Signature::release_signature() {
  // @@protoc_insertion_point(field_release:tari.rpc.Signature.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Signature::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {

  } else {

  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:tari.rpc.Signature.signature)
}

// -------------------------------------------------------------------

// ConsensusConstants

// uint64 coinbase_lock_height = 1;
inline void ConsensusConstants::clear_coinbase_lock_height() {
  coinbase_lock_height_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::_internal_coinbase_lock_height() const {
  return coinbase_lock_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::coinbase_lock_height() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ConsensusConstants.coinbase_lock_height)
  return _internal_coinbase_lock_height();
}
inline void ConsensusConstants::_internal_set_coinbase_lock_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  coinbase_lock_height_ = value;
}
inline void ConsensusConstants::set_coinbase_lock_height(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_coinbase_lock_height(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ConsensusConstants.coinbase_lock_height)
}

// uint32 blockchain_version = 2;
inline void ConsensusConstants::clear_blockchain_version() {
  blockchain_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsensusConstants::_internal_blockchain_version() const {
  return blockchain_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConsensusConstants::blockchain_version() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ConsensusConstants.blockchain_version)
  return _internal_blockchain_version();
}
inline void ConsensusConstants::_internal_set_blockchain_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  blockchain_version_ = value;
}
inline void ConsensusConstants::set_blockchain_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blockchain_version(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ConsensusConstants.blockchain_version)
}

// uint64 future_time_limit = 3;
inline void ConsensusConstants::clear_future_time_limit() {
  future_time_limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::_internal_future_time_limit() const {
  return future_time_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::future_time_limit() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ConsensusConstants.future_time_limit)
  return _internal_future_time_limit();
}
inline void ConsensusConstants::_internal_set_future_time_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  future_time_limit_ = value;
}
inline void ConsensusConstants::set_future_time_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_future_time_limit(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ConsensusConstants.future_time_limit)
}

// uint64 difficulty_block_window = 5;
inline void ConsensusConstants::clear_difficulty_block_window() {
  difficulty_block_window_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::_internal_difficulty_block_window() const {
  return difficulty_block_window_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::difficulty_block_window() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ConsensusConstants.difficulty_block_window)
  return _internal_difficulty_block_window();
}
inline void ConsensusConstants::_internal_set_difficulty_block_window(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  difficulty_block_window_ = value;
}
inline void ConsensusConstants::set_difficulty_block_window(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_difficulty_block_window(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ConsensusConstants.difficulty_block_window)
}

// uint64 difficulty_max_block_interval = 6;
inline void ConsensusConstants::clear_difficulty_max_block_interval() {
  difficulty_max_block_interval_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::_internal_difficulty_max_block_interval() const {
  return difficulty_max_block_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::difficulty_max_block_interval() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ConsensusConstants.difficulty_max_block_interval)
  return _internal_difficulty_max_block_interval();
}
inline void ConsensusConstants::_internal_set_difficulty_max_block_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  difficulty_max_block_interval_ = value;
}
inline void ConsensusConstants::set_difficulty_max_block_interval(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_difficulty_max_block_interval(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ConsensusConstants.difficulty_max_block_interval)
}

// uint64 max_block_transaction_weight = 7;
inline void ConsensusConstants::clear_max_block_transaction_weight() {
  max_block_transaction_weight_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::_internal_max_block_transaction_weight() const {
  return max_block_transaction_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::max_block_transaction_weight() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ConsensusConstants.max_block_transaction_weight)
  return _internal_max_block_transaction_weight();
}
inline void ConsensusConstants::_internal_set_max_block_transaction_weight(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  max_block_transaction_weight_ = value;
}
inline void ConsensusConstants::set_max_block_transaction_weight(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_block_transaction_weight(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ConsensusConstants.max_block_transaction_weight)
}

// uint64 pow_algo_count = 8;
inline void ConsensusConstants::clear_pow_algo_count() {
  pow_algo_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::_internal_pow_algo_count() const {
  return pow_algo_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::pow_algo_count() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ConsensusConstants.pow_algo_count)
  return _internal_pow_algo_count();
}
inline void ConsensusConstants::_internal_set_pow_algo_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  pow_algo_count_ = value;
}
inline void ConsensusConstants::set_pow_algo_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pow_algo_count(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ConsensusConstants.pow_algo_count)
}

// uint64 median_timestamp_count = 9;
inline void ConsensusConstants::clear_median_timestamp_count() {
  median_timestamp_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::_internal_median_timestamp_count() const {
  return median_timestamp_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::median_timestamp_count() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ConsensusConstants.median_timestamp_count)
  return _internal_median_timestamp_count();
}
inline void ConsensusConstants::_internal_set_median_timestamp_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  median_timestamp_count_ = value;
}
inline void ConsensusConstants::set_median_timestamp_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_median_timestamp_count(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ConsensusConstants.median_timestamp_count)
}

// uint64 emission_initial = 10;
inline void ConsensusConstants::clear_emission_initial() {
  emission_initial_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::_internal_emission_initial() const {
  return emission_initial_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::emission_initial() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ConsensusConstants.emission_initial)
  return _internal_emission_initial();
}
inline void ConsensusConstants::_internal_set_emission_initial(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  emission_initial_ = value;
}
inline void ConsensusConstants::set_emission_initial(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_emission_initial(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ConsensusConstants.emission_initial)
}

// double emission_decay = 11;
inline void ConsensusConstants::clear_emission_decay() {
  emission_decay_ = 0;
}
inline double ConsensusConstants::_internal_emission_decay() const {
  return emission_decay_;
}
inline double ConsensusConstants::emission_decay() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ConsensusConstants.emission_decay)
  return _internal_emission_decay();
}
inline void ConsensusConstants::_internal_set_emission_decay(double value) {

  emission_decay_ = value;
}
inline void ConsensusConstants::set_emission_decay(double value) {
  _internal_set_emission_decay(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ConsensusConstants.emission_decay)
}

// uint64 emission_tail = 12;
inline void ConsensusConstants::clear_emission_tail() {
  emission_tail_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::_internal_emission_tail() const {
  return emission_tail_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::emission_tail() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ConsensusConstants.emission_tail)
  return _internal_emission_tail();
}
inline void ConsensusConstants::_internal_set_emission_tail(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  emission_tail_ = value;
}
inline void ConsensusConstants::set_emission_tail(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_emission_tail(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ConsensusConstants.emission_tail)
}

// uint64 min_blake_pow_difficulty = 13;
inline void ConsensusConstants::clear_min_blake_pow_difficulty() {
  min_blake_pow_difficulty_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::_internal_min_blake_pow_difficulty() const {
  return min_blake_pow_difficulty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::min_blake_pow_difficulty() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ConsensusConstants.min_blake_pow_difficulty)
  return _internal_min_blake_pow_difficulty();
}
inline void ConsensusConstants::_internal_set_min_blake_pow_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  min_blake_pow_difficulty_ = value;
}
inline void ConsensusConstants::set_min_blake_pow_difficulty(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_blake_pow_difficulty(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ConsensusConstants.min_blake_pow_difficulty)
}

// uint64 block_weight_inputs = 14;
inline void ConsensusConstants::clear_block_weight_inputs() {
  block_weight_inputs_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::_internal_block_weight_inputs() const {
  return block_weight_inputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::block_weight_inputs() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ConsensusConstants.block_weight_inputs)
  return _internal_block_weight_inputs();
}
inline void ConsensusConstants::_internal_set_block_weight_inputs(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  block_weight_inputs_ = value;
}
inline void ConsensusConstants::set_block_weight_inputs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_weight_inputs(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ConsensusConstants.block_weight_inputs)
}

// uint64 block_weight_outputs = 15;
inline void ConsensusConstants::clear_block_weight_outputs() {
  block_weight_outputs_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::_internal_block_weight_outputs() const {
  return block_weight_outputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::block_weight_outputs() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ConsensusConstants.block_weight_outputs)
  return _internal_block_weight_outputs();
}
inline void ConsensusConstants::_internal_set_block_weight_outputs(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  block_weight_outputs_ = value;
}
inline void ConsensusConstants::set_block_weight_outputs(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_weight_outputs(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ConsensusConstants.block_weight_outputs)
}

// uint64 block_weight_kernels = 16;
inline void ConsensusConstants::clear_block_weight_kernels() {
  block_weight_kernels_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::_internal_block_weight_kernels() const {
  return block_weight_kernels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConsensusConstants::block_weight_kernels() const {
  // @@protoc_insertion_point(field_get:tari.rpc.ConsensusConstants.block_weight_kernels)
  return _internal_block_weight_kernels();
}
inline void ConsensusConstants::_internal_set_block_weight_kernels(::PROTOBUF_NAMESPACE_ID::uint64 value) {

  block_weight_kernels_ = value;
}
inline void ConsensusConstants::set_block_weight_kernels(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_block_weight_kernels(value);
  // @@protoc_insertion_point(field_set:tari.rpc.ConsensusConstants.block_weight_kernels)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace tari

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tari::rpc::PowAlgo_PowAlgos> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tari::rpc::PowAlgo_PowAlgos>() {
  return ::tari::rpc::PowAlgo_PowAlgos_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_types_2eproto
