// Copyright 2020. The Tari Project
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
// following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
// disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
// following disclaimer in the documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
// products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
syntax = "proto3";

package tari.rpc;

import "google/protobuf/timestamp.proto";

/// An Empty placeholder for endpoints without request parameters
message Empty {}

// The BlockHeader contains all the metadata for the block, including proof of work, a link to the previous block
// and the transaction kernels.
message BlockHeader {
    // The hash of the block
    bytes hash = 1;
    // Version of the block
    uint32 version = 2;
    // Height of this block since the genesis block (height 0)
    uint64 height = 3;
    // Hash of the block previous to this in the chain.
    bytes prev_hash = 4;
    // Timestamp at which the block was built.
    google.protobuf.Timestamp timestamp = 5;
    // This is the UTXO merkle root of the outputs
    // This is calculated as Hash (txo MMR root  || roaring bitmap hash of UTXO indices)
    bytes output_mr = 6;
    // This is the MMR root of the range proofs
    bytes range_proof_mr = 7;
    // This is the MMR root of the kernels
    bytes kernel_mr = 8;
    // Total accumulated sum of kernel offsets since genesis block. We can derive the kernel offset sum for *this*
    // block from the total kernel offset of the previous block header.
    bytes total_kernel_offset = 9;
    // Nonce increment used to mine this block.
    uint64 nonce = 10;
    // Proof of work metadata
    ProofOfWork pow = 11;
    // Kernel MMR size
    uint64 kernel_mmr_size = 12;
    // Output MMR size
    uint64 output_mmr_size = 13;
}

// Metadata required for validating the Proof of Work calculation
message ProofOfWork {
    // 0 = Monero
    // 1 = Blake
    uint64 pow_algo = 1;
//    uint64 accumulated_monero_difficulty = 2;
//    uint64 accumulated_blake_difficulty = 3;
    bytes pow_data = 4;
   // uint64 target_difficulty = 5;
}

//This is used to request the which pow algo should be used with the block template
message PowAlgo {
    enum PowAlgos {
        POW_ALGOS_MONERO = 0;
        POW_ALGOS_BLAKE = 1;
        POW_ALGOS_SHA3 = 2;
    }
    PowAlgos pow_algo = 1;
}


// A Tari block. Blocks are linked together into a blockchain.
message Block {
    BlockHeader header = 1;
    AggregateBody body = 2;
}

// The representation of a historical block in the blockchain. It is essentially identical to a protocol-defined
// block but contains some extra metadata that clients such as Block Explorers will find interesting.
message HistoricalBlock {
    // The number of blocks that have been mined since this block, including this one. The current tip will have one
    // confirmation.
    uint64 confirmations = 1;
    // The underlying block
    Block block = 3;
}


// The NewBlockHeaderTemplate is used for the construction of a new mineable block. It contains all the metadata for the block that the Base Node is able to complete on behalf of a Miner.
message NewBlockHeaderTemplate {
    // Version of the block
    uint32 version = 1;
    // Height of this block since the genesis block (height 0)
    uint64 height = 2;
    // Hash of the block previous to this in the chain.
    bytes prev_hash = 3;
    // Total accumulated sum of kernel offsets since genesis block. We can derive the kernel offset sum for *this*
    // block from the total kernel offset of the previous block header.
    bytes total_kernel_offset = 4;
    // Proof of work metadata
    ProofOfWork pow = 5;

//    uint64 target_difficulty = 6;
}

// The new block template is used constructing a new partial block, allowing a miner to added the coinbase utxo and as a final step the Base node to add the MMR roots to the header.
message NewBlockTemplate {
    NewBlockHeaderTemplate header = 1;
    AggregateBody body = 2;
}

// The transaction kernel tracks the excess for a given transaction. For an explanation of what the excess is, and
// why it is necessary, refer to the
// [Mimblewimble TLU post](https://tlu.tarilabs.com/protocols/mimblewimble-1/sources/PITCHME.link.html?highlight=mimblewimble#mimblewimble).
// The kernel also tracks other transaction metadata, such as the lock height for the transaction (i.e. the earliest
// this transaction can be mined) and the transaction fee, in cleartext.
message TransactionKernel {
    // Options for a kernel's structure or use
    uint32 features = 1;
    /// Fee originally included in the transaction this proof is for (in MicroTari)
    uint64 fee = 2;
    // This kernel is not valid earlier than lock_height blocks
    // The max lock_height of all *inputs* to this transaction
    uint64 lock_height = 3;
    // Remainder of the sum of all transaction commitments. If the transaction
    // is well formed, amounts components should sum to zero and the excess
    // is hence a valid public key.
    bytes excess = 6;
    // The signature proving the excess is a valid public key, which signs
    // the transaction fee.
    Signature excess_sig = 7;
}

// A transaction input.
//
// Primarily a reference to an output being spent by the transaction.
message TransactionInput {
    // The features of the output being spent. We will check maturity for all outputs.
    OutputFeatures features = 1;
    // The commitment referencing the output being spent.
    bytes commitment = 2;
}

// Output for a transaction, defining the new ownership of coins that are being transferred. The commitment is a
// blinded value for the output while the range proof guarantees the commitment includes a positive value without
// overflow and the ownership of the private key.
message TransactionOutput {
    // Options for an output's structure or use
    OutputFeatures features = 1;
    // The homomorphic commitment representing the output amount
    bytes commitment = 2;
    // A proof that the commitment is in the right range
    bytes range_proof = 3;
}

// Options for UTXO's
message OutputFeatures {
    // Flags are the feature flags that differentiate between outputs, eg Coinbase all of which has different rules
    uint32 flags = 1;
    // The maturity of the specific UTXO. This is the min lock height at which an UTXO can be spend. Coinbase UTXO
    // require a min maturity of the Coinbase_lock_height, this should be checked on receiving new blocks.
    uint64 maturity = 2;
}

// The components of the block or transaction. The same struct can be used for either, since in Mimblewimble,
// cut-through means that blocks and transactions have the same structure. The inputs, outputs and kernels should
// be sorted by their Blake2b-256bit digest hash
message AggregateBody {
    // List of inputs spent by the transaction.
    repeated TransactionInput inputs = 1;
    // List of outputs the transaction produces.
    repeated TransactionOutput outputs = 2;
    // Kernels contain the excesses and their signatures for transaction
    repeated TransactionKernel kernels = 3;
}

// A transaction which consists of a kernel offset and an aggregate body made up of inputs, outputs and kernels.
message Transaction {
    bytes offset = 1;
    AggregateBody body = 2;
}

// Define the explicit Signature implementation for the Tari base layer. A different signature scheme can be
// employed by redefining this type.
message Signature {
    bytes public_nonce = 1;
    bytes signature = 2;
}

/// Consensus Constants response
message ConsensusConstants {
    /// The min height maturity a coinbase utxo must have
    uint64 coinbase_lock_height = 1;
    /// Current version of the blockchain
    uint32 blockchain_version = 2;
    /// The Future Time Limit (FTL) of the blockchain in seconds. This is the max allowable timestamp that is excepted.
    /// We use TxN/20 where T = target time = 60 seconds, and N = block_window = 150
    uint64 future_time_limit = 3;

    /// When doing difficulty adjustments and FTL calculations this is the amount of blocks we look at
    uint64 difficulty_block_window = 5;
    /// When doing difficulty adjustments, this is the maximum block time allowed
    uint64 difficulty_max_block_interval = 6;
    /// Maximum transaction weight used for the construction of new blocks.
    uint64 max_block_transaction_weight = 7;
    /// The amount of PoW algorithms used by the Tari chain.
    uint64 pow_algo_count = 8;
    /// This is how many blocks we use to count towards the median timestamp to ensure the block chain moves forward
    uint64 median_timestamp_count = 9;
    /// This is the initial emission curve amount
    uint64 emission_initial = 10;
    /// This is the emission curve delay
    repeated uint64 emission_decay = 11;
    /// This is the emission curve tail amount
    uint64 emission_tail = 12;
    /// This is the initial min difficulty for the difficulty adjustment
    uint64 min_blake_pow_difficulty = 13;
    /// Block weight for inputs
    uint64 block_weight_inputs = 14;
    /// Block weight for output
    uint64 block_weight_outputs = 15;
    /// Block weight for kernels
    uint64 block_weight_kernels = 16;
}



message Address{
    bytes address =1;
    string last_seen = 2;
    uint32 connection_attempts = 3;
    uint32 rejected_message_count = 4;
    uint64 avg_latency = 5;
}

message Peer{
    /// Public key of the peer
    bytes public_key =1;
    /// NodeId of the peer
    bytes node_id =2;
    /// Peer's addresses
    repeated Address addresses = 3;
    /// Last connection attempt to peer
    google.protobuf.Timestamp last_connection = 4;
    /// Flags for the peer.
    uint32 flags = 5;
    google.protobuf.Timestamp banned_until= 6;
    string banned_reason= 7;
    google.protobuf.Timestamp offline_at = 8;
    /// Features supported by the peer
    uint64 features = 9;
    /// Connection statics for the peer
    google.protobuf.Timestamp last_connected_at = 10;    /// Protocols supported by the peer. This should not be considered a definitive list of supported protocols and is
    /// used as information for more efficient protocol negotiation.
    repeated bytes supported_protocols = 11;
    /// User agent advertised by the peer
    string user_agent = 12;
}
