// Copyright 2020. The Tari Project
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
// following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
// disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
// following disclaimer in the documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
// products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
syntax = "proto3";

package tari.rpc;

/// An Empty placeholder for endpoints without request parameters
message Empty {}

// Define the explicit Signature implementation for the Tari base layer. A different signature scheme can be
// employed by redefining this type.
message Signature {
    bytes public_nonce = 1;
    bytes signature = 2;
}

// Define the explicit ComSignature implementation for the Tari base layer. A different signature scheme can be
// employed by redefining this type.
message ComSignature {
    bytes public_nonce_commitment = 1;
    bytes signature_u = 2;
    bytes signature_v = 3;
}


/// Consensus Constants response
message ConsensusConstants {
    /// The min height maturity a coinbase utxo must have
    uint64 coinbase_lock_height = 1;
    /// Current version of the blockchain
    uint32 blockchain_version = 2;
    /// The Future Time Limit (FTL) of the blockchain in seconds. This is the max allowable timestamp that is excepted.
    /// We use TxN/20 where T = target time = 60 seconds, and N = block_window = 150
    uint64 future_time_limit = 3;

    /// When doing difficulty adjustments and FTL calculations this is the amount of blocks we look at
    uint64 difficulty_block_window = 5;
    /// When doing difficulty adjustments, this is the maximum block time allowed
    uint64 difficulty_max_block_interval = 6;
    /// Maximum transaction weight used for the construction of new blocks.
    uint64 max_block_transaction_weight = 7;
    /// The amount of PoW algorithms used by the Tari chain.
    uint64 pow_algo_count = 8;
    /// This is how many blocks we use to count towards the median timestamp to ensure the block chain moves forward
    uint64 median_timestamp_count = 9;
    /// This is the initial emission curve amount
    uint64 emission_initial = 10;
    /// This is the emission curve delay
    repeated uint64 emission_decay = 11;
    /// This is the emission curve tail amount
    uint64 emission_tail = 12;
    /// This is the initial min difficulty for the difficulty adjustment
    uint64 min_blake_pow_difficulty = 13;
    /// Block weight for inputs
    uint64 block_weight_inputs = 14;
    /// Block weight for output
    uint64 block_weight_outputs = 15;
    /// Block weight for kernels
    uint64 block_weight_kernels = 16;
}
