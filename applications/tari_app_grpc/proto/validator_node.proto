// Copyright 2021. The Tari Project
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
// following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
// disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
// following disclaimer in the documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
// products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
syntax = "proto3";

import "types.proto";
import "network.proto";
import "transaction.proto";

package tari.rpc;

service ValidatorNode {
    rpc GetIdentity(GetIdentityRequest) returns (GetIdentityResponse);
    rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse);
    rpc GetTokenData(GetTokenDataRequest) returns (GetTokenDataResponse);
//    rpc ExecuteInstruction(ExecuteInstructionRequest) returns (ExecuteInstructionResponse);
    rpc InvokeReadMethod(InvokeReadMethodRequest) returns (InvokeReadMethodResponse);
    rpc InvokeMethod(InvokeMethodRequest) returns (InvokeMethodResponse);
    rpc GetConstitutionRequests(GetConstitutionRequestsRequest) returns (stream TransactionOutput);
    rpc PublishContractAcceptance(PublishContractAcceptanceRequest) returns (PublishContractAcceptanceResponse);
    rpc PublishContractUpdateProposalAcceptance(PublishContractUpdateProposalAcceptanceRequest) returns (PublishContractUpdateProposalAcceptanceResponse);
}

message GetConstitutionRequestsRequest {
    // empty
}

message GetMetadataRequest {
    // empty
}

message PublishContractAcceptanceRequest {
    bytes contract_id = 1;
}

message PublishContractAcceptanceResponse {
    string status = 1;
    uint64 tx_id = 2;
}

message PublishContractUpdateProposalAcceptanceRequest {
    bytes contract_id = 1;
    uint64 proposal_id = 2;
}

message PublishContractUpdateProposalAcceptanceResponse {
    string status = 1;
    uint64 tx_id = 2;
}

message GetMetadataResponse {
    repeated SidechainMetadata sidechains = 1;
}

message SidechainMetadata {
    bytes asset_public_key =1;
    uint64 committed_height = 2;
    bytes committed_hash = 3;
}

message GetTokenDataRequest {
  bytes asset_pub_key = 1;
  bytes unique_id = 2;
}

message GetTokenDataResponse {

}

//message ExecuteInstructionRequest{
//    bytes asset_public_key = 1;
//    uint32 template_id = 2;
//    string method = 3;
//     bytes args = 4;
////    bytes token_id = 5;
////    bytes signature = 6;
//}
//
//message ExecuteInstructionResponse {
//    string status = 1;
//    optional bytes result = 2;
//}

message InvokeReadMethodRequest{
    bytes contract_id = 1;
    uint32 template_id = 2;
    string method = 3;
     bytes args = 4;
     bytes sender = 5;
}

message InvokeReadMethodResponse {
    bytes result = 1;
    Authority authority = 2;
}

message Authority {
    bytes node_public_key =1;
    bytes signature = 2;
    bytes proxied_by = 3;
}

message InvokeMethodRequest{
    bytes contract_id = 1;
    uint32 template_id = 2;
    string method = 3;
    bytes args = 4;
    bytes sender = 5;
}

message InvokeMethodResponse {
    string status = 1;
    bytes result = 2;
}
