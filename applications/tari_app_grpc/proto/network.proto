// Copyright 2020. The Tari Project
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
// following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
// disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
// following disclaimer in the documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
// products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
syntax = "proto3";

package tari.rpc;

import "google/protobuf/timestamp.proto";

message NodeIdentity {
    bytes public_key = 1;
    string public_address = 2;
    bytes node_id = 3;
}

message Peer{
    /// Public key of the peer
    bytes public_key =1;
    /// NodeId of the peer
    bytes node_id =2;
    /// Peer's addresses
    repeated Address addresses = 3;
    /// Last connection attempt to peer
    google.protobuf.Timestamp last_connection = 4;
    /// Flags for the peer.
    uint32 flags = 5;
    google.protobuf.Timestamp banned_until= 6;
    string banned_reason= 7;
    google.protobuf.Timestamp offline_at = 8;
    /// Features supported by the peer
    uint64 features = 9;
    /// Connection statics for the peer
    google.protobuf.Timestamp last_connected_at = 10;    /// Protocols supported by the peer. This should not be considered a definitive list of supported protocols and is
    /// used as information for more efficient protocol negotiation.
    repeated bytes supported_protocols = 11;
    /// User agent advertised by the peer
    string user_agent = 12;
}

enum ConnectivityStatus {
    Initializing = 0;
    Online = 1;
    Degraded = 2;
    Offline = 3;
}

message NetworkStatusResponse {
    ConnectivityStatus status = 1;
    uint32 avg_latency_ms = 2;
    uint32 num_node_connections = 3;
    // TODO: Implement these
    //    uint32 incoming_bps = 4;
    //    uint32 outgoing_bps = 5;
    //    uint64 total_bytes_read = 6;
    //    uint64 total_bytes_written = 7;
}

message Address{
    bytes address =1;
    string last_seen = 2;
    uint32 connection_attempts = 3;
    uint32 rejected_message_count = 4;
    uint64 avg_latency = 5;
}

message ListConnectedPeersResponse {
    repeated Peer connected_peers = 1;
}

message SoftwareUpdate {
    bool has_update = 1;
    string version = 2;
    string sha = 3;
    string download_url = 4;
}

message GetIdentityRequest { }

message GetIdentityResponse {
    bytes public_key = 1;
    string public_address = 2;
    bytes node_id = 3;
}
