########################################################################################################################
#                                                                                                                      #
#                                          Common Configuration Options                                                #
#                                                                                                                      #
########################################################################################################################

[common]
# Select the network to connect to. Valid options are:
#   mainnet - the "real" Tari network (default)
#   weatherwax - the Tari testnet
network = "weatherwax"

# When first logging onto the Tari network, you need to find a few peers to bootstrap the process. In the absence of
# any servers, this is a little more challenging than usual. Our best strategy is just to try and connect to the peers
# you knew about last time you ran the software. But what about when you run the software for the first time? That's
# where this allowlist comes in. It's a list of known Tari nodes that are likely to be around for a long time and that
# new nodes can use to introduce themselves to the network.
# peer_seeds = ["public_key1::address1", "public_key2::address2",... ]
peer_seeds = [
    # weatherwax
    "98bc76afc1c35ad4651bdc9ef57bbe0655a2ea3cd86c0e19b5fd5890546eb040::/onion3/33izgtjkrlxhxybj6luqowkpiy2wvte43osejnbqyieqtdfhovzghxad:18141", #jozi
    "9a26e910288213d649b26f9a7a7ee51fe2b2a67ff7d42334523463bf4be94312::/onion3/56kq54ylttnbl5ikotqex3oqvtzlxdpn7zlx4v56rvzf4kq7eezlclid:18141", #london
    "6afd5b3c7772ad7d4bb26e0c19668fe04f2d68f99de9e132bee50a6c1846946d::/onion3/may4ajbmcn4dlnzf6fanvqlklxzqiw6qwu6ywqwkjc3bb354rc2i5wid:18141", #ncal
    "8e7beec9becdc44fe6015a00d97a77fa3dbafe65127dcc988df6326bd9fd040d::/onion3/3pise36l4imoopsbjic5rtw67adx7rms6w5pgjmccpdwiqx66j7oqcqd:18141", #nvir
    "80bb590d943a46e63ae79af5dc2c7d35a3dcd7922c182b28f619dc4cfc366f44::/onion3/oaxwahri7r3h5qjlcdbveyjmg4jsttausik66bicmhixft73nmvecdad:18141", #oregon
    "981cc8cd1e4fe2f99ea1bd3e0ab1e7821ca0bfab336a4967cfec053fee86254c::/onion3/7hxpnxrxycdfevirddau7ybofwedaamjrg2ijm57k2kevh5q46ixamid:18141", #seoul
    "f2ce179fb733725961a5f7e1e45dacdd443dd43ba6237438d6abe344fb717058::/onion3/nvgdmjf4wucgatz7vemzvi2u4sw5o4gyzwuikagpepoj4w7mkii47zid:18141", #stockholm
    "909c0160f4d8e815aba5c2bbccfcceb448877e7b38759fb160f3e9494484d515::/onion3/qw5uxv533sqdn2qoncfyqo35dgecy4rt4x27rexi2her6q6pcpxbm4qd:18141", #sydney
    # igor
    "8e7eb81e512f3d6347bf9b1ca9cd67d2c8e29f2836fc5bd608206505cc72af34::/onion3/l4wouomx42nezhzexjdzfh7pcou5l7df24ggmwgekuih7tkv2rsaokqd:18141",
    "00b35047a341401bcd336b2a3d564280a72f6dc72ec4c739d30c502acce4e803::/onion3/ojhxd7z6ga7qrvjlr3px66u7eiwasmffnuklscbh5o7g6wrbysj45vid:18141",
    "40a9d8573745072534bce7d0ecafe882b1c79570375a69841c08a98dee9ecb5f::/onion3/io37fylc2pupg4cte4siqlsmuszkeythgjsxs2i3prm6jyz2dtophaad:18141",
    "126c7ee64f71aca36398b977dd31fbbe9f9dad615df96473fb655bef5709c540::/onion3/6ilmgndocop7ybgmcvivbdsetzr5ggj4hhsivievoa2dx2b43wqlrlid:18141",
]

# DNS seeds
# The DNS records in these hostnames should provide TXT records as per https://github.com/tari-project/tari/pull/2319
# Enter a domain name for the TXT records: seeds.tari.com
dns_seeds =["seeds.weatherwax.tari.com"]
# The name server used to resolve DNS seeds  (Default: "1.1.1.1:53")
# dns_seeds_name_server = "1.1.1.1:53"
# Servers addresses, majority of them have to agree.
# autoupdate_dns_hosts = [#server1, #server2, ...]
# Set to true to only accept DNS records that pass DNSSEC validation (Default: true)
dns_seeds_use_dnssec = false

# Tari is a 100% peer-to-peer network, so there are no servers to hold messages for you while you're offline.
# Instead, we rely on our peers to hold messages for us while we're offline. This settings sets maximum size of the
# message cache that for holding our peers' messages, in MB.
#message_cache_size = 10

# When storing messages for peers, hold onto them for at most this long before discarding them. The default is 1440
# minutes = or 24 hrs.
#message_cache_ttl = 1440

# If peer nodes spam you with messages, or are otherwise badly behaved, they will be added to your denylist and banned
# You can set a time limit to release that ban (in minutes), or otherwise ban them for life (-1). The default is to
# ban them for 10 days.
#denylist_ban_period = 1440

# The number of liveness sessions to allow. Liveness sessions can be established by liveness monitors over TCP by
# sending a 0x50 (P) as the first byte. Any messages sent must be followed by newline message no longer than
# 50 characters. That message will be echoed back.
#liveness_max_sessions = 0
#liveness_allowlist_cidrs = ["127.0.0.1/32"]

# The buffer size constants for the publish/subscribe connector channel, connecting comms messages to the domain layer:
# - Buffer size for the base node (min value = 30, default value = 1500).
#buffer_size_base_node = 1500
# - Buffer size for the console wallet (min value = 300, default value = 50000).
#buffer_size_console_wallet = 50000
# The rate limit constants for the publish/subscribe connector channel, i.e. maximum amount of inbound messages to
# accept - any rate attemting to exceed this limit will be throttled.
# - Rate limit for the base node (min value = 5, default value = 1000).
#buffer_rate_limit_base_node = 1000
# - Rate limit for the console wallet (min value = 5, default value = 1000).
buffer_rate_limit_console_wallet = 1000
# The message deduplication persistent cache size - messages with these hashes in the cache will only be processed once.
# The cache will also be trimmed down to size periodically (min value = 0, default value = 2500).
dedup_cache_capacity = 25000

# The timeout (s) for requesting blocks from a peer during blockchain sync (min value = 10 s, default value = 150 s).
#fetch_blocks_timeout = 150

# The timeout (s) for requesting UTXOs from a base node (min value = 10 s, default value = 600 s).
#fetch_utxos_timeout = 600

# The timeout (s) for requesting other base node services (min value = 10 s, default value = 180 s).
#service_request_timeout = 180

# The maximum simultaneous comms RPC sessions allowed (default value = 1000). Setting this to -1 will allow unlimited
# sessions.
rpc_max_simultaneous_sessions = 10000

# Auto Update
#
# This interval in seconds to check for software updates. Setting this to 0 disables checking.
# auto_update.check_interval = 300
# Customize the hosts that are used to check for updates. These hosts must contain update information in DNS TXT records.
# auto_update.dns_hosts = ["updates.taripulse.com"]
# Customize the location of the update SHA hashes and maintainer-signed signature.
# auto_update.hashes_url = "https://<address>/hashes.txt"
# auto_update.hashes_sig_url = "https://<address>/hashes.txt.sig"


########################################################################################################################
#                                                                                                                      #
#                                      The Tari Network Configuration File                                             #
#                                                                                                                      #
########################################################################################################################

# This file carries all the configuration options for running Tari-related nodes and infrastructure in one single
# file. As you'll notice, almost all configuraton options are commented out. This is because they are either not
# needed, are for advanced users that know what they want to tweak, or are already set at their default values.  If
# things are working fine, then there's no need to change anything here.
#
# Each major section is clearly marked so that you can quickly find the section you're looking for. This first
# section holds configuration options that are common to all sections.

########################################################################################################################
#                                                                                                                      #
#                                          Base Node Configuration Options                                             #
#                                                                                                                      #
########################################################################################################################

# If you are not running a Tari Base node, you can simply leave everything in this section commented out. Base nodes
# help maintain the security of the Tari token and are the surest way to preserve your privacy and be 100% sure that
# no-one is cheating you out of your money.

[base_node]
# network = "weatherwax"

# Configuration options for testnet Weatherwax
[base_node.weatherwax]
# The type of database backend to use. Currently supported options are "memory" and "lmdb". LMDB is recommnded for
# almost all use cases.
db_type = "lmdb"

# db config defaults
# db_init_size_mb = 1000
# db_grow_size_mb = 500
# db_resize_threshold_mb = 100

# The maximum number of orphans that can be stored in the Orphan block pool. Default value is "720".
#orphan_storage_capacity = 720
# The size that the orphan pool will be allowed to grow before it is cleaned out, with threshold being tested every
# time before fetch and add blocks. Default value is "0", which indicates the orphan pool will not be cleaned out.
#orphan_db_clean_out_threshold = 0
# The pruning horizon that indicates how many full blocks without pruning must be kept by the base node. Default value
# is "0", which indicates an archival node without any pruning.
#pruning_horizon = 0

# The amount of messages that will be permitted in the flood ban timespan of 100s (Default weatherwax = 1000,
# default mainnet = 10000)
flood_ban_max_msg_count = 10000

# The relative path to store persistent data
data_dir = "/blockchain/weatherwax"

# This allowlist provides a method to force syncing from any known nodes you may choose, for example if you have a
# couple of nodes that you always want to have in sync.
# force_sync_peers = ["public_key1::address1", "public_key2::address2",... ]
force_sync_peers = [
    #my known peer 1
    #"public_key1::address1",
    #my known peer 2
    #"public_key1::address1",
]

# Determines the method of syncing blocks when the node is lagging. If you are not struggling with syncing, then
# it is recommended to leave this setting as it. Available values are ViaBestChainMetadata and ViaRandomPeer.
#block_sync_strategy="ViaBestChainMetadata"

# Configure the maximum number of threads available for base node operation. These threads are spawned lazily, so a higher
# number is recommended.
# max_threads = 512

# The number of threads to spawn and keep active at all times. The default is the number of cores available on this node.
# core_threads = <number of cores>

# The node's publicly-accessible hostname. This is the host name that is advertised on the network so that
# peers can find you.
# _NOTE_: If using the `tor` transport type, public_address will be ignored and an onion address will be
# automatically configured
#public_address = "/ip4/172.2.3.4/tcp/18189"

# do we allow test addresses to be accpted like 127.0.0.1
allow_test_addresses = false

# Enable the gRPC server for the base node. Set this to true if you want to enable third-party wallet software
grpc_enabled = true
# The socket to expose for the gRPC base node server. This value is ignored if grpc_enabled is false.
# Valid values here are IPv4 and IPv6 TCP sockets, local unix sockets (e.g. "ipc://base-node-gprc.sock.100")
grpc_base_node_address = "0.0.0.0:18142"
# The socket to expose for the gRPC wallet server. This value is ignored if grpc_enabled is false.
# Valid values here are IPv4 and IPv6 TCP sockets, local unix sockets (e.g. "ipc://base-node-gprc.sock.100")
grpc_console_wallet_address = "0.0.0.0:18143"

# A path to the file that stores your node identity and secret key
base_node_identity_file = "config/base_node_id.json"

# A path to the file that stores your console wallet's node identity and secret key
console_wallet_identity_file = "config/console_wallet_id.json"

# -------------- Transport configuration --------------
# Use TCP to connect to the Tari network. This transport can only communicate with TCP/IP addresses, so peers with
# e.g. tor onion addresses will not be contactable.
#transport = "tcp"
# The address and port to listen for peer connections over TCP.
#tcp_listener_address = "/ip4/0.0.0.0/tcp/18189"
# Configures a tor proxy used to connect to onion addresses. All other traffic uses direct TCP connections.
# This setting is optional however, if it is not specified, this node will not be able to connect to nodes that
# only advertise an onion address.
#tcp_tor_socks_address = "/ip4/127.0.0.1/tcp/36050"
#tcp_tor_socks_auth = "none"

transport = "tor"
tor_control_address = "/dns4/tor/tcp/9051"
# Overridden by the docker environment variables
tor_control_auth = "password=tari"
tor_onion_port = 18141
tor_forward_address = "/dns4/base_node/tcp/18189"
tor_socks_address_override="/dns4/tor/tcp/9050"
base_node_tor_identity_file = "config/base_node_tor.json"
console_wallet_tor_identity_file = "config/console_wallet_tor.json"

# Optionally bind an additional TCP socket for inbound Tari P2P protocol commms.
# Use cases include:
# - allowing wallets to locally connect to their base node, rather than through tor, when used in conjunction with `tor_proxy_bypass_addresses`
# - multiple P2P addresses, one public over DNS and one private over TOR
# - a "bridge" between TOR and TCP-only nodes
# auxilary_tcp_listener_address = "/ip4/127.0.0.1/tcp/9998"

# When these addresses are encountered when dialing another peer, the tor proxy is bypassed and the connection is made
# direcly over TCP. /ip4, /ip6, /dns, /dns4 and /dns6 are supported.
# tor_proxy_bypass_addresses = ["/dns4/my-foo-base-node/tcp/9998"]
# When using the tor transport and set to true, outbound TCP connections bypass the tor proxy. Defaults to false for better privacy
# tor_proxy_bypass_for_outbound_tcp = false;

########################################################################################################################
#                                                                                                                      #
#                                             Mempool Configuration Options                                            #
#                                                                                                                      #
########################################################################################################################

[mempool.weatherwax]
# Configuration options for testnet Igor
[base_node.igor]
# The type of database backend to use. Currently supported options are "memory" and "lmdb". LMDB is recommnded for
# almost all use cases.
db_type = "lmdb"

# db config defaults
# db_init_size_mb = 1000
# db_grow_size_mb = 500
# db_resize_threshold_mb = 100
# orphan_storage_capacity = 720
# The size that the orphan pool will be allowed to grow before it is cleaned out, with threshold being tested every
# time before fetch and add blocks. Default value is "0", which indicates the orphan pool will not be cleaned out.
#orphan_db_clean_out_threshold = 0
# The pruning horizon that indicates how many full blocks without pruning must be kept by the base node. Default value
# is "0", which indicates an archival node without any pruning.
#pruning_horizon = 0

# The amount of messages that will be permitted in the flood ban timespan of 100s (Default weatherwax = 1000,
# default mainnet = 10000)
flood_ban_max_msg_count = 10000

# The relative path to store persistent data
data_dir = "/blockchain/igor"
# max_threads = 512
# core_threads = <number of cores>

# The node's publicly-accessible hostname. This is the host name that is advertised on the network so that
# peers can find you.
# _NOTE_: If using the `tor` transport type, public_address will be ignored and an onion address will be
# automatically configured
#public_address = "/ip4/172.2.3.4/tcp/18189"

# do we allow test addresses to be accpted like 127.0.0.1
allow_test_addresses = false

# Enable the gRPC server for the base node. Set this to true if you want to enable third-party wallet software
grpc_enabled = true
grpc_base_node_address = "127.0.0.1:18142"
grpc_console_wallet_address = "127.0.0.1:18143"
base_node_identity_file = "config/igor/base_node_id.json"
console_wallet_identity_file = "config/igor/console_wallet_id.json"

# -------------- Transport configuration --------------
#transport = "tcp"
#tcp_listener_address = "/ip4/0.0.0.0/tcp/18189"
#tcp_tor_socks_address = "/ip4/127.0.0.1/tcp/36050"
#tcp_tor_socks_auth = "none"

transport = "tor"
tor_control_address = "/dns4/tor/tcp/9051"
# Overridden by the docker environment variables
tor_control_auth = "password=tari"
tor_onion_port = 18141
tor_forward_address = "/dns4/base_node/tcp/18189"
tor_socks_address_override="/dns4/tor/tcp/9050"
base_node_tor_identity_file = "config/igor/base_node_tor.json"
console_wallet_tor_identity_file = "config/igor/console_wallet_tor.json"
# Optionally bind an additional TCP socket for inbound Tari P2P protocol commms.
# Use cases include:
# - allowing wallets to locally connect to their base node, rather than through tor, when used in conjunction with `tor_proxy_bypass_addresses`
# - multiple P2P addresses, one public over DNS and one private over TOR
# - a "bridge" between TOR and TCP-only nodes
# auxilary_tcp_listener_address = "/ip4/127.0.0.1/tcp/9998"

# When these addresses are encountered when dialing another peer, the tor proxy is bypassed and the connection is made
# direcly over TCP. /ip4, /ip6, /dns, /dns4 and /dns6 are supported.
# tor_proxy_bypass_addresses = ["/dns4/my-foo-base-node/tcp/9998"]
# When using the tor transport and set to true, outbound TCP connections bypass the tor proxy. Defaults to false for better privacy
# tor_proxy_bypass_for_outbound_tcp = false;

########################################################################################################################
#                                                                                                                      #
#                                             Mempool Configuration Options                                            #
#                                                                                                                      #
########################################################################################################################
[mempool.igor]


