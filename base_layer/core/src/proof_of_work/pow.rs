// Copyright 2019. The Tari Project
//
// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
// following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
// disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
// following disclaimer in the documentation and/or other materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
// products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
// USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

use crate::{
    blocks::BlockHeader,
    proof_of_work::{difficulty::Difficulty, error::PowError},
};
use tari_utilities::{ByteArray, Hashable};

/// `WorkProof` is a trait that captures common functionality for different proof of work algorithms.
pub trait ProofOfWork: ByteArray + Hashable {
    /// This function  will calculate the difficulty for the proof of work given the nonce and block header. This
    /// function is used to validate proofs of work generated by miners.
    ///
    /// Generally speaking, the difficulty is roughly how many mining attempts a miner will make, _on average_ before
    /// finding a nonce that meets the difficulty target.
    ///
    /// In actuality, the difficulty is _defined_ as the maximum target value (u265) divided by the block header hash
    /// (as a u256)
    fn calculate_difficulty(&self, nonce: u64, header: &BlockHeader) -> Result<Difficulty, PowError>;
}
