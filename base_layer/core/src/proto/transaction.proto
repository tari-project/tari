// Copyright 2022 The Tari Project
// SPDX-License-Identifier: BSD-3-Clause

syntax = "proto3";

import "types.proto";

package tari.types;

// The transaction kernel tracks the excess for a given transaction. For an explanation of what the excess is, and
// why it is necessary, refer to the
// [Mimblewimble TLU post](https://tlu.tarilabs.com/protocols/mimblewimble-1/sources/PITCHME.link.html?highlight=mimblewimble#mimblewimble).
// The kernel also tracks other transaction metadata, such as the lock height for the transaction (i.e. the earliest
// this transaction can be mined) and the transaction fee, in cleartext.
message TransactionKernel {
    // Options for a kernel's structure or use
    uint32 features = 1;
    /// Fee originally included in the transaction this proof is for (in MicroTari)
    uint64 fee = 2;
    // This kernel is not valid earlier than lock_height blocks
    // The max lock_height of all *inputs* to this transaction
    uint64 lock_height = 3;
    // Remainder of the sum of all transaction commitments. If the transaction
    // is well formed, amounts components should sum to zero and the excess
    // is hence a valid public key.
    Commitment excess = 6;
    // The signature proving the excess is a valid public key, which signs
    // the transaction fee.
    Signature excess_sig = 7;
    // Version
    uint32 version = 8;
}

// A transaction input.
//
// Primarily a reference to an output being spent by the transaction.
message TransactionInput {
    // The features of the output being spent. We will check maturity for all outputs.
    OutputFeatures features = 1;
    // The commitment referencing the output being spent.
    Commitment commitment = 2;
    // The serialised script
    bytes script = 3;
    // The script input data, if any
    bytes input_data = 4;
    // A signature with k_s, signing the script, input data, and mined height
    ComSignature script_signature = 6;
    // The offset pubkey, K_O
    bytes sender_offset_public_key = 7;
    // The hash of the output this input is spending
    bytes output_hash = 8;
    // The serialised covenant
    bytes covenant = 9;
    // Version
    uint32 version = 10;
    // The encrypted value
    bytes encrypted_value = 11;
}

// Output for a transaction, defining the new ownership of coins that are being transferred. The commitment is a
// blinded value for the output while the range proof guarantees the commitment includes a positive value without
// overflow and the ownership of the private key.
message TransactionOutput {
    // Options for an output's structure or use
    OutputFeatures features = 1;
    // The homomorphic commitment representing the output amount
    Commitment commitment = 2;
    // A proof that the commitment is in the right range
    bytes range_proof = 3;
    // Tari script serialised script
    bytes script = 4;
    // Tari script offset pubkey, K_O
    bytes sender_offset_public_key = 5;
    // UTXO signature with the script offset private key, k_O
    ComSignature metadata_signature = 6;
    // The serialised covenant
    bytes covenant = 7;
    // Version
    uint32 version = 8;
    // The encrypted value
    bytes encrypted_value = 9;
}

// Options for UTXOs
message OutputFeatures {
    // Version
    uint32 version = 1;
    // Flags are the feature flags that differentiate between outputs, eg Coinbase all of which has different rules
    uint32 flags = 2;
    // The maturity of the specific UTXO. This is the min lock height at which an UTXO can be spend. Coinbase UTXO
    // require a min maturity of the Coinbase_lock_height, this should be checked on receiving new blocks.
    uint64 maturity = 3;
    bytes metadata = 4;
    // The recovery byte - not consensus critical - can help reduce the bandwidth with wallet recovery or in other
    // instances when a wallet needs to request the complete UTXO set from a base node.
    uint32 recovery_byte = 5;
    SideChainFeatures sidechain_features = 6;


    AssetOutputFeatures asset = 7;
    bytes unique_id = 8;
    bytes parent_public_key = 9;
    MintNonFungibleFeatures mint_non_fungible = 10;
    SideChainCheckpointFeatures sidechain_checkpoint = 11;
    CommitteeDefinitionFeatures committee_definition = 13;
}

message SideChainFeatures {
    bytes contract_id = 1;
    ContractDefinition definition = 2;
    ContractConstitution constitution = 3;
    ContractAcceptance acceptance = 4;
    ContractUpdateProposal update_proposal = 5;
    ContractUpdateProposalAcceptance update_proposal_acceptance = 6;
    ContractAmendment amendment = 7;
    ContractCheckpoint checkpoint = 8;
}

message ContractCheckpoint {
    bytes merkle_root = 1;
    CommitteeSignatures signatures = 2;
}

message ContractConstitution {
    CommitteeMembers validator_committee = 1;
    ContractAcceptanceRequirements acceptance_requirements = 2;
    SideChainConsensus consensus = 3;
    CheckpointParameters checkpoint_params = 4;
    ConstitutionChangeRules constitution_change_rules = 5;
    uint64 initial_reward = 6;
}

message ContractAcceptanceRequirements {
    uint64 acceptance_period_expiry = 1;
    uint32 minimum_quorum_required = 2;
}

message CommitteeMembers {
    repeated bytes members = 1;
}

message CheckpointParameters {
    uint64 abandoned_interval = 1;
    uint32 minimum_quorum_required = 2;
}

message ConstitutionChangeRules {
    uint32 change_flags = 1;
    RequirementsForConstitutionChange requirements_for_constitution_change = 2;
}

message RequirementsForConstitutionChange {
    // The minimum required constitution committee signatures required for a constitution change proposal to pass.
    uint32 minimum_constitution_committee_signatures = 1;
    // An allowlist of keys that are able to accept and ratify the initial constitution and its amendments. If this is
    // None, the constitution cannot be amended.
    CommitteeMembers constitution_committee = 2;
}

enum SideChainConsensus {
    UNSPECIFIED = 0;
    BFT = 1;
    PROOF_OF_WORK = 2;
    MERKLE_ROOT = 3;
}

// TODO: deprecated
message AssetOutputFeatures {
    bytes public_key = 1;
    repeated uint32 template_ids_implemented = 2;
    repeated TemplateParameter template_parameters = 3;
}

message TemplateParameter {
    uint32 template_id = 1;
    uint32 template_data_version = 2;
    bytes template_data = 3;
}

message MintNonFungibleFeatures {
    bytes asset_public_key = 1;
    Commitment asset_owner_commitment  = 2;
}

message SideChainCheckpointFeatures {
    bytes merkle_root = 1;
    repeated bytes committee = 2;
}

message CommitteeDefinitionFeatures {
    repeated bytes committee = 1;
    uint64 effective_sidechain_height = 2;
}

message ContractDefinition {
    bytes contract_name = 1;
    bytes contract_issuer = 2;
    ContractSpecification contract_spec = 3;
}

message ContractSpecification {
    bytes runtime = 1;
    repeated PublicFunction public_functions = 2;
}

message PublicFunction {
    bytes name = 1;
    FunctionRef function = 2;
}

message FunctionRef {
    bytes template_id = 1;
    uint32 function_id = 2;
}

message ContractAcceptance {
    bytes validator_node_public_key = 1;
    Signature signature = 2;
}

message ContractUpdateProposal {
    uint64 proposal_id = 1;
    Signature signature = 2;
    ContractConstitution updated_constitution = 3;
}

message ContractUpdateProposalAcceptance {
    uint64 proposal_id = 1;
    bytes validator_node_public_key = 2;
    Signature signature = 3;
}

message ContractAmendment {
    uint64 proposal_id = 1;
    CommitteeMembers validator_committee = 2;
    CommitteeSignatures validator_signatures = 3;
    ContractConstitution updated_constitution = 4;
    uint64 activation_window = 5;
}

message CommitteeSignatures {
    repeated Signature signatures = 1;
}

// The components of the block or transaction. The same struct can be used for either, since in Mimblewimble,
// cut-through means that blocks and transactions have the same structure. The inputs, outputs and kernels should
// be sorted by their Blake2b-256bit digest hash
message AggregateBody {
    // List of inputs spent by the transaction.
    repeated TransactionInput inputs = 1;
    // List of outputs the transaction produces.
    repeated TransactionOutput outputs = 2;
    // Kernels contain the excesses and their signatures for transaction
    repeated TransactionKernel kernels = 3;
}

// A transaction which consists of a kernel offset and an aggregate body made up of inputs, outputs and kernels.
// This struct is used to describe single transactions only.
message Transaction {
    BlindingFactor offset = 1;
    AggregateBody body = 2;
    BlindingFactor script_offset = 3;
}
