// Copyright 2023. The Tari Project
// SPDX-License-Identifier: BSD-3-Clause

// This file was generated by cargo-bindgen. Please do not edit manually.

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

struct ChatMessages;

struct ClientFFI;

/**
 * Configuration for a comms node
 */
struct P2pConfig;

struct TariAddress;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * Creates a Chat Client
 * TODO: This function takes a ptr to a collection of seed peers and this works fine in cucumber, or native rust but
 * isn't at all ideal for a real FFI. We need to work with the mobile teams and come up with a better interface
 * for supplying seed peers.
 *
 * ## Arguments
 * `config` - The P2PConfig pointer
 * `identity_file_path` - The path to the node identity file
 * `db_path` - The path to the db file
 * `seed_peers` - A ptr to a collection of seed peers
 * `network_str` - The network to connect to
 *
 * ## Returns
 * `*mut ChatClient` - Returns a pointer to a ChatClient, note that it returns ptr::null_mut()
 * if config is null, an error was encountered or if the runtime could not be created
 *
 * # Safety
 * The ```destroy_client``` method must be called when finished with a ClientFFI to prevent a memory leak
 */
struct ClientFFI *create_chat_client(struct P2pConfig *config,
                                     const char *identity_file_path,
                                     const char *db_path,
                                     Peer **seed_peers,
                                     const char *network_str);

/**
 * Frees memory for a ClientFFI
 *
 * ## Arguments
 * `client` - The pointer of a ClientFFI
 *
 * ## Returns
 * `()` - Does not return a value, equivalent to void in C
 *
 * # Safety
 * None
 */
void destroy_client_ffi(struct ClientFFI *client);

/**
 * Sends a message over a client
 *
 * ## Arguments
 * `client` - The Client pointer
 * `receiver` - A string containing a tari address
 * `message` - The peer seeds config for the node
 *
 * ## Returns
 * `()` - Does not return a value, equivalent to void in C
 *
 * # Safety
 * The ```receiver``` should be destroyed after use
 */
void send_message(struct ClientFFI *client,
                  struct TariAddress *receiver,
                  const char *message_c_char);

/**
 * Add a contact
 *
 * ## Arguments
 * `client` - The Client pointer
 * `address` - A TariAddress ptr
 *
 * ## Returns
 * `()` - Does not return a value, equivalent to void in C
 *
 * # Safety
 * The ```address``` should be destroyed after use
 */
void add_contact(struct ClientFFI *client, struct TariAddress *receiver);

/**
 * Check the online status of a contact
 *
 * ## Arguments
 * `client` - The Client pointer
 * `address` - A TariAddress ptr
 *
 * ## Returns
 * `()` - Does not return a value, equivalent to void in C
 *
 * # Safety
 * The ```address``` should be destroyed after use
 */
int check_online_status(struct ClientFFI *client, struct TariAddress *receiver);

/**
 * Get a ptr to all messages from or to address
 *
 * ## Arguments
 * `client` - The Client pointer
 * `address` - A TariAddress ptr
 *
 * ## Returns
 * `()` - Does not return a value, equivalent to void in C
 *
 * # Safety
 * The ```address``` should be destroyed after use
 * The returned pointer to ```*mut ChatMessages``` should be destroyed after use
 */
struct ChatMessages *get_all_messages(struct ClientFFI *client, struct TariAddress *address);

/**
 * Frees memory for messages
 *
 * ## Arguments
 * `messages_ptr` - The pointer of a Vec<Message>
 *
 * ## Returns
 * `()` - Does not return a value, equivalent to void in C
 *
 * # Safety
 * None
 */
void destroy_messages(struct ChatMessages *messages_ptr);

/**
 * Creates a TariAddress and returns a ptr
 *
 * ## Arguments
 * `receiver_c_char` - A string containing a tari address hex value
 *
 * ## Returns
 * `*mut TariAddress` - A ptr to a TariAddress
 *
 * # Safety
 * The ```destroy_tari_address``` function should be called when finished with the TariAddress
 */
struct TariAddress *create_tari_address(const char *receiver_c_char);

/**
 * Frees memory for a TariAddress
 *
 * ## Arguments
 * `address` - The pointer of a TariAddress
 *
 * ## Returns
 * `()` - Does not return a value, equivalent to void in C
 *
 * # Safety
 * None
 */
void destroy_tari_address(struct TariAddress *address);

#ifdef __cplusplus
} // extern "C"
#endif // __cplusplus
